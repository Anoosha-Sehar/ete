/* Generated by Cython 0.29.23 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "name": "ete4.coretype.tree",
        "sources": [
            "ete4/coretype/tree.pyx"
        ]
    },
    "module_name": "ete4.coretype.tree"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_23"
#define CYTHON_HEX_VERSION 0x001D17F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #elif defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ete4__coretype__tree
#define __PYX_HAVE_API__ete4__coretype__tree
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "ete4/coretype/tree.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_4ete4_8coretype_4tree_TreeNode;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table;
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio;
struct __pyx_ctuple_double__and_double;
typedef struct __pyx_ctuple_double__and_double __pyx_ctuple_double__and_double;

/* "ete4/coretype/tree.pyx":94
 * 
 * 
 *     cdef public (double, double) size             # <<<<<<<<<<<<<<
 *     cdef public double d1
 * 
 */
struct __pyx_ctuple_double__and_double {
  double f0;
  double f1;
};

/* "ete4/coretype/tree.pyx":81
 *         return repr(self.value)
 * 
 * cdef class TreeNode(object):             # <<<<<<<<<<<<<<
 *     cdef public dict _properties
 *     cdef public set features
 */
struct __pyx_obj_4ete4_8coretype_4tree_TreeNode {
  PyObject_HEAD
  PyObject *_properties;
  PyObject *features;
  PyObject *_children;
  PyObject *_up;
  PyObject *_img_style;
  PyObject *_faces;
  PyObject *_collapsed_faces;
  int _initialized;
  int _collapsed;
  __pyx_ctuple_double__and_double size;
  double d1;
};


/* "ete4/coretype/tree.pyx":532
 * 
 * 
 *     def prune(self, nodes, preserve_branch_length=False):             # <<<<<<<<<<<<<<
 *         """Prunes the topology of a node to conserve only the selected list of leaf
 *         internal nodes. The minimum number of nodes that conserve the
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune {
  PyObject_HEAD
  PyObject *__pyx_v_n2depth;
};


/* "ete4/coretype/tree.pyx":697
 *             return []
 * 
 *     def iter_leaves(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over the leaves under this node.
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves {
  PyObject_HEAD
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_n;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":721
 *         return [n for n in self.iter_leaves(is_leaf_fn=is_leaf_fn)]
 * 
 *     def iter_leaf_names(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over the leaf names under this node.
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names {
  PyObject_HEAD
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_n;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":741
 *         return [name for name in self.iter_leaf_names(is_leaf_fn=is_leaf_fn)]
 * 
 *     def iter_descendants(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over all descendant nodes.
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants {
  PyObject_HEAD
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_n;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_strategy;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":788
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)
 * 
 *     def iter_prepostorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over all nodes in a tree yielding every node in both
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder {
  PyObject_HEAD
  PyObject *__pyx_v__leaf;
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_node;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_to_visit;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "ete4/coretype/tree.pyx":815
 *                 yield (True, node)
 * 
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         to_visit = [self]
 *         if is_leaf_fn is not None:
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder {
  PyObject_HEAD
  PyObject *__pyx_v__leaf;
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_node;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_to_visit;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "ete4/coretype/tree.pyx":837
 *                 yield node
 * 
 *     def _iter_descendants_levelorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over all desdecendant nodes.
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder {
  PyObject_HEAD
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_node;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_tovisit;
};


/* "ete4/coretype/tree.pyx":848
 *                 tovisit.extend(node.children)
 * 
 *     def _iter_descendants_preorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterator over all descendant nodes.
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder {
  PyObject_HEAD
  PyObject *__pyx_v_is_leaf_fn;
  PyObject *__pyx_v_node;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_to_visit;
};


/* "ete4/coretype/tree.pyx":863
 *                 node = None
 * 
 *     def iter_ancestors(self):             # <<<<<<<<<<<<<<
 *         '''versionadded: 2.2
 * 
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors {
  PyObject_HEAD
  PyObject *__pyx_v_node;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
};


/* "ete4/coretype/tree.pyx":1033
 *             return common
 * 
 *     def iter_search_nodes(self, **conditions):             # <<<<<<<<<<<<<<
 *         """
 *         Search nodes in an iterative way. Matches are yielded as they
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes {
  PyObject_HEAD
  PyObject *__pyx_v_conditions;
  PyObject *__pyx_v_conditions_passed;
  PyObject *__pyx_v_key;
  PyObject *__pyx_v_n;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_value;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":1557
 * 
 * 
 *     def ladderize(self, direction=0):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize {
  PyObject_HEAD
  PyObject *__pyx_v_n2s;
};


/* "ete4/coretype/tree.pyx":1615
 *         return size
 * 
 *     def sort_descendants(self, attr="name"):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants {
  PyObject_HEAD
  PyObject *__pyx_v_node2content;
};


/* "ete4/coretype/tree.pyx":1631
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content {
  PyObject_HEAD
  PyObject *__pyx_v_store_attr;
};


/* "ete4/coretype/tree.pyx":1651
 *             _store = {}
 * 
 *         def get_value(_n):             # <<<<<<<<<<<<<<
 *             if store_attr is None:
 *                 _val = [_n]
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value {
  PyObject_HEAD
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *__pyx_outer_scope;
  PyObject *__pyx_v__n;
};


/* "ete4/coretype/tree.pyx":1656
 *             else:
 *                 if not isinstance(store_attr, six.string_types):
 *                     _val = [tuple(_n.props.get(attr) for attr in store_attr)]             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *__pyx_outer_scope;
  PyObject *__pyx_v_attr;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":1858
 * 
 * 
 *     def compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0,             # <<<<<<<<<<<<<<
 *                 has_duplications=False, expand_polytomies=False, unrooted=False,
 *                 max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name'):
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare {
  PyObject_HEAD
  PyObject *__pyx_v_expand_polytomies;
  PyObject *__pyx_v_min_support_ref;
  PyObject *__pyx_v_min_support_source;
  PyObject *__pyx_v_ref_tree_attr;
  PyObject *__pyx_v_source_tree_attr;
  PyObject *__pyx_v_unrooted;
};


/* "ete4/coretype/tree.pyx":2039
 *             return difftable
 * 
 *     def iter_edges(self, cached_content = None):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges {
  PyObject_HEAD
  PyObject *__pyx_v_all_leaves;
  PyObject *__pyx_v_cached_content;
  PyObject *__pyx_v_n;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_side1;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":2265
 *                 return False, "paraphyletic", foreign_leaves
 * 
 *     def get_monophyletic(self, values, target_attr):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.2
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic {
  PyObject_HEAD
  PyObject *__pyx_v_is_monophyletic;
  PyObject *__pyx_v_match;
  PyObject *__pyx_v_n2values;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self;
  PyObject *__pyx_v_target_attr;
  PyObject *__pyx_v_values;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":2293
 *                 yield match
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,             # <<<<<<<<<<<<<<
 *                           skip_large_polytomies=False):
 *         '''
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies {
  PyObject_HEAD
  PyObject *__pyx_v_TipTuple;
  PyObject *__pyx_v_add_leaf;
  PyObject *__pyx_v_enum_unordered;
};


/* "ete4/coretype/tree.pyx":2322
 *             pass
 * 
 *         def add_leaf(tree, label):             # <<<<<<<<<<<<<<
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf {
  PyObject_HEAD
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *__pyx_outer_scope;
  PyObject *__pyx_v_label;
  PyObject *__pyx_v_left;
  PyObject *__pyx_v_right;
  PyObject *__pyx_v_tree;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":2330
 *               yield (tree[0], right)
 * 
 *         def enum_unordered(labels):             # <<<<<<<<<<<<<<
 *           if len(labels) == 1:
 *             yield labels[0]
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered {
  PyObject_HEAD
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *__pyx_outer_scope;
  PyObject *__pyx_v_labels;
  PyObject *__pyx_v_new_tree;
  PyObject *__pyx_v_tree;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
};


/* "ete4/coretype/tree.pyx":2357
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,             # <<<<<<<<<<<<<<
 *                          recursive=True):
 *         """
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy {
  PyObject_HEAD
  PyObject *__pyx_v_default_dist;
  PyObject *__pyx_v_default_support;
};


/* "ete4/coretype/tree.pyx":2399
 *             _resolve(n)
 * 
 *     def cophenetic_matrix(self):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 3.1.1
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix {
  PyObject_HEAD
  PyObject *__pyx_v_uniquenodes;
};


/* "ete4/coretype/tree.pyx":2485
 *             # figure out the unique nodes in the path
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]
 *             distance = sum(x.dist for x in uniquenodes)             # <<<<<<<<<<<<<<
 *             leaf_distances[leaf1.name][leaf2.name] = leaf_distances[leaf2.name][leaf1.name] = distance
 * 
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr {
  PyObject_HEAD
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *__pyx_outer_scope;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "ete4/coretype/tree.pyx":2542
 * 
 *     @staticmethod
 *     def from_parent_child_table(parent_child_table):             # <<<<<<<<<<<<<<
 *         """Converts a parent-child table into an ETE Tree instance.
 * 
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table {
  PyObject_HEAD
  PyObject *__pyx_v_nodes_by_name;
};


/* "ete4/coretype/tree.pyx":2584
 * 
 *     @staticmethod
 *     def from_skbio(skbio_tree, map_attributes=None):             # <<<<<<<<<<<<<<
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 * 
 */
struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio {
  PyObject_HEAD
  PyObject *__pyx_v_all_nodes;
  PyObject *__pyx_v_map_attributes;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* py_set_discard.proto */
static CYTHON_INLINE int __Pyx_PySet_Discard(PyObject *set, PyObject *key);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_double__and_double(__pyx_ctuple_double__and_double);

/* FromPyCTupleUtility.proto */
static __pyx_ctuple_double__and_double __pyx_convert__from_py___pyx_ctuple_double__and_double(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'ete4.coretype.tree' */
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree_TreeNode = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct__prune = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_15_compare = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table = 0;
static PyTypeObject *__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio = 0;
static PyObject *__pyx_f_4ete4_8coretype_4tree___pyx_unpickle_TreeNode__set_state(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "ete4.coretype.tree"
extern int __pyx_module_is_main_ete4__coretype__tree;
int __pyx_module_is_main_ete4__coretype__tree = 0;

/* Implementation of 'ete4.coretype.tree' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_hex;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_reversed;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_[] = "";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "_n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "%s;";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_NA[] = "NA";
static const char __pyx_k_No[] = "No";
static const char __pyx_k_ch[] = "ch";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_ph[] = "_ph";
static const char __pyx_k_px[] = "px";
static const char __pyx_k_rf[] = "rf";
static const char __pyx_k_t2[] = "t2";
static const char __pyx_k_up[] = "up";
static const char __pyx_k_ETE[] = "ETE";
static const char __pyx_k_Yes[] = "Yes";
static const char __pyx_k__13[] = "-";
static const char __pyx_k__14[] = ", ";
static const char __pyx_k__15[] = " ";
static const char __pyx_k__16[] = "/";
static const char __pyx_k__17[] = "\\";
static const char __pyx_k__18[] = "|";
static const char __pyx_k__19[] = "\n";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_dpi[] = "dpi";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_hex[] = "hex";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_md5[] = "md5";
static const char __pyx_k_n_2[] = "n";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_six[] = "six";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_val[] = "_val";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Face[] = "Face";
static const char __pyx_k_Tree[] = "Tree";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_attr[] = "attr";
static const char __pyx_k_call[] = "call";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dist[] = "dist";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_face[] = "face";
static const char __pyx_k_fget[] = "fget";
static const char __pyx_k_fset[] = "fset";
static const char __pyx_k_hash[] = "__hash__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keep[] = "keep";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_port[] = "port";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_attr1[] = "attr1";
static const char __pyx_k_attr2[] = "attr2";
static const char __pyx_k_char1[] = "char1";
static const char __pyx_k_child[] = "child";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_diffs[] = "diffs";
static const char __pyx_k_dumps[] = "dumps";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_faces[] = "_faces";
static const char __pyx_k_fixed[] = "fixed";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_maxrf[] = "maxrf";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_props[] = "props";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ref_p[] = "ref_p";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_skbio[] = "skbio";
static const char __pyx_k_src_p[] = "src_p";
static const char __pyx_k_store[] = "_store";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_tools[] = "tools";
static const char __pyx_k_units[] = "units";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_utils[] = "utils";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_column[] = "column";
static const char __pyx_k_common[] = "common";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_detach[] = "detach";
static const char __pyx_k_drawer[] = "drawer";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_ete_ch[] = "ete_ch";
static const char __pyx_k_extend[] = "extend";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_get_up[] = "_get_up";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_labels[] = "labels";
static const char __pyx_k_layout[] = "layout";
static const char __pyx_k_legacy[] = "legacy";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_max_rf[] = "max_rf";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_newick[] = "newick";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_return[] = "%%return";
static const char __pyx_k_sample[] = "sample";
static const char __pyx_k_set_up[] = "_set_up";
static const char __pyx_k_sister[] = "sister";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_attr_t1[] = "attr_t1";
static const char __pyx_k_attr_t2[] = "attr_t2";
static const char __pyx_k_cPickle[] = "cPickle";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_compact[] = "compact";
static const char __pyx_k_compare[] = "_compare";
static const char __pyx_k_cpickle[] = "cpickle";
static const char __pyx_k_faces_2[] = "faces";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_get_img[] = "get_img";
static const char __pyx_k_hashlib[] = "hashlib";
static const char __pyx_k_is_leaf[] = "is_leaf";
static const char __pyx_k_is_root[] = "is_root";
static const char __pyx_k_layouts[] = "layouts";
static const char __pyx_k_norm_rf[] = "norm_rf";
static const char __pyx_k_outfile[] = "outfile";
static const char __pyx_k_popleft[] = "popleft";
static const char __pyx_k_pr_name[] = "pr_name";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_randint[] = "randint";
static const char __pyx_k_resolve[] = "_resolve";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_root_at[] = "root_at";
static const char __pyx_k_support[] = "support";
static const char __pyx_k_target2[] = "target2";
static const char __pyx_k_uniform[] = "uniform";
static const char __pyx_k_Rooted_s[] = "Rooted:\t%s";
static const char __pyx_k_TREEVIEW[] = "TREEVIEW";
static const char __pyx_k_TipTuple[] = "TipTuple";
static const char __pyx_k_TreeNode[] = "TreeNode";
static const char __pyx_k_add_face[] = "add_face";
static const char __pyx_k_add_leaf[] = "add_leaf";
static const char __pyx_k_add_prop[] = "add_prop";
static const char __pyx_k_asciiArt[] = "_asciiArt";
static const char __pyx_k_balanced[] = "balanced";
static const char __pyx_k_children[] = "children";
static const char __pyx_k_deepcopy[] = "deepcopy";
static const char __pyx_k_del_prop[] = "del_prop";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_ete_diff[] = "ete_diff";
static const char __pyx_k_ete_node[] = "ete_node";
static const char __pyx_k_get_dist[] = "_get_dist";
static const char __pyx_k_get_name[] = "_get_name";
static const char __pyx_k_get_node[] = "get_node";
static const char __pyx_k_get_path[] = "get_path";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_issubset[] = "issubset";
static const char __pyx_k_map_attr[] = "map_attr";
static const char __pyx_k_new_tree[] = "new_tree";
static const char __pyx_k_nodename[] = "nodename";
static const char __pyx_k_notfound[] = "notfound";
static const char __pyx_k_outgroup[] = "outgroup";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_pr_value[] = "pr_value";
static const char __pyx_k_preorder[] = "preorder";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_ref_disc[] = "ref_disc";
static const char __pyx_k_ref_tree[] = "ref_tree";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_safe_div[] = "_safe_div";
static const char __pyx_k_set_dist[] = "_set_dist";
static const char __pyx_k_set_name[] = "_set_name";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_src_disc[] = "src_disc";
static const char __pyx_k_src_tree[] = "src_tree";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_topology[] = "topology";
static const char __pyx_k_traverse[] = "traverse";
static const char __pyx_k_treediff[] = "treediff";
static const char __pyx_k_treeview[] = "treeview";
static const char __pyx_k_unrooted[] = "unrooted";
static const char __pyx_k_usecolor[] = "usecolor";
static const char __pyx_k_win_name[] = "win_name";
static const char __pyx_k_FaceAreas[] = "_FaceAreas";
static const char __pyx_k_NodeStyle[] = "NodeStyle";
static const char __pyx_k_TreeError[] = "TreeError";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_child[] = "add_child";
static const char __pyx_k_add_props[] = "add_props";
static const char __pyx_k_all_nodes[] = "all_nodes";
static const char __pyx_k_child_idx[] = "child_idx";
static const char __pyx_k_cmp_nodes[] = "cmp_nodes";
static const char __pyx_k_diffs_tab[] = "diffs_tab";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_file_name[] = "file_name";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_get_ascii[] = "get_ascii";
static const char __pyx_k_get_edges[] = "get_edges";
static const char __pyx_k_get_props[] = "_get_props";
static const char __pyx_k_get_style[] = "_get_style";
static const char __pyx_k_get_value[] = "get_value";
static const char __pyx_k_hexdigest[] = "hexdigest";
static const char __pyx_k_img_style[] = "img_style";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_ladderize[] = "ladderize";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_name2node[] = "name2node";
static const char __pyx_k_next_node[] = "next_node";
static const char __pyx_k_postorder[] = "postorder";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_recursive[] = "recursive";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ref_edges[] = "ref_edges";
static const char __pyx_k_set_props[] = "_set_props";
static const char __pyx_k_set_style[] = "_set_style";
static const char __pyx_k_show_tree[] = "show_tree";
static const char __pyx_k_six_moves[] = "six.moves";
static const char __pyx_k_smartFace[] = "smartFace";
static const char __pyx_k_tree_name[] = "tree_name";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_attributes[] = "attributes";
static const char __pyx_k_child_name[] = "child_name";
static const char __pyx_k_cmp_to_key[] = "cmp_to_key";
static const char __pyx_k_extendleft[] = "extendleft";
static const char __pyx_k_from_skbio[] = "from_skbio";
static const char __pyx_k_get_leaves[] = "get_leaves";
static const char __pyx_k_is_leaf_fn[] = "is_leaf_fn";
static const char __pyx_k_iter_edges[] = "iter_edges";
static const char __pyx_k_itervalues[] = "itervalues";
static const char __pyx_k_levelorder[] = "levelorder";
static const char __pyx_k_properties[] = "properties";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_skbio_node[] = "skbio_node";
static const char __pyx_k_skbio_tree[] = "skbio_tree";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_store_attr[] = "store_attr";
static const char __pyx_k_tree_style[] = "tree_style";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_No_children[] = "No children";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_get_sisters[] = "get_sisters";
static const char __pyx_k_get_support[] = "_get_support";
static const char __pyx_k_iter_leaves[] = "iter_leaves";
static const char __pyx_k_leaves_only[] = "leaves_only";
static const char __pyx_k_newick_only[] = "newick_only";
static const char __pyx_k_parent_name[] = "parent_name";
static const char __pyx_k_read_newick[] = "read_newick";
static const char __pyx_k_render_tree[] = "render_tree";
static const char __pyx_k_reuse_names[] = "reuse_names";
static const char __pyx_k_set_style_2[] = "set_style";
static const char __pyx_k_set_support[] = "_set_support";
static const char __pyx_k_target_attr[] = "target_attr";
static const char __pyx_k_tree_length[] = "tree_length";
static const char __pyx_k_treeko_dist[] = "treeko_dist";
static const char __pyx_k_valid_nodes[] = "valid_nodes";
static const char __pyx_k_DEFAULT_DIST[] = "DEFAULT_DIST";
static const char __pyx_k_DEFAULT_NAME[] = "DEFAULT_NAME";
static const char __pyx_k_add_children[] = "add_children";
static const char __pyx_k_branch_range[] = "branch_range";
static const char __pyx_k_branch_right[] = "branch-right";
static const char __pyx_k_combinations[] = "combinations";
static const char __pyx_k_common_edges[] = "common_edges";
static const char __pyx_k_default_dist[] = "default_dist";
static const char __pyx_k_get_children[] = "get_children";
static const char __pyx_k_get_distance[] = "get_distance";
static const char __pyx_k_get_ete_node[] = "get_ete_node";
static const char __pyx_k_include_self[] = "include_self";
static const char __pyx_k_is_collapsed[] = "is_collapsed";
static const char __pyx_k_monophyletic[] = "monophyletic";
static const char __pyx_k_paraphyletic[] = "paraphyletic";
static const char __pyx_k_polyphyletic[] = "polyphyletic";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_quoted_names[] = "quoted_names";
static const char __pyx_k_remove_child[] = "remove_child";
static const char __pyx_k_search_nodes[] = "search_nodes";
static const char __pyx_k_set_children[] = "_set_children";
static const char __pyx_k_source_edges[] = "source_edges";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_string_types[] = "string_types";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_write_newick[] = "write_newick";
static const char __pyx_k_FaceContainer[] = "FaceContainer";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_Tree_node_s_s[] = "Tree node '%s' (%s)";
static const char __pyx_k_delete_orphan[] = "delete_orphan";
static const char __pyx_k_get_collapsed[] = "_get_collapsed";
static const char __pyx_k_get_tree_root[] = "get_tree_root";
static const char __pyx_k_names_library[] = "names_library";
static const char __pyx_k_nodes_by_name[] = "nodes_by_name";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ref_tree_attr[] = "ref_tree_attr";
static const char __pyx_k_return_format[] = "return_format";
static const char __pyx_k_run_smartview[] = "run_smartview";
static const char __pyx_k_set_collapsed[] = "_set_collapsed";
static const char __pyx_k_show_internal[] = "show_internal";
static const char __pyx_k_skbioTreeNode[] = "skbioTreeNode";
static const char __pyx_k_support_range[] = "support_range";
static const char __pyx_k_topology_only[] = "topology_only";
static const char __pyx_k_treeview_main[] = "treeview.main";
static const char __pyx_k_FACE_POSITIONS[] = "FACE_POSITIONS";
static const char __pyx_k_Max_distance_f[] = "Max. distance:\t%f";
static const char __pyx_k_Node_not_found[] = "Node not found";
static const char __pyx_k_cached_content[] = "cached_content";
static const char __pyx_k_collapsed_only[] = "collapsed_only";
static const char __pyx_k_container_type[] = "container_type";
static const char __pyx_k_dist_formatter[] = "dist_formatter";
static const char __pyx_k_enum_unordered[] = "enum_unordered";
static const char __pyx_k_ete4_smartview[] = "ete4.smartview";
static const char __pyx_k_get_children_2[] = "_get_children";
static const char __pyx_k_get_face_areas[] = "_get_face_areas";
static const char __pyx_k_ignore_missing[] = "ignore_missing";
static const char __pyx_k_is_initialized[] = "is_initialized";
static const char __pyx_k_iter_ancestors[] = "iter_ancestors";
static const char __pyx_k_map_attributes[] = "map_attributes";
static const char __pyx_k_map_properties[] = "map_properties";
static const char __pyx_k_min_support_t1[] = "min_support_t1";
static const char __pyx_k_min_support_t2[] = "min_support_t2";
static const char __pyx_k_name_formatter[] = "name_formatter";
static const char __pyx_k_set_face_areas[] = "_set_face_areas";
static const char __pyx_k_set_formatters[] = "set_formatters";
static const char __pyx_k_show_difftable[] = "show_difftable";
static const char __pyx_k_treeview_faces[] = "treeview.faces";
static const char __pyx_k_unrooted_trees[] = "unrooted_trees";
static const char __pyx_k_use_collateral[] = "use_collateral";
static const char __pyx_k_DEFAULT_COMPACT[] = "DEFAULT_COMPACT";
static const char __pyx_k_DEFAULT_SUPPORT[] = "DEFAULT_SUPPORT";
static const char __pyx_k_TreeError___str[] = "TreeError.__str__";
static const char __pyx_k_child_not_found[] = "child not found";
static const char __pyx_k_collapsed_faces[] = "_collapsed_faces";
static const char __pyx_k_default_support[] = "default_support";
static const char __pyx_k_get_descendants[] = "get_descendants";
static const char __pyx_k_get_initialized[] = "_get_initialized";
static const char __pyx_k_iter_leaf_names[] = "iter_leaf_names";
static const char __pyx_k_min_support_ref[] = "min_support_ref";
static const char __pyx_k_newick_extended[] = "newick-extended";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_random_branches[] = "random_branches";
static const char __pyx_k_remove_children[] = "remove_children";
static const char __pyx_k_robinson_foulds[] = "robinson_foulds";
static const char __pyx_k_set_initialized[] = "_set_initialized";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_source_subtrees[] = "source_subtrees";
static const char __pyx_k_speciesFunction[] = "_speciesFunction";
static const char __pyx_k_translate_nodes[] = "_translate_nodes";
static const char __pyx_k_valid_ref_edges[] = "valid_ref_edges";
static const char __pyx_k_valid_src_edges[] = "valid_src_edges";
static const char __pyx_k_TreeError___init[] = "TreeError.__init__";
static const char __pyx_k_bad_node_up_type[] = "bad node_up type";
static const char __pyx_k_format_root_node[] = "format_root_node";
static const char __pyx_k_get_monophyletic[] = "get_monophyletic";
static const char __pyx_k_has_duplications[] = "has_duplications";
static const char __pyx_k_iter_descendants[] = "iter_descendants";
static const char __pyx_k_resolve_polytomy[] = "resolve_polytomy";
static const char __pyx_k_source_tree_attr[] = "source_tree_attr";
static const char __pyx_k_Invalid_node_type[] = "Invalid node type";
static const char __pyx_k_branch_properties[] = "branch_properties";
static const char __pyx_k_collapsed_faces_2[] = "collapsed_faces";
static const char __pyx_k_expand_polytomies[] = "expand_polytomies";
static const char __pyx_k_get_farthest_leaf[] = "get_farthest_leaf";
static const char __pyx_k_get_farthest_node[] = "get_farthest_node";
static const char __pyx_k_iter_prepostorder[] = "iter_prepostorder";
static const char __pyx_k_iter_search_nodes[] = "iter_search_nodes";
static const char __pyx_k_quoted_node_names[] = "quoted_node_names";
static const char __pyx_k_support_formatter[] = "support_formatter";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_ete4_coretype_tree[] = "ete4.coretype.tree";
static const char __pyx_k_ete4_parser_newick[] = "ete4.parser.newick";
static const char __pyx_k_get_cached_content[] = "get_cached_content";
static const char __pyx_k_min_support_source[] = "min_support_source";
static const char __pyx_k_parent_child_table[] = "parent_child_table";
static const char __pyx_k_show_difftable_tab[] = "show_difftable_tab";
static const char __pyx_k_sp_naming_function[] = "sp_naming_function";
static const char __pyx_k_Ambiguous_node_name[] = "Ambiguous node name: ";
static const char __pyx_k_Invalid_copy_method[] = "Invalid copy method";
static const char __pyx_k_Invalid_target_node[] = "Invalid target node: ";
static const char __pyx_k_Most_distant_node_s[] = "Most distant node:\t%s";
static const char __pyx_k_TreeNode_iter_edges[] = "TreeNode.iter_edges";
static const char __pyx_k_effective_tree_size[] = "effective_tree_size";
static const char __pyx_k_get_common_ancestor[] = "get_common_ancestor";
static const char __pyx_k_not_a_Face_instance[] = "not a Face instance";
static const char __pyx_k_polytomy_size_limit[] = "polytomy_size_limit";
static const char __pyx_k_ref_edges_in_source[] = "ref_edges_in_source";
static const char __pyx_k_show_difftable_topo[] = "show_difftable_topo";
static const char __pyx_k_source_edges_in_ref[] = "source_edges_in_ref";
static const char __pyx_k_DEFAULT_SHOWINTERNAL[] = "DEFAULT_SHOWINTERNAL";
static const char __pyx_k_Incorrect_child_type[] = "Incorrect child type: ";
static const char __pyx_k_Node_names_not_found[] = "Node names not found: ";
static const char __pyx_k_TreeNode_iter_leaves[] = "TreeNode.iter_leaves";
static const char __pyx_k_get_speciation_trees[] = "get_speciation_trees";
static const char __pyx_k_prevent_nondicotomic[] = "prevent_nondicotomic";
static const char __pyx_k_pyx_unpickle_TreeNode[] = "__pyx_unpickle_TreeNode";
static const char __pyx_k_skip_large_polytomies[] = "skip_large_polytomies";
static const char __pyx_k_Number_of_leaf_nodes_d[] = "Number of leaf nodes:\t%d";
static const char __pyx_k_ete4_coretype_tree_pyx[] = "ete4/coretype/tree.pyx";
static const char __pyx_k_face_position_not_in_s[] = "face position not in %s";
static const char __pyx_k_preserve_branch_length[] = "preserve_branch_length";
static const char __pyx_k_prune_locals_cmp_nodes[] = "prune.<locals>.cmp_nodes";
static const char __pyx_k_show_difftable_summary[] = "show_difftable_summary";
static const char __pyx_k_Incorrect_children_type[] = "Incorrect children type: ";
static const char __pyx_k_Nodes_are_not_connected[] = "Nodes are not connected!";
static const char __pyx_k_Total_number_of_nodes_d[] = "Total number of nodes:\t%d";
static const char __pyx_k_TreeNode_iter_ancestors[] = "TreeNode.iter_ancestors";
static const char __pyx_k_autodetect_duplications[] = "autodetect_duplications";
static const char __pyx_k_compare_locals__compare[] = "compare.<locals>._compare";
static const char __pyx_k_from_parent_child_table[] = "from_parent_child_table";
static const char __pyx_k_ladderize_locals_lambda[] = "ladderize.<locals>.<lambda>";
static const char __pyx_k_TreeNode_iter_leaf_names[] = "TreeNode.iter_leaf_names";
static const char __pyx_k_compare_locals__safe_div[] = "compare.<locals>._safe_div";
static const char __pyx_k_correct_by_polytomy_size[] = "correct_by_polytomy_size";
static const char __pyx_k_get_collapsed_face_areas[] = "_get_collapsed_face_areas";
static const char __pyx_k_TreeNode_get_monophyletic[] = "TreeNode.get_monophyletic";
static const char __pyx_k_TreeNode_iter_descendants[] = "TreeNode.iter_descendants";
static const char __pyx_k_ete4_smartview_gui_server[] = "ete4.smartview.gui.server";
static const char __pyx_k_iter_descendants_preorder[] = "_iter_descendants_preorder";
static const char __pyx_k_set__collapsed_face_areas[] = "_set__collapsed_face_areas";
static const char __pyx_k_TreeNode_iter_prepostorder[] = "TreeNode.iter_prepostorder";
static const char __pyx_k_TreeNode_iter_search_nodes[] = "TreeNode.iter_search_nodes";
static const char __pyx_k_abcdefghijklmnopqrstuvwxyz[] = "abcdefghijklmnopqrstuvwxyz";
static const char __pyx_k_iter_descendants_postorder[] = "_iter_descendants_postorder";
static const char __pyx_k_Treeview_module_is_disabled[] = "Treeview module is disabled";
static const char __pyx_k_iter_descendants_levelorder[] = "_iter_descendants_levelorder";
static const char __pyx_k_ete4_smartview_ete_gardening[] = "ete4.smartview.ete.gardening";
static const char __pyx_k_TreeNode_from_skbio_line_2584[] = "TreeNode.from_skbio (line 2584)";
static const char __pyx_k_combinations_with_replacement[] = "combinations_with_replacement";
static const char __pyx_k_Children_should_to_be_iterable[] = ". Children should to be iterable";
static const char __pyx_k_WARNING_del_prop_is_DEPRECATED[] = "\nWARNING! del_prop is DEPRECATED use del_prop instead\n";
static const char __pyx_k_from_skbio_locals_get_ete_node[] = "from_skbio.<locals>.get_ete_node";
static const char __pyx_k_get_monophyletic_locals_lambda[] = "get_monophyletic.<locals>.<lambda>";
static const char __pyx_k_node_properties_must_be_a_dict[] = "node properties must be a dict";
static const char __pyx_k_sort_descendants_locals_lambda[] = "sort_descendants.<locals>.<lambda>";
static const char __pyx_k_A_problem_occurred_during_a_Tre[] = "\n    A problem occurred during a TreeNode operation\n    ";
static const char __pyx_k_The_value_of_the_mode_parameter[] = "The value of the mode parameter must be 'legacy' or 'keep'";
static const char __pyx_k_WARNING_add_feature_is_DEPRECAT[] = "\nWARNING! add_feature is DEPRECATED use add_prop instead\n";
static const char __pyx_k_WARNING_add_features_is_DEPRECA[] = "\nWARNING! add_features is DEPRECATED use add_props instead\n";
static const char __pyx_k_get_farthest_and_closest_leaves[] = "_get_farthest_and_closest_leaves";
static const char __pyx_k_s_is_not_a_valid_FaceAreas_inst[] = "[%s] is not a valid FaceAreas instance";
static const char __pyx_k_A_parent_node_is_required_to_add[] = "A parent node is required to add a sister";
static const char __pyx_k_Both_trees_contain_polytomies_Tr[] = "Both trees contain polytomies! Try expand_polytomies=True instead";
static const char __pyx_k_Cannot_unroot_a_tree_with_only_t[] = "Cannot unroot a tree with only two leaves";
static const char __pyx_k_Converts_a_parent_child_table_in[] = "Converts a parent-child table into an ETE Tree instance.\n\n        :argument parent_child_table: a list of tuples containing parent-child\n           relationships. For example: [(\"A\", \"B\", 0.1), (\"A\", \"C\", 0.2), (\"C\",\n           \"D\", 1), (\"C\", \"E\", 1.5)]. Where each tuple represents: [parent, child,\n           child-parent-dist]\n\n        :returns: A new Tree instance\n\n        :example:\n\n        >>> tree = Tree.from_parent_child_table([(\"A\", \"B\", 0.1), (\"A\", \"C\", 0.2), (\"C\", \"D\", 1), (\"C\", \"E\", 1.5)])\n        >>> print tree\n\n        ";
static const char __pyx_k_Converts_a_scikit_bio_TreeNode_o[] = "Converts a scikit-bio TreeNode object into ETE Tree object.\n\n        :argument skbio_tree: a scikit bio TreeNode instance\n\n        :argument None map_attributes: A list of attribute nanes in the\n           scikit-bio tree that should be mapped into the ETE tree\n           instance. (name, id and branch length are always mapped)\n\n        :returns: A new Tree instance\n\n        :example:\n\n        >>> tree = Tree.from_skibio(skbioTree, map_attributes=[\"value\"])\n\n        ";
static const char __pyx_k_Duplicated_items_found_in_refere[] = "Duplicated items found in reference tree";
static const char __pyx_k_Duplicated_items_found_in_source[] = "Duplicated items found in source tree";
static const char __pyx_k_Found_polytomy_larger_than_curre[] = "Found polytomy larger than current limit: %s";
static const char __pyx_k_Incompatible_checksums_s_vs_0x78[] = "Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))";
static const char __pyx_k_The_monophyly_of_the_provided_va[] = "The monophyly of the provided values could never be reached, as not all of them exist in the tree. Please check your target attribute and values, or set the ignore_missing flag to True";
static const char __pyx_k_TreeNode__iter_descendants_level[] = "TreeNode._iter_descendants_levelorder";
static const char __pyx_k_TreeNode__iter_descendants_posto[] = "TreeNode._iter_descendants_postorder";
static const char __pyx_k_TreeNode__iter_descendants_preor[] = "TreeNode._iter_descendants_preorder";
static const char __pyx_k_TreeNode_from_parent_child_table[] = "TreeNode.from_parent_child_table (line 2542)";
static const char __pyx_k_Unrooted_tree_found_You_may_want[] = "Unrooted tree found! You may want to activate the unrooted_trees flag.";
static const char __pyx_k_cophenetic_matrix_locals_genexpr[] = "cophenetic_matrix.<locals>.genexpr";
static const char __pyx_k_expand_polytomies_and_correct_by[] = "expand_polytomies and correct_by_polytomy_size are mutually exclusive.";
static const char __pyx_k_expand_polytomies_and_unrooted_t[] = "expand_polytomies and unrooted_trees arguments cannot be enabled at the same time";
static const char __pyx_k_expand_polytomies_locals_TipTupl[] = "expand_polytomies.<locals>.TipTuple";
static const char __pyx_k_expand_polytomies_locals_add_lea[] = "expand_polytomies.<locals>.add_leaf";
static const char __pyx_k_expand_polytomies_locals_enum_un[] = "expand_polytomies.<locals>.enum_unordered";
static const char __pyx_k_from_parent_child_table_locals_g[] = "from_parent_child_table.<locals>.get_node";
static const char __pyx_k_get_cached_content_locals_get_va[] = "get_cached_content.<locals>.get_value.<locals>.genexpr";
static const char __pyx_k_max_treeko_splits_to_be_artifact[] = "max_treeko_splits_to_be_artifact";
static const char __pyx_k_node_dist_must_be_a_float_number[] = "node dist must be a float number";
static const char __pyx_k_node_support_must_be_a_float_num[] = "node support must be a float number";
static const char __pyx_k_resolve_polytomy_locals__resolve[] = "resolve_polytomy.<locals>._resolve";
static const char __pyx_k_get_cached_content_locals_get_va_2[] = "get_cached_content.<locals>.get_value";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_A_parent_node_is_required_to_add;
static PyObject *__pyx_kp_s_A_problem_occurred_during_a_Tre;
static PyObject *__pyx_kp_s_Ambiguous_node_name;
static PyObject *__pyx_kp_s_Both_trees_contain_polytomies_Tr;
static PyObject *__pyx_kp_s_Cannot_unroot_a_tree_with_only_t;
static PyObject *__pyx_kp_u_Children_should_to_be_iterable;
static PyObject *__pyx_kp_u_Converts_a_parent_child_table_in;
static PyObject *__pyx_kp_u_Converts_a_scikit_bio_TreeNode_o;
static PyObject *__pyx_n_s_DEFAULT_COMPACT;
static PyObject *__pyx_n_s_DEFAULT_DIST;
static PyObject *__pyx_n_s_DEFAULT_NAME;
static PyObject *__pyx_n_s_DEFAULT_SHOWINTERNAL;
static PyObject *__pyx_n_s_DEFAULT_SUPPORT;
static PyObject *__pyx_kp_s_Duplicated_items_found_in_refere;
static PyObject *__pyx_kp_s_Duplicated_items_found_in_source;
static PyObject *__pyx_n_s_ETE;
static PyObject *__pyx_n_s_FACE_POSITIONS;
static PyObject *__pyx_n_s_Face;
static PyObject *__pyx_n_s_FaceAreas;
static PyObject *__pyx_n_s_FaceContainer;
static PyObject *__pyx_kp_s_Found_polytomy_larger_than_curre;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x78;
static PyObject *__pyx_kp_u_Incorrect_child_type;
static PyObject *__pyx_kp_u_Incorrect_children_type;
static PyObject *__pyx_kp_s_Invalid_copy_method;
static PyObject *__pyx_kp_s_Invalid_node_type;
static PyObject *__pyx_kp_s_Invalid_target_node;
static PyObject *__pyx_kp_s_Max_distance_f;
static PyObject *__pyx_kp_s_Most_distant_node_s;
static PyObject *__pyx_n_s_NA;
static PyObject *__pyx_n_s_No;
static PyObject *__pyx_kp_s_No_children;
static PyObject *__pyx_n_s_NodeStyle;
static PyObject *__pyx_kp_s_Node_names_not_found;
static PyObject *__pyx_kp_s_Node_not_found;
static PyObject *__pyx_kp_s_Nodes_are_not_connected;
static PyObject *__pyx_kp_s_Number_of_leaf_nodes_d;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Rooted_s;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TREEVIEW;
static PyObject *__pyx_kp_s_The_monophyly_of_the_provided_va;
static PyObject *__pyx_kp_s_The_value_of_the_mode_parameter;
static PyObject *__pyx_n_s_TipTuple;
static PyObject *__pyx_kp_s_Total_number_of_nodes_d;
static PyObject *__pyx_n_s_Tree;
static PyObject *__pyx_n_s_TreeError;
static PyObject *__pyx_n_s_TreeError___init;
static PyObject *__pyx_n_s_TreeError___str;
static PyObject *__pyx_n_s_TreeNode;
static PyObject *__pyx_n_s_TreeNode__iter_descendants_level;
static PyObject *__pyx_n_s_TreeNode__iter_descendants_posto;
static PyObject *__pyx_n_s_TreeNode__iter_descendants_preor;
static PyObject *__pyx_kp_u_TreeNode_from_parent_child_table;
static PyObject *__pyx_kp_u_TreeNode_from_skbio_line_2584;
static PyObject *__pyx_n_s_TreeNode_get_monophyletic;
static PyObject *__pyx_n_s_TreeNode_iter_ancestors;
static PyObject *__pyx_n_s_TreeNode_iter_descendants;
static PyObject *__pyx_n_s_TreeNode_iter_edges;
static PyObject *__pyx_n_s_TreeNode_iter_leaf_names;
static PyObject *__pyx_n_s_TreeNode_iter_leaves;
static PyObject *__pyx_n_s_TreeNode_iter_prepostorder;
static PyObject *__pyx_n_s_TreeNode_iter_search_nodes;
static PyObject *__pyx_kp_s_Tree_node_s_s;
static PyObject *__pyx_kp_s_Treeview_module_is_disabled;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unrooted_tree_found_You_may_want;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_WARNING_add_feature_is_DEPRECAT;
static PyObject *__pyx_kp_s_WARNING_add_features_is_DEPRECA;
static PyObject *__pyx_kp_s_WARNING_del_prop_is_DEPRECATED;
static PyObject *__pyx_n_s_Yes;
static PyObject *__pyx_kp_s__13;
static PyObject *__pyx_kp_s__14;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__16;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_abcdefghijklmnopqrstuvwxyz;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_child;
static PyObject *__pyx_n_s_add_children;
static PyObject *__pyx_n_s_add_face;
static PyObject *__pyx_n_s_add_leaf;
static PyObject *__pyx_n_s_add_prop;
static PyObject *__pyx_n_s_add_props;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_nodes;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asciiArt;
static PyObject *__pyx_n_s_attr;
static PyObject *__pyx_n_s_attr1;
static PyObject *__pyx_n_s_attr2;
static PyObject *__pyx_n_s_attr_t1;
static PyObject *__pyx_n_s_attr_t2;
static PyObject *__pyx_n_s_attributes;
static PyObject *__pyx_n_s_autodetect_duplications;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_kp_s_bad_node_up_type;
static PyObject *__pyx_n_s_balanced;
static PyObject *__pyx_n_s_branch_properties;
static PyObject *__pyx_n_s_branch_range;
static PyObject *__pyx_kp_s_branch_right;
static PyObject *__pyx_n_s_cPickle;
static PyObject *__pyx_n_s_cached_content;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_ch;
static PyObject *__pyx_n_s_char1;
static PyObject *__pyx_n_s_child;
static PyObject *__pyx_n_s_child_idx;
static PyObject *__pyx_n_s_child_name;
static PyObject *__pyx_kp_s_child_not_found;
static PyObject *__pyx_n_s_children;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmp_nodes;
static PyObject *__pyx_n_s_cmp_to_key;
static PyObject *__pyx_n_s_collapsed_faces;
static PyObject *__pyx_n_s_collapsed_faces_2;
static PyObject *__pyx_n_s_collapsed_only;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_column;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_combinations;
static PyObject *__pyx_n_s_combinations_with_replacement;
static PyObject *__pyx_n_s_common;
static PyObject *__pyx_n_s_common_edges;
static PyObject *__pyx_n_s_compact;
static PyObject *__pyx_n_s_compare;
static PyObject *__pyx_n_s_compare_locals__compare;
static PyObject *__pyx_n_s_compare_locals__safe_div;
static PyObject *__pyx_n_s_container_type;
static PyObject *__pyx_n_s_cophenetic_matrix_locals_genexpr;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_correct_by_polytomy_size;
static PyObject *__pyx_n_s_cpickle;
static PyObject *__pyx_n_s_deepcopy;
static PyObject *__pyx_n_s_default_dist;
static PyObject *__pyx_n_s_default_support;
static PyObject *__pyx_n_s_del_prop;
static PyObject *__pyx_n_s_delete;
static PyObject *__pyx_n_s_delete_orphan;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_detach;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_diffs;
static PyObject *__pyx_n_s_diffs_tab;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_dist;
static PyObject *__pyx_n_s_dist_formatter;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dpi;
static PyObject *__pyx_n_s_drawer;
static PyObject *__pyx_n_s_dumps;
static PyObject *__pyx_n_s_effective_tree_size;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enum_unordered;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_ete4_coretype_tree;
static PyObject *__pyx_kp_s_ete4_coretype_tree_pyx;
static PyObject *__pyx_n_s_ete4_parser_newick;
static PyObject *__pyx_n_s_ete4_smartview;
static PyObject *__pyx_n_s_ete4_smartview_ete_gardening;
static PyObject *__pyx_n_s_ete4_smartview_gui_server;
static PyObject *__pyx_n_s_ete_ch;
static PyObject *__pyx_n_s_ete_diff;
static PyObject *__pyx_n_s_ete_node;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_expand_polytomies;
static PyObject *__pyx_kp_s_expand_polytomies_and_correct_by;
static PyObject *__pyx_kp_s_expand_polytomies_and_unrooted_t;
static PyObject *__pyx_n_s_expand_polytomies_locals_TipTupl;
static PyObject *__pyx_n_s_expand_polytomies_locals_add_lea;
static PyObject *__pyx_n_s_expand_polytomies_locals_enum_un;
static PyObject *__pyx_n_s_extend;
static PyObject *__pyx_n_s_extendleft;
static PyObject *__pyx_n_s_face;
static PyObject *__pyx_kp_s_face_position_not_in_s;
static PyObject *__pyx_n_s_faces;
static PyObject *__pyx_n_s_faces_2;
static PyObject *__pyx_n_s_fget;
static PyObject *__pyx_n_s_file_name;
static PyObject *__pyx_n_s_fixed;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_format_root_node;
static PyObject *__pyx_n_s_from_parent_child_table;
static PyObject *__pyx_n_s_from_parent_child_table_locals_g;
static PyObject *__pyx_n_s_from_skbio;
static PyObject *__pyx_n_s_from_skbio_locals_get_ete_node;
static PyObject *__pyx_n_s_fset;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_ascii;
static PyObject *__pyx_n_s_get_cached_content;
static PyObject *__pyx_n_s_get_cached_content_locals_get_va;
static PyObject *__pyx_n_s_get_cached_content_locals_get_va_2;
static PyObject *__pyx_n_s_get_children;
static PyObject *__pyx_n_s_get_children_2;
static PyObject *__pyx_n_s_get_collapsed;
static PyObject *__pyx_n_s_get_collapsed_face_areas;
static PyObject *__pyx_n_s_get_common_ancestor;
static PyObject *__pyx_n_s_get_descendants;
static PyObject *__pyx_n_s_get_dist;
static PyObject *__pyx_n_s_get_distance;
static PyObject *__pyx_n_s_get_edges;
static PyObject *__pyx_n_s_get_ete_node;
static PyObject *__pyx_n_s_get_face_areas;
static PyObject *__pyx_n_s_get_farthest_and_closest_leaves;
static PyObject *__pyx_n_s_get_farthest_leaf;
static PyObject *__pyx_n_s_get_farthest_node;
static PyObject *__pyx_n_s_get_img;
static PyObject *__pyx_n_s_get_initialized;
static PyObject *__pyx_n_s_get_leaves;
static PyObject *__pyx_n_s_get_monophyletic;
static PyObject *__pyx_n_s_get_monophyletic_locals_lambda;
static PyObject *__pyx_n_s_get_name;
static PyObject *__pyx_n_s_get_node;
static PyObject *__pyx_n_s_get_path;
static PyObject *__pyx_n_s_get_props;
static PyObject *__pyx_n_s_get_sisters;
static PyObject *__pyx_n_s_get_speciation_trees;
static PyObject *__pyx_n_s_get_style;
static PyObject *__pyx_n_s_get_support;
static PyObject *__pyx_n_s_get_tree_root;
static PyObject *__pyx_n_s_get_up;
static PyObject *__pyx_n_s_get_value;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_has_duplications;
static PyObject *__pyx_n_s_hash;
static PyObject *__pyx_n_s_hashlib;
static PyObject *__pyx_n_s_hex;
static PyObject *__pyx_n_s_hexdigest;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_ignore_missing;
static PyObject *__pyx_n_s_img_style;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_include_self;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_is_collapsed;
static PyObject *__pyx_n_s_is_initialized;
static PyObject *__pyx_n_s_is_leaf;
static PyObject *__pyx_n_s_is_leaf_fn;
static PyObject *__pyx_n_s_is_root;
static PyObject *__pyx_n_s_issubset;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_iter_ancestors;
static PyObject *__pyx_n_s_iter_descendants;
static PyObject *__pyx_n_s_iter_descendants_levelorder;
static PyObject *__pyx_n_s_iter_descendants_postorder;
static PyObject *__pyx_n_s_iter_descendants_preorder;
static PyObject *__pyx_n_s_iter_edges;
static PyObject *__pyx_n_s_iter_leaf_names;
static PyObject *__pyx_n_s_iter_leaves;
static PyObject *__pyx_n_s_iter_prepostorder;
static PyObject *__pyx_n_s_iter_search_nodes;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_itervalues;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_keep;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_labels;
static PyObject *__pyx_n_s_ladderize;
static PyObject *__pyx_n_s_ladderize_locals_lambda;
static PyObject *__pyx_n_s_layout;
static PyObject *__pyx_n_s_layouts;
static PyObject *__pyx_n_s_leaves_only;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_legacy;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_levelorder;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_map_attr;
static PyObject *__pyx_n_s_map_attributes;
static PyObject *__pyx_n_s_map_properties;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_rf;
static PyObject *__pyx_n_s_max_treeko_splits_to_be_artifact;
static PyObject *__pyx_n_s_maxrf;
static PyObject *__pyx_n_s_md5;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_min_support_ref;
static PyObject *__pyx_n_s_min_support_source;
static PyObject *__pyx_n_s_min_support_t1;
static PyObject *__pyx_n_s_min_support_t2;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_monophyletic;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_2;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name2node;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_name_formatter;
static PyObject *__pyx_n_s_names_library;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_tree;
static PyObject *__pyx_n_s_newick;
static PyObject *__pyx_kp_s_newick_extended;
static PyObject *__pyx_n_s_newick_only;
static PyObject *__pyx_n_s_next_node;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_kp_s_node_dist_must_be_a_float_number;
static PyObject *__pyx_kp_s_node_properties_must_be_a_dict;
static PyObject *__pyx_kp_s_node_support_must_be_a_float_num;
static PyObject *__pyx_n_s_nodename;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_nodes_by_name;
static PyObject *__pyx_n_s_norm_rf;
static PyObject *__pyx_kp_s_not_a_Face_instance;
static PyObject *__pyx_n_s_notfound;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_outfile;
static PyObject *__pyx_n_s_outgroup;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_paraphyletic;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_parent_child_table;
static PyObject *__pyx_n_s_parent_name;
static PyObject *__pyx_n_s_ph;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_polyphyletic;
static PyObject *__pyx_n_s_polytomy_size_limit;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_popleft;
static PyObject *__pyx_n_s_port;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_postorder;
static PyObject *__pyx_n_s_pr_name;
static PyObject *__pyx_n_s_pr_value;
static PyObject *__pyx_n_s_preorder;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_preserve_branch_length;
static PyObject *__pyx_n_s_prevent_nondicotomic;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_n_s_properties;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_props;
static PyObject *__pyx_n_s_prune_locals_cmp_nodes;
static PyObject *__pyx_n_s_px;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_TreeNode;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_quoted_names;
static PyObject *__pyx_n_s_quoted_node_names;
static PyObject *__pyx_n_s_randint;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_random_branches;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_newick;
static PyObject *__pyx_n_s_recursive;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ref_disc;
static PyObject *__pyx_n_s_ref_edges;
static PyObject *__pyx_n_s_ref_edges_in_source;
static PyObject *__pyx_n_s_ref_p;
static PyObject *__pyx_n_s_ref_tree;
static PyObject *__pyx_n_s_ref_tree_attr;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_remove_child;
static PyObject *__pyx_n_s_remove_children;
static PyObject *__pyx_n_s_render_tree;
static PyObject *__pyx_n_s_resolve;
static PyObject *__pyx_n_s_resolve_polytomy;
static PyObject *__pyx_n_s_resolve_polytomy_locals__resolve;
static PyObject *__pyx_kp_s_return;
static PyObject *__pyx_n_s_return_format;
static PyObject *__pyx_n_s_reuse_names;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_rf;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_robinson_foulds;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_s_root_at;
static PyObject *__pyx_n_s_run_smartview;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_kp_s_s_is_not_a_valid_FaceAreas_inst;
static PyObject *__pyx_n_s_safe_div;
static PyObject *__pyx_n_s_sample;
static PyObject *__pyx_n_s_search_nodes;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set__collapsed_face_areas;
static PyObject *__pyx_n_s_set_children;
static PyObject *__pyx_n_s_set_collapsed;
static PyObject *__pyx_n_s_set_dist;
static PyObject *__pyx_n_s_set_face_areas;
static PyObject *__pyx_n_s_set_formatters;
static PyObject *__pyx_n_s_set_initialized;
static PyObject *__pyx_n_s_set_name;
static PyObject *__pyx_n_s_set_props;
static PyObject *__pyx_n_s_set_style;
static PyObject *__pyx_n_s_set_style_2;
static PyObject *__pyx_n_s_set_support;
static PyObject *__pyx_n_s_set_up;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_show_difftable;
static PyObject *__pyx_n_s_show_difftable_summary;
static PyObject *__pyx_n_s_show_difftable_tab;
static PyObject *__pyx_n_s_show_difftable_topo;
static PyObject *__pyx_n_s_show_internal;
static PyObject *__pyx_n_s_show_tree;
static PyObject *__pyx_n_s_sister;
static PyObject *__pyx_n_s_six;
static PyObject *__pyx_n_s_six_moves;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_skbio;
static PyObject *__pyx_n_s_skbioTreeNode;
static PyObject *__pyx_n_s_skbio_node;
static PyObject *__pyx_n_s_skbio_tree;
static PyObject *__pyx_n_s_skip_large_polytomies;
static PyObject *__pyx_n_s_smartFace;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_sort_descendants_locals_lambda;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_source_edges;
static PyObject *__pyx_n_s_source_edges_in_ref;
static PyObject *__pyx_n_s_source_subtrees;
static PyObject *__pyx_n_s_source_tree_attr;
static PyObject *__pyx_n_s_sp_naming_function;
static PyObject *__pyx_n_s_speciesFunction;
static PyObject *__pyx_n_s_src_disc;
static PyObject *__pyx_n_s_src_p;
static PyObject *__pyx_n_s_src_tree;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_store;
static PyObject *__pyx_n_s_store_attr;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_strategy;
static PyObject *__pyx_n_s_string_types;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_support;
static PyObject *__pyx_n_s_support_formatter;
static PyObject *__pyx_n_s_support_range;
static PyObject *__pyx_n_s_t2;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_target2;
static PyObject *__pyx_n_s_target_attr;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tools;
static PyObject *__pyx_n_s_topology;
static PyObject *__pyx_n_s_topology_only;
static PyObject *__pyx_n_s_translate_nodes;
static PyObject *__pyx_n_s_traverse;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_n_s_tree_length;
static PyObject *__pyx_n_s_tree_name;
static PyObject *__pyx_n_s_tree_style;
static PyObject *__pyx_n_s_treediff;
static PyObject *__pyx_n_s_treeko_dist;
static PyObject *__pyx_n_s_treeview;
static PyObject *__pyx_n_s_treeview_faces;
static PyObject *__pyx_n_s_treeview_main;
static PyObject *__pyx_n_s_uniform;
static PyObject *__pyx_n_s_units;
static PyObject *__pyx_n_s_unrooted;
static PyObject *__pyx_n_s_unrooted_trees;
static PyObject *__pyx_n_s_up;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_use_collateral;
static PyObject *__pyx_n_s_usecolor;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_utils;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_valid_nodes;
static PyObject *__pyx_n_s_valid_ref_edges;
static PyObject *__pyx_n_s_valid_src_edges;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_win_name;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_write_newick;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_4ete4_8coretype_4tree_9TreeError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_9TreeError_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode__get_name(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_2_set_name(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_4_get_dist(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_set_dist(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_8_get_support(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_set_support(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_get_props(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_14_set_props(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_get_up(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_18_set_up(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_20_get_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_22_set_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_children); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_24_get_style(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_26_set_style(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_28_get_initialized(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_30_set_initialized(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_32_get_collapsed(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_34_set_collapsed(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_36_set_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_38_get_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_40_set__collapsed_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_42_get_collapsed_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_44__init__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_newick, CYTHON_UNUSED PyObject *__pyx_v_format, PyObject *__pyx_v_dist, PyObject *__pyx_v_support, PyObject *__pyx_v_name, CYTHON_UNUSED PyObject *__pyx_v_quoted_node_names); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_46__nonzero__(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_48__bool__(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_50__repr__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_52__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_54__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_56__str__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_58__contains__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static Py_ssize_t __pyx_pf_4ete4_8coretype_4tree_8TreeNode_60__len__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_62__iter__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_64add_prop(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_66add_props(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_props); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_68del_prop(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_70add_feature(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_pr_name, PyObject *__pyx_v_pr_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_72add_features(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_features); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_74del_feature(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_pr_name); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_76add_child(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_child, PyObject *__pyx_v_name, PyObject *__pyx_v_dist, PyObject *__pyx_v_support); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_78add_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_children); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_80pop_child(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_child_idx); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_82remove_child(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_child); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_84remove_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_86add_sister(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_sister, PyObject *__pyx_v_name, PyObject *__pyx_v_dist); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_88remove_sister(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_sister); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_90delete(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_prevent_nondicotomic, PyObject *__pyx_v_preserve_branch_length); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_92detach(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_5prune_cmp_nodes(PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_94prune(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_nodes, PyObject *__pyx_v_preserve_branch_length); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_96swap_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_98get_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_100get_sisters(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_102iter_leaves(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_105get_leaves(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_107iter_leaf_names(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_110get_leaf_names(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_112iter_descendants(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_strategy, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_115get_descendants(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_strategy, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_117traverse(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_strategy, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_119iter_prepostorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_122_iter_descendants_postorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_125_iter_descendants_levelorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_128_iter_descendants_preorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_131iter_ancestors(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_134get_ancestors(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_136describe(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_138write(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_properties, PyObject *__pyx_v_outfile, PyObject *__pyx_v_format, CYTHON_UNUSED PyObject *__pyx_v_is_leaf_fn, CYTHON_UNUSED PyObject *__pyx_v_format_root_node, PyObject *__pyx_v_dist_formatter, PyObject *__pyx_v_support_formatter, PyObject *__pyx_v_name_formatter, PyObject *__pyx_v_quoted_node_names); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_140get_tree_root(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_142get_common_ancestor(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_target_nodes, PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_144iter_search_nodes(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_conditions); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_147search_nodes(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_conditions); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_149get_leaves_by_name(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_151is_leaf(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_153is_root(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_155get_distance(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_target, PyObject *__pyx_v_target2, PyObject *__pyx_v_topology_only); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_157get_farthest_node(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_159_get_farthest_and_closest_leaves(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_161get_farthest_leaf(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_163get_closest_leaf(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only, PyObject *__pyx_v_is_leaf_fn); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_165get_midpoint_outgroup(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_167populate(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_names_library, PyObject *__pyx_v_reuse_names, PyObject *__pyx_v_random_branches, PyObject *__pyx_v_branch_range, CYTHON_UNUSED PyObject *__pyx_v_support_range); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_169set_outgroup(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_outgroup, PyObject *__pyx_v_branch_properties); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_171unroot(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_173show(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_layout, PyObject *__pyx_v_tree_style, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_175render(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_layout, PyObject *__pyx_v_w, PyObject *__pyx_v_h, PyObject *__pyx_v_tree_style, PyObject *__pyx_v_units, PyObject *__pyx_v_dpi); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_177explore(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_tree_name, PyObject *__pyx_v_tree_style, PyObject *__pyx_v_layouts, PyObject *__pyx_v_port); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_179copy(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_method); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_181_asciiArt(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_char1, PyObject *__pyx_v_show_internal, PyObject *__pyx_v_compact, PyObject *__pyx_v_attributes); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_183get_ascii(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_show_internal, PyObject *__pyx_v_compact, PyObject *__pyx_v_attributes); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_185ladderize(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_direction); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_187sort_descendants(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_9get_value_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(PyObject *__pyx_self, PyObject *__pyx_v__n); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_189get_cached_content(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_store_attr, PyObject *__pyx_v_container_type, PyObject *__pyx_v_leaves_only, PyObject *__pyx_v__store); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_191robinson_foulds(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_t2, PyObject *__pyx_v_attr_t1, PyObject *__pyx_v_attr_t2, PyObject *__pyx_v_unrooted_trees, PyObject *__pyx_v_expand_polytomies, PyObject *__pyx_v_polytomy_size_limit, PyObject *__pyx_v_skip_large_polytomies, PyObject *__pyx_v_correct_by_polytomy_size, PyObject *__pyx_v_min_support_t1, PyObject *__pyx_v_min_support_t2); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare__safe_div(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare_2_compare(PyObject *__pyx_self, PyObject *__pyx_v_src_tree, PyObject *__pyx_v_ref_tree); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_193compare(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_ref_tree, CYTHON_UNUSED PyObject *__pyx_v_use_collateral, PyObject *__pyx_v_min_support_source, PyObject *__pyx_v_min_support_ref, PyObject *__pyx_v_has_duplications, PyObject *__pyx_v_expand_polytomies, PyObject *__pyx_v_unrooted, PyObject *__pyx_v_max_treeko_splits_to_be_artifact, PyObject *__pyx_v_ref_tree_attr, PyObject *__pyx_v_source_tree_attr); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_195_diff(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_t2, PyObject *__pyx_v_output, PyObject *__pyx_v_attr_t1, PyObject *__pyx_v_attr_t2, PyObject *__pyx_v_color); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_197iter_edges(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_cached_content); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_200get_edges(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_cached_content); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_202standardize(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_delete_orphan, PyObject *__pyx_v_preserve_branch_length); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_204get_topology_id(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_206convert_to_ultrametric(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_tree_length, PyObject *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_208check_monophyly(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_values, PyObject *__pyx_v_target_attr, PyObject *__pyx_v_ignore_missing, PyObject *__pyx_v_unrooted); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_210get_monophyletic(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_values, PyObject *__pyx_v_target_attr); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_add_leaf(PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_3enum_unordered(PyObject *__pyx_self, PyObject *__pyx_v_labels); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_213expand_polytomies(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_map_attr, PyObject *__pyx_v_polytomy_size_limit, PyObject *__pyx_v_skip_large_polytomies); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy__resolve(PyObject *__pyx_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_215resolve_polytomy(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_default_dist, PyObject *__pyx_v_default_support, PyObject *__pyx_v_recursive); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_17cophenetic_matrix_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_217cophenetic_matrix(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_219add_face(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_face, PyObject *__pyx_v_column, PyObject *__pyx_v_position, PyObject *__pyx_v_collapsed_only); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_221set_style(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_node_style); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_get_node(PyObject *__pyx_self, PyObject *__pyx_v_nodename, PyObject *__pyx_v_dist); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_223from_parent_child_table(PyObject *__pyx_v_parent_child_table); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10from_skbio_get_ete_node(PyObject *__pyx_self, PyObject *__pyx_v_skbio_node); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_225from_skbio(PyObject *__pyx_v_skbio_tree, PyObject *__pyx_v_map_attributes); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_227phonehome(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_initialized___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_initialized_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_collapsed___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_collapsed_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_4size___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_4size_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_2d1___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_2d1_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_229__reduce_cython__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_231__setstate_cython__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree__translate_nodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_nodes); /* proto */
static PyObject *__pyx_pf_4ete4_8coretype_4tree_2__pyx_unpickle_TreeNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree_TreeNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct__prune(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_15_compare(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_setdefault = {0, &__pyx_n_s_setdefault, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, &__pyx_n_s_values, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PySet_Type_issubset = {0, &__pyx_n_s_issubset, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_5000;
static PyObject *__pyx_int_126217679;
static PyObject *__pyx_int_999999999;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__8;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__20;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__28;
static PyObject *__pyx_slice__30;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
/* Late includes */

/* "ete4/coretype/tree.pyx":76
 *     A problem occurred during a TreeNode operation
 *     """
 *     def __init__(self, value=''):             # <<<<<<<<<<<<<<
 *         self.value = value
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_9TreeError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_9TreeError_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_9TreeError_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_9TreeError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject*)__pyx_kp_s_));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 76, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 76, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_9TreeError___init__(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_9TreeError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ete4/coretype/tree.pyx":77
 *     """
 *     def __init__(self, value=''):
 *         self.value = value             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return repr(self.value)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_value, __pyx_v_value) < 0) __PYX_ERR(0, 77, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":76
 *     A problem occurred during a TreeNode operation
 *     """
 *     def __init__(self, value=''):             # <<<<<<<<<<<<<<
 *         self.value = value
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":78
 *     def __init__(self, value=''):
 *         self.value = value
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_9TreeError_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_9TreeError_3__str__ = {"__str__", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_9TreeError_3__str__, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_9TreeError_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_9TreeError_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_9TreeError_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "ete4/coretype/tree.pyx":79
 *         self.value = value
 *     def __str__(self):
 *         return repr(self.value)             # <<<<<<<<<<<<<<
 * 
 * cdef class TreeNode(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":78
 *     def __init__(self, value=''):
 *         self.value = value
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeError.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":137
 *     """
 * 
 *     def _get_name(self):             # <<<<<<<<<<<<<<
 *         return self._properties.get('name')
 *     def _set_name(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_1_get_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_1_get_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_name (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode__get_name(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode__get_name(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_name", 0);

  /* "ete4/coretype/tree.pyx":138
 * 
 *     def _get_name(self):
 *         return self._properties.get('name')             # <<<<<<<<<<<<<<
 *     def _set_name(self, value):
 *         self._properties['name'] = value
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_properties == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 138, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_properties, __pyx_n_s_name, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":137
 *     """
 * 
 *     def _get_name(self):             # <<<<<<<<<<<<<<
 *         return self._properties.get('name')
 *     def _set_name(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":139
 *     def _get_name(self):
 *         return self._properties.get('name')
 *     def _set_name(self, value):             # <<<<<<<<<<<<<<
 *         self._properties['name'] = value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_set_name(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_set_name(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_name (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_2_set_name(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_2_set_name(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_name", 0);

  /* "ete4/coretype/tree.pyx":140
 *         return self._properties.get('name')
 *     def _set_name(self, value):
 *         self._properties['name'] = value             # <<<<<<<<<<<<<<
 * 
 *     def _get_dist(self):
 */
  if (unlikely(__pyx_v_self->_properties == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 140, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->_properties, __pyx_n_s_name, __pyx_v_value) < 0)) __PYX_ERR(0, 140, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":139
 *     def _get_name(self):
 *         return self._properties.get('name')
 *     def _set_name(self, value):             # <<<<<<<<<<<<<<
 *         self._properties['name'] = value
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":142
 *         self._properties['name'] = value
 * 
 *     def _get_dist(self):             # <<<<<<<<<<<<<<
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_5_get_dist(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_5_get_dist(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_dist (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_4_get_dist(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_4_get_dist(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_dist", 0);

  /* "ete4/coretype/tree.pyx":143
 * 
 *     def _get_dist(self):
 *         return self._properties.get('dist')             # <<<<<<<<<<<<<<
 *     def _set_dist(self, value):
 *         try:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_properties == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 143, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_properties, __pyx_n_s_dist, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":142
 *         self._properties['name'] = value
 * 
 *     def _get_dist(self):             # <<<<<<<<<<<<<<
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_dist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":144
 *     def _get_dist(self):
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):             # <<<<<<<<<<<<<<
 *         try:
 *             self._properties['dist'] = float(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7_set_dist(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7_set_dist(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_dist (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_set_dist(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_set_dist(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_dist", 0);

  /* "ete4/coretype/tree.pyx":145
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties['dist'] = float(value)
 *         except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":146
 *     def _set_dist(self, value):
 *         try:
 *             self._properties['dist'] = float(value)             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             raise TreeError('node dist must be a float number')
 */
      __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__pyx_v_self->_properties == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 146, __pyx_L3_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_self->_properties, __pyx_n_s_dist, __pyx_t_4) < 0)) __PYX_ERR(0, 146, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":145
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties['dist'] = float(value)
 *         except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":147
 *         try:
 *             self._properties['dist'] = float(value)
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             raise TreeError('node dist must be a float number')
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_dist", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 147, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "ete4/coretype/tree.pyx":148
 *             self._properties['dist'] = float(value)
 *         except ValueError:
 *             raise TreeError('node dist must be a float number')             # <<<<<<<<<<<<<<
 * 
 *     def _get_support(self):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 148, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_s_node_dist_must_be_a_float_number) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_node_dist_must_be_a_float_number);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 148, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 148, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "ete4/coretype/tree.pyx":145
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties['dist'] = float(value)
 *         except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "ete4/coretype/tree.pyx":144
 *     def _get_dist(self):
 *         return self._properties.get('dist')
 *     def _set_dist(self, value):             # <<<<<<<<<<<<<<
 *         try:
 *             self._properties['dist'] = float(value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_dist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":150
 *             raise TreeError('node dist must be a float number')
 * 
 *     def _get_support(self):             # <<<<<<<<<<<<<<
 *         return self._properties.get('support')
 *     def _set_support(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_get_support(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_get_support(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_support (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8_get_support(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_8_get_support(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_support", 0);

  /* "ete4/coretype/tree.pyx":151
 * 
 *     def _get_support(self):
 *         return self._properties.get('support')             # <<<<<<<<<<<<<<
 *     def _set_support(self, value):
 *         try:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_properties == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 151, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_properties, __pyx_n_s_support, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":150
 *             raise TreeError('node dist must be a float number')
 * 
 *     def _get_support(self):             # <<<<<<<<<<<<<<
 *         return self._properties.get('support')
 *     def _set_support(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_support", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":152
 *     def _get_support(self):
 *         return self._properties.get('support')
 *     def _set_support(self, value):             # <<<<<<<<<<<<<<
 *         try:
 *             self._properties['support'] = float(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_set_support(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_set_support(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_support (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_set_support(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_set_support(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_support", 0);

  /* "ete4/coretype/tree.pyx":153
 *         return self._properties.get('support')
 *     def _set_support(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties['support'] = float(value)
 *         except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":154
 *     def _set_support(self, value):
 *         try:
 *             self._properties['support'] = float(value)             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             raise TreeError('node support must be a float number')
 */
      __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__pyx_v_self->_properties == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 154, __pyx_L3_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_self->_properties, __pyx_n_s_support, __pyx_t_4) < 0)) __PYX_ERR(0, 154, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":153
 *         return self._properties.get('support')
 *     def _set_support(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties['support'] = float(value)
 *         except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":155
 *         try:
 *             self._properties['support'] = float(value)
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             raise TreeError('node support must be a float number')
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_support", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 155, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "ete4/coretype/tree.pyx":156
 *             self._properties['support'] = float(value)
 *         except ValueError:
 *             raise TreeError('node support must be a float number')             # <<<<<<<<<<<<<<
 * 
 *     def _get_props(self):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 156, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_s_node_support_must_be_a_float_num) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_node_support_must_be_a_float_num);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 156, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 156, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "ete4/coretype/tree.pyx":153
 *         return self._properties.get('support')
 *     def _set_support(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties['support'] = float(value)
 *         except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "ete4/coretype/tree.pyx":152
 *     def _get_support(self):
 *         return self._properties.get('support')
 *     def _set_support(self, value):             # <<<<<<<<<<<<<<
 *         try:
 *             self._properties['support'] = float(value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_support", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":158
 *             raise TreeError('node support must be a float number')
 * 
 *     def _get_props(self):             # <<<<<<<<<<<<<<
 *         return self._properties
 *     def _set_props(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_13_get_props(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_13_get_props(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_props (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_get_props(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_get_props(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_props", 0);

  /* "ete4/coretype/tree.pyx":159
 * 
 *     def _get_props(self):
 *         return self._properties             # <<<<<<<<<<<<<<
 *     def _set_props(self, value):
 *         try:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_properties);
  __pyx_r = __pyx_v_self->_properties;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":158
 *             raise TreeError('node support must be a float number')
 * 
 *     def _get_props(self):             # <<<<<<<<<<<<<<
 *         return self._properties
 *     def _set_props(self, value):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":160
 *     def _get_props(self):
 *         return self._properties
 *     def _set_props(self, value):             # <<<<<<<<<<<<<<
 *         try:
 *             self._properties = dict(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_15_set_props(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_15_set_props(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_props (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_14_set_props(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_14_set_props(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_props", 0);

  /* "ete4/coretype/tree.pyx":161
 *         return self._properties
 *     def _set_props(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties = dict(value)
 *         except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":162
 *     def _set_props(self, value):
 *         try:
 *             self._properties = dict(value)             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             raise TreeError('node properties must be a dict')
 */
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->_properties);
      __Pyx_DECREF(__pyx_v_self->_properties);
      __pyx_v_self->_properties = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":161
 *         return self._properties
 *     def _set_props(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties = dict(value)
 *         except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":163
 *         try:
 *             self._properties = dict(value)
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             raise TreeError('node properties must be a dict')
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 163, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "ete4/coretype/tree.pyx":164
 *             self._properties = dict(value)
 *         except ValueError:
 *             raise TreeError('node properties must be a dict')             # <<<<<<<<<<<<<<
 * 
 *     def _get_up(self):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 164, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_s_node_properties_must_be_a_dict) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_node_properties_must_be_a_dict);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 164, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 164, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "ete4/coretype/tree.pyx":161
 *         return self._properties
 *     def _set_props(self, value):
 *         try:             # <<<<<<<<<<<<<<
 *             self._properties = dict(value)
 *         except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "ete4/coretype/tree.pyx":160
 *     def _get_props(self):
 *         return self._properties
 *     def _set_props(self, value):             # <<<<<<<<<<<<<<
 *         try:
 *             self._properties = dict(value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":166
 *             raise TreeError('node properties must be a dict')
 * 
 *     def _get_up(self):             # <<<<<<<<<<<<<<
 *         return self._up
 *     def _set_up(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17_get_up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17_get_up(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_up (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_get_up(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_get_up(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_up", 0);

  /* "ete4/coretype/tree.pyx":167
 * 
 *     def _get_up(self):
 *         return self._up             # <<<<<<<<<<<<<<
 *     def _set_up(self, value):
 *         if type(value) == type(self) or value is None:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_up);
  __pyx_r = __pyx_v_self->_up;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":166
 *             raise TreeError('node properties must be a dict')
 * 
 *     def _get_up(self):             # <<<<<<<<<<<<<<
 *         return self._up
 *     def _set_up(self, value):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":168
 *     def _get_up(self):
 *         return self._up
 *     def _set_up(self, value):             # <<<<<<<<<<<<<<
 *         if type(value) == type(self) or value is None:
 *             self._up = value
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_19_set_up(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_19_set_up(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_up (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18_set_up(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_18_set_up(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_up", 0);

  /* "ete4/coretype/tree.pyx":169
 *         return self._up
 *     def _set_up(self, value):
 *         if type(value) == type(self) or value is None:             # <<<<<<<<<<<<<<
 *             self._up = value
 *         else:
 */
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_value)), ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_value == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":170
 *     def _set_up(self, value):
 *         if type(value) == type(self) or value is None:
 *             self._up = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TreeError("bad node_up type")
 */
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    __Pyx_GOTREF(__pyx_v_self->_up);
    __Pyx_DECREF(__pyx_v_self->_up);
    __pyx_v_self->_up = __pyx_v_value;

    /* "ete4/coretype/tree.pyx":169
 *         return self._up
 *     def _set_up(self, value):
 *         if type(value) == type(self) or value is None:             # <<<<<<<<<<<<<<
 *             self._up = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":172
 *             self._up = value
 *         else:
 *             raise TreeError("bad node_up type")             # <<<<<<<<<<<<<<
 * 
 *     def _get_children(self):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_s_bad_node_up_type) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_bad_node_up_type);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 172, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":168
 *     def _get_up(self):
 *         return self._up
 *     def _set_up(self, value):             # <<<<<<<<<<<<<<
 *         if type(value) == type(self) or value is None:
 *             self._up = value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":174
 *             raise TreeError("bad node_up type")
 * 
 *     def _get_children(self):             # <<<<<<<<<<<<<<
 *         return self._children
 *     def _set_children(self, children):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_21_get_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_21_get_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_children (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_20_get_children(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_20_get_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_children", 0);

  /* "ete4/coretype/tree.pyx":175
 * 
 *     def _get_children(self):
 *         return self._children             # <<<<<<<<<<<<<<
 *     def _set_children(self, children):
 *         if not hasattr(children, '__iter__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_children);
  __pyx_r = __pyx_v_self->_children;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":174
 *             raise TreeError("bad node_up type")
 * 
 *     def _get_children(self):             # <<<<<<<<<<<<<<
 *         return self._children
 *     def _set_children(self, children):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":176
 *     def _get_children(self):
 *         return self._children
 *     def _set_children(self, children):             # <<<<<<<<<<<<<<
 *         if not hasattr(children, '__iter__'):
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_23_set_children(PyObject *__pyx_v_self, PyObject *__pyx_v_children); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_23_set_children(PyObject *__pyx_v_self, PyObject *__pyx_v_children) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_children (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_22_set_children(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_children));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_22_set_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_children) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_children", 0);

  /* "ete4/coretype/tree.pyx":177
 *         return self._children
 *     def _set_children(self, children):
 *         if not hasattr(children, '__iter__'):             # <<<<<<<<<<<<<<
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')
 *         self._children = []
 */
  __pyx_t_1 = __Pyx_HasAttr(__pyx_v_children, __pyx_n_s_iter); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "ete4/coretype/tree.pyx":178
 *     def _set_children(self, children):
 *         if not hasattr(children, '__iter__'):
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')             # <<<<<<<<<<<<<<
 *         self._children = []
 *         self.add_children(children)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Incorrect_children_type);
    __pyx_t_6 += 25;
    __Pyx_GIVEREF(__pyx_kp_u_Incorrect_children_type);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Incorrect_children_type);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_children)), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_Children_should_to_be_iterable);
    __pyx_t_6 += 32;
    __Pyx_GIVEREF(__pyx_kp_u_Children_should_to_be_iterable);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_Children_should_to_be_iterable);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 178, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":177
 *         return self._children
 *     def _set_children(self, children):
 *         if not hasattr(children, '__iter__'):             # <<<<<<<<<<<<<<
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')
 *         self._children = []
 */
  }

  /* "ete4/coretype/tree.pyx":179
 *         if not hasattr(children, '__iter__'):
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')
 *         self._children = []             # <<<<<<<<<<<<<<
 *         self.add_children(children)
 * 
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_children);
  __Pyx_DECREF(__pyx_v_self->_children);
  __pyx_v_self->_children = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":180
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')
 *         self._children = []
 *         self.add_children(children)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_v_children) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_children);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":176
 *     def _get_children(self):
 *         return self._children
 *     def _set_children(self, children):             # <<<<<<<<<<<<<<
 *         if not hasattr(children, '__iter__'):
 *             raise TreeError(f'Incorrect children type: {type(children)}. Children should to be iterable')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":183
 * 
 * 
 *     def _get_style(self):             # <<<<<<<<<<<<<<
 *         if self._img_style is None:
 *             self._set_style(None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_25_get_style(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_25_get_style(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_style (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_24_get_style(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_24_get_style(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_style", 0);

  /* "ete4/coretype/tree.pyx":184
 * 
 *     def _get_style(self):
 *         if self._img_style is None:             # <<<<<<<<<<<<<<
 *             self._set_style(None)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_img_style == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":185
 *     def _get_style(self):
 *         if self._img_style is None:
 *             self._set_style(None)             # <<<<<<<<<<<<<<
 * 
 *         return self._img_style
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_style); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, Py_None) : __Pyx_PyObject_CallOneArg(__pyx_t_4, Py_None);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":184
 * 
 *     def _get_style(self):
 *         if self._img_style is None:             # <<<<<<<<<<<<<<
 *             self._set_style(None)
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":187
 *             self._set_style(None)
 * 
 *         return self._img_style             # <<<<<<<<<<<<<<
 *     def _set_style(self, value):
 *         self.set_style(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_img_style);
  __pyx_r = __pyx_v_self->_img_style;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":183
 * 
 * 
 *     def _get_style(self):             # <<<<<<<<<<<<<<
 *         if self._img_style is None:
 *             self._set_style(None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_style", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":188
 * 
 *         return self._img_style
 *     def _set_style(self, value):             # <<<<<<<<<<<<<<
 *         self.set_style(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_27_set_style(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_27_set_style(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_style (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_26_set_style(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_26_set_style(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_style", 0);

  /* "ete4/coretype/tree.pyx":189
 *         return self._img_style
 *     def _set_style(self, value):
 *         self.set_style(value)             # <<<<<<<<<<<<<<
 * 
 *     def _get_initialized(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_style_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_value);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":188
 * 
 *         return self._img_style
 *     def _set_style(self, value):             # <<<<<<<<<<<<<<
 *         self.set_style(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_style", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":191
 *         self.set_style(value)
 * 
 *     def _get_initialized(self):             # <<<<<<<<<<<<<<
 *         return self._initialized == 1
 *     def _set_initialized(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_29_get_initialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_29_get_initialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_initialized (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_28_get_initialized(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_28_get_initialized(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_initialized", 0);

  /* "ete4/coretype/tree.pyx":192
 * 
 *     def _get_initialized(self):
 *         return self._initialized == 1             # <<<<<<<<<<<<<<
 *     def _set_initialized(self, value):
 *         if value:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->_initialized == 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":191
 *         self.set_style(value)
 * 
 *     def _get_initialized(self):             # <<<<<<<<<<<<<<
 *         return self._initialized == 1
 *     def _set_initialized(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_initialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":193
 *     def _get_initialized(self):
 *         return self._initialized == 1
 *     def _set_initialized(self, value):             # <<<<<<<<<<<<<<
 *         if value:
 *             self._initialized = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_31_set_initialized(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_31_set_initialized(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_initialized (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_30_set_initialized(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_30_set_initialized(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_initialized", 0);

  /* "ete4/coretype/tree.pyx":194
 *         return self._initialized == 1
 *     def _set_initialized(self, value):
 *         if value:             # <<<<<<<<<<<<<<
 *             self._initialized = 1
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 194, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":195
 *     def _set_initialized(self, value):
 *         if value:
 *             self._initialized = 1             # <<<<<<<<<<<<<<
 *         else:
 *             self._initialized = 0
 */
    __pyx_v_self->_initialized = 1;

    /* "ete4/coretype/tree.pyx":194
 *         return self._initialized == 1
 *     def _set_initialized(self, value):
 *         if value:             # <<<<<<<<<<<<<<
 *             self._initialized = 1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":197
 *             self._initialized = 1
 *         else:
 *             self._initialized = 0             # <<<<<<<<<<<<<<
 * 
 *     def _get_collapsed(self):
 */
  /*else*/ {
    __pyx_v_self->_initialized = 0;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":193
 *     def _get_initialized(self):
 *         return self._initialized == 1
 *     def _set_initialized(self, value):             # <<<<<<<<<<<<<<
 *         if value:
 *             self._initialized = 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_initialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":199
 *             self._initialized = 0
 * 
 *     def _get_collapsed(self):             # <<<<<<<<<<<<<<
 *         return self._collapsed == 1
 *     def _set_collapsed(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_33_get_collapsed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_33_get_collapsed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_collapsed (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_32_get_collapsed(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_32_get_collapsed(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_collapsed", 0);

  /* "ete4/coretype/tree.pyx":200
 * 
 *     def _get_collapsed(self):
 *         return self._collapsed == 1             # <<<<<<<<<<<<<<
 *     def _set_collapsed(self, value):
 *         if value:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->_collapsed == 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":199
 *             self._initialized = 0
 * 
 *     def _get_collapsed(self):             # <<<<<<<<<<<<<<
 *         return self._collapsed == 1
 *     def _set_collapsed(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":201
 *     def _get_collapsed(self):
 *         return self._collapsed == 1
 *     def _set_collapsed(self, value):             # <<<<<<<<<<<<<<
 *         if value:
 *             self._collapsed = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_35_set_collapsed(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_35_set_collapsed(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_collapsed (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_34_set_collapsed(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_34_set_collapsed(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_collapsed", 0);

  /* "ete4/coretype/tree.pyx":202
 *         return self._collapsed == 1
 *     def _set_collapsed(self, value):
 *         if value:             # <<<<<<<<<<<<<<
 *             self._collapsed = 1
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 202, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":203
 *     def _set_collapsed(self, value):
 *         if value:
 *             self._collapsed = 1             # <<<<<<<<<<<<<<
 *         else:
 *             self._collapsed = 0
 */
    __pyx_v_self->_collapsed = 1;

    /* "ete4/coretype/tree.pyx":202
 *         return self._collapsed == 1
 *     def _set_collapsed(self, value):
 *         if value:             # <<<<<<<<<<<<<<
 *             self._collapsed = 1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":205
 *             self._collapsed = 1
 *         else:
 *             self._collapsed = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_v_self->_collapsed = 0;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":201
 *     def _get_collapsed(self):
 *         return self._collapsed == 1
 *     def _set_collapsed(self, value):             # <<<<<<<<<<<<<<
 *         if value:
 *             self._collapsed = 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_collapsed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":227
 *     is_collapsed = property(fget=_get_collapsed, fset=_set_collapsed)
 * 
 *     def _set_face_areas(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, _FaceAreas):
 *             self._faces = value
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_37_set_face_areas(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_37_set_face_areas(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_face_areas (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_36_set_face_areas(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_36_set_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_face_areas", 0);

  /* "ete4/coretype/tree.pyx":228
 * 
 *     def _set_face_areas(self, value):
 *         if isinstance(value, _FaceAreas):             # <<<<<<<<<<<<<<
 *             self._faces = value
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_value, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "ete4/coretype/tree.pyx":229
 *     def _set_face_areas(self, value):
 *         if isinstance(value, _FaceAreas):
 *             self._faces = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 */
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    __Pyx_GOTREF(__pyx_v_self->_faces);
    __Pyx_DECREF(__pyx_v_self->_faces);
    __pyx_v_self->_faces = __pyx_v_value;

    /* "ete4/coretype/tree.pyx":228
 * 
 *     def _set_face_areas(self, value):
 *         if isinstance(value, _FaceAreas):             # <<<<<<<<<<<<<<
 *             self._faces = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":231
 *             self._faces = value
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))             # <<<<<<<<<<<<<<
 *     def _get_face_areas(self):
 *         if not hasattr(self, "_faces"):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s_is_not_a_valid_FaceAreas_inst, ((PyObject *)Py_TYPE(__pyx_v_value))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":227
 *     is_collapsed = property(fget=_get_collapsed, fset=_set_collapsed)
 * 
 *     def _set_face_areas(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, _FaceAreas):
 *             self._faces = value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set_face_areas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":232
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_face_areas(self):             # <<<<<<<<<<<<<<
 *         if not hasattr(self, "_faces"):
 *             self._faces = _FaceAreas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_39_get_face_areas(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_39_get_face_areas(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_face_areas (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_38_get_face_areas(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_38_get_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_face_areas", 0);

  /* "ete4/coretype/tree.pyx":233
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_face_areas(self):
 *         if not hasattr(self, "_faces"):             # <<<<<<<<<<<<<<
 *             self._faces = _FaceAreas()
 *         return self._faces
 */
  __pyx_t_1 = __Pyx_HasAttr(((PyObject *)__pyx_v_self), __pyx_n_s_faces); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":234
 *     def _get_face_areas(self):
 *         if not hasattr(self, "_faces"):
 *             self._faces = _FaceAreas()             # <<<<<<<<<<<<<<
 *         return self._faces
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_faces);
    __Pyx_DECREF(__pyx_v_self->_faces);
    __pyx_v_self->_faces = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":233
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_face_areas(self):
 *         if not hasattr(self, "_faces"):             # <<<<<<<<<<<<<<
 *             self._faces = _FaceAreas()
 *         return self._faces
 */
  }

  /* "ete4/coretype/tree.pyx":235
 *         if not hasattr(self, "_faces"):
 *             self._faces = _FaceAreas()
 *         return self._faces             # <<<<<<<<<<<<<<
 * 
 *     def _set__collapsed_face_areas(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_faces);
  __pyx_r = __pyx_v_self->_faces;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":232
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_face_areas(self):             # <<<<<<<<<<<<<<
 *         if not hasattr(self, "_faces"):
 *             self._faces = _FaceAreas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_face_areas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":237
 *         return self._faces
 * 
 *     def _set__collapsed_face_areas(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, _FaceAreas):
 *             self._collapsed_faces = value
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_41_set__collapsed_face_areas(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_41_set__collapsed_face_areas(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set__collapsed_face_areas (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_40_set__collapsed_face_areas(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_40_set__collapsed_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set__collapsed_face_areas", 0);

  /* "ete4/coretype/tree.pyx":238
 * 
 *     def _set__collapsed_face_areas(self, value):
 *         if isinstance(value, _FaceAreas):             # <<<<<<<<<<<<<<
 *             self._collapsed_faces = value
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_value, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_3)) {

    /* "ete4/coretype/tree.pyx":239
 *     def _set__collapsed_face_areas(self, value):
 *         if isinstance(value, _FaceAreas):
 *             self._collapsed_faces = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 */
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    __Pyx_GOTREF(__pyx_v_self->_collapsed_faces);
    __Pyx_DECREF(__pyx_v_self->_collapsed_faces);
    __pyx_v_self->_collapsed_faces = __pyx_v_value;

    /* "ete4/coretype/tree.pyx":238
 * 
 *     def _set__collapsed_face_areas(self, value):
 *         if isinstance(value, _FaceAreas):             # <<<<<<<<<<<<<<
 *             self._collapsed_faces = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":241
 *             self._collapsed_faces = value
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))             # <<<<<<<<<<<<<<
 *     def _get_collapsed_face_areas(self):
 *         if not hasattr(self, "_collapsed_faces"):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s_is_not_a_valid_FaceAreas_inst, ((PyObject *)Py_TYPE(__pyx_v_value))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 241, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":237
 *         return self._faces
 * 
 *     def _set__collapsed_face_areas(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, _FaceAreas):
 *             self._collapsed_faces = value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._set__collapsed_face_areas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":242
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_collapsed_face_areas(self):             # <<<<<<<<<<<<<<
 *         if not hasattr(self, "_collapsed_faces"):
 *             self._collapsed_faces = _FaceAreas()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_43_get_collapsed_face_areas(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_43_get_collapsed_face_areas(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_collapsed_face_areas (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_42_get_collapsed_face_areas(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_42_get_collapsed_face_areas(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_collapsed_face_areas", 0);

  /* "ete4/coretype/tree.pyx":243
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_collapsed_face_areas(self):
 *         if not hasattr(self, "_collapsed_faces"):             # <<<<<<<<<<<<<<
 *             self._collapsed_faces = _FaceAreas()
 *         return self._collapsed_faces
 */
  __pyx_t_1 = __Pyx_HasAttr(((PyObject *)__pyx_v_self), __pyx_n_s_collapsed_faces); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":244
 *     def _get_collapsed_face_areas(self):
 *         if not hasattr(self, "_collapsed_faces"):
 *             self._collapsed_faces = _FaceAreas()             # <<<<<<<<<<<<<<
 *         return self._collapsed_faces
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_collapsed_faces);
    __Pyx_DECREF(__pyx_v_self->_collapsed_faces);
    __pyx_v_self->_collapsed_faces = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":243
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_collapsed_face_areas(self):
 *         if not hasattr(self, "_collapsed_faces"):             # <<<<<<<<<<<<<<
 *             self._collapsed_faces = _FaceAreas()
 *         return self._collapsed_faces
 */
  }

  /* "ete4/coretype/tree.pyx":245
 *         if not hasattr(self, "_collapsed_faces"):
 *             self._collapsed_faces = _FaceAreas()
 *         return self._collapsed_faces             # <<<<<<<<<<<<<<
 * 
 *     faces = property(fget=_get_face_areas, \
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_collapsed_faces);
  __pyx_r = __pyx_v_self->_collapsed_faces;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":242
 *         else:
 *             raise ValueError("[%s] is not a valid FaceAreas instance" %type(value))
 *     def _get_collapsed_face_areas(self):             # <<<<<<<<<<<<<<
 *         if not hasattr(self, "_collapsed_faces"):
 *             self._collapsed_faces = _FaceAreas()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_collapsed_face_areas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":252
 *                          fset=_set__collapsed_face_areas)
 * 
 *     def __init__(self, newick=None, format=0, dist=None, support=None,             # <<<<<<<<<<<<<<
 *                  name=None, quoted_node_names=False):
 *         self._children = []
 */

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_45__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_45__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_newick = 0;
  CYTHON_UNUSED PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_dist = 0;
  PyObject *__pyx_v_support = 0;
  PyObject *__pyx_v_name = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quoted_node_names = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newick,&__pyx_n_s_format,&__pyx_n_s_dist,&__pyx_n_s_support,&__pyx_n_s_name,&__pyx_n_s_quoted_node_names,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);

    /* "ete4/coretype/tree.pyx":253
 * 
 *     def __init__(self, newick=None, format=0, dist=None, support=None,
 *                  name=None, quoted_node_names=False):             # <<<<<<<<<<<<<<
 *         self._children = []
 *         self._up = None
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_newick);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dist);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_support);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quoted_node_names);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_newick = values[0];
    __pyx_v_format = values[1];
    __pyx_v_dist = values[2];
    __pyx_v_support = values[3];
    __pyx_v_name = values[4];
    __pyx_v_quoted_node_names = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_44__init__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_newick, __pyx_v_format, __pyx_v_dist, __pyx_v_support, __pyx_v_name, __pyx_v_quoted_node_names);

  /* "ete4/coretype/tree.pyx":252
 *                          fset=_set__collapsed_face_areas)
 * 
 *     def __init__(self, newick=None, format=0, dist=None, support=None,             # <<<<<<<<<<<<<<
 *                  name=None, quoted_node_names=False):
 *         self._children = []
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_44__init__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_newick, CYTHON_UNUSED PyObject *__pyx_v_format, PyObject *__pyx_v_dist, PyObject *__pyx_v_support, PyObject *__pyx_v_name, CYTHON_UNUSED PyObject *__pyx_v_quoted_node_names) {
  PyObject *__pyx_v_read_newick = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_ctuple_double__and_double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "ete4/coretype/tree.pyx":254
 *     def __init__(self, newick=None, format=0, dist=None, support=None,
 *                  name=None, quoted_node_names=False):
 *         self._children = []             # <<<<<<<<<<<<<<
 *         self._up = None
 *         self._properties = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_children);
  __Pyx_DECREF(__pyx_v_self->_children);
  __pyx_v_self->_children = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":255
 *                  name=None, quoted_node_names=False):
 *         self._children = []
 *         self._up = None             # <<<<<<<<<<<<<<
 *         self._properties = {}
 *         self._img_style = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_up);
  __Pyx_DECREF(__pyx_v_self->_up);
  __pyx_v_self->_up = Py_None;

  /* "ete4/coretype/tree.pyx":256
 *         self._children = []
 *         self._up = None
 *         self._properties = {}             # <<<<<<<<<<<<<<
 *         self._img_style = None
 *         self._faces = _FaceAreas()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_properties);
  __Pyx_DECREF(__pyx_v_self->_properties);
  __pyx_v_self->_properties = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":257
 *         self._up = None
 *         self._properties = {}
 *         self._img_style = None             # <<<<<<<<<<<<<<
 *         self._faces = _FaceAreas()
 *         self._collapsed_faces = _FaceAreas()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_img_style);
  __Pyx_DECREF(__pyx_v_self->_img_style);
  __pyx_v_self->_img_style = Py_None;

  /* "ete4/coretype/tree.pyx":258
 *         self._properties = {}
 *         self._img_style = None
 *         self._faces = _FaceAreas()             # <<<<<<<<<<<<<<
 *         self._collapsed_faces = _FaceAreas()
 *         self._initialized = 0 # Layout fns have not been run on node
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_faces);
  __Pyx_DECREF(__pyx_v_self->_faces);
  __pyx_v_self->_faces = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":259
 *         self._img_style = None
 *         self._faces = _FaceAreas()
 *         self._collapsed_faces = _FaceAreas()             # <<<<<<<<<<<<<<
 *         self._initialized = 0 # Layout fns have not been run on node
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_collapsed_faces);
  __Pyx_DECREF(__pyx_v_self->_collapsed_faces);
  __pyx_v_self->_collapsed_faces = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":260
 *         self._faces = _FaceAreas()
 *         self._collapsed_faces = _FaceAreas()
 *         self._initialized = 0 # Layout fns have not been run on node             # <<<<<<<<<<<<<<
 * 
 *         self.size = (0, 0)
 */
  __pyx_v_self->_initialized = 0;

  /* "ete4/coretype/tree.pyx":262
 *         self._initialized = 0 # Layout fns have not been run on node
 * 
 *         self.size = (0, 0)             # <<<<<<<<<<<<<<
 *         self.d1 = 0.0
 * 
 */
  __pyx_t_4.f0 = 0.0;
  __pyx_t_4.f1 = 0.0;
  __pyx_v_self->size = __pyx_t_4;

  /* "ete4/coretype/tree.pyx":263
 * 
 *         self.size = (0, 0)
 *         self.d1 = 0.0             # <<<<<<<<<<<<<<
 * 
 *         # Initialize tree
 */
  __pyx_v_self->d1 = 0.0;

  /* "ete4/coretype/tree.pyx":266
 * 
 *         # Initialize tree
 *         if newick is not None:             # <<<<<<<<<<<<<<
 *             from ete4.parser.newick import read_newick
 *             read_newick(newick, self)
 */
  __pyx_t_5 = (__pyx_v_newick != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "ete4/coretype/tree.pyx":267
 *         # Initialize tree
 *         if newick is not None:
 *             from ete4.parser.newick import read_newick             # <<<<<<<<<<<<<<
 *             read_newick(newick, self)
 * 
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_read_newick);
    __Pyx_GIVEREF(__pyx_n_s_read_newick);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_read_newick);
    __pyx_t_2 = __Pyx_Import(__pyx_n_s_ete4_parser_newick, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_read_newick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_read_newick = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":268
 *         if newick is not None:
 *             from ete4.parser.newick import read_newick
 *             read_newick(newick, self)             # <<<<<<<<<<<<<<
 * 
 *         self.name = name if name is not None else\
 */
    __Pyx_INCREF(__pyx_v_read_newick);
    __pyx_t_1 = __pyx_v_read_newick; __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_newick, ((PyObject *)__pyx_v_self)};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_newick, ((PyObject *)__pyx_v_self)};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_newick);
      __Pyx_GIVEREF(__pyx_v_newick);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_newick);
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)__pyx_v_self));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":266
 * 
 *         # Initialize tree
 *         if newick is not None:             # <<<<<<<<<<<<<<
 *             from ete4.parser.newick import read_newick
 *             read_newick(newick, self)
 */
  }

  /* "ete4/coretype/tree.pyx":270
 *             read_newick(newick, self)
 * 
 *         self.name = name if name is not None else\             # <<<<<<<<<<<<<<
 *                 self.name if self.name is not None else DEFAULT_NAME
 *         self.dist = dist if dist is not None else\
 */
  __pyx_t_6 = (__pyx_v_name != Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_v_name);
    __pyx_t_2 = __pyx_v_name;
  } else {

    /* "ete4/coretype/tree.pyx":271
 * 
 *         self.name = name if name is not None else\
 *                 self.name if self.name is not None else DEFAULT_NAME             # <<<<<<<<<<<<<<
 *         self.dist = dist if dist is not None else\
 *                 self.dist if self.dist is not None else DEFAULT_DIST
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = (__pyx_t_8 != Py_None);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if ((__pyx_t_5 != 0)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
    } else {
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_DEFAULT_NAME); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
    }
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }

  /* "ete4/coretype/tree.pyx":270
 *             read_newick(newick, self)
 * 
 *         self.name = name if name is not None else\             # <<<<<<<<<<<<<<
 *                 self.name if self.name is not None else DEFAULT_NAME
 *         self.dist = dist if dist is not None else\
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name, __pyx_t_2) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":272
 *         self.name = name if name is not None else\
 *                 self.name if self.name is not None else DEFAULT_NAME
 *         self.dist = dist if dist is not None else\             # <<<<<<<<<<<<<<
 *                 self.dist if self.dist is not None else DEFAULT_DIST
 *         self.support = support if support is not None else\
 */
  __pyx_t_6 = (__pyx_v_dist != Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_v_dist);
    __pyx_t_2 = __pyx_v_dist;
  } else {

    /* "ete4/coretype/tree.pyx":273
 *                 self.name if self.name is not None else DEFAULT_NAME
 *         self.dist = dist if dist is not None else\
 *                 self.dist if self.dist is not None else DEFAULT_DIST             # <<<<<<<<<<<<<<
 *         self.support = support if support is not None else\
 *                 self.support if self.support is not None else DEFAULT_SUPPORT
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = (__pyx_t_8 != Py_None);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if ((__pyx_t_5 != 0)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
    } else {
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_DEFAULT_DIST); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
    }
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }

  /* "ete4/coretype/tree.pyx":272
 *         self.name = name if name is not None else\
 *                 self.name if self.name is not None else DEFAULT_NAME
 *         self.dist = dist if dist is not None else\             # <<<<<<<<<<<<<<
 *                 self.dist if self.dist is not None else DEFAULT_DIST
 *         self.support = support if support is not None else\
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dist, __pyx_t_2) < 0) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":274
 *         self.dist = dist if dist is not None else\
 *                 self.dist if self.dist is not None else DEFAULT_DIST
 *         self.support = support if support is not None else\             # <<<<<<<<<<<<<<
 *                 self.support if self.support is not None else DEFAULT_SUPPORT
 * 
 */
  __pyx_t_6 = (__pyx_v_support != Py_None);
  if ((__pyx_t_6 != 0)) {
    __Pyx_INCREF(__pyx_v_support);
    __pyx_t_2 = __pyx_v_support;
  } else {

    /* "ete4/coretype/tree.pyx":275
 *                 self.dist if self.dist is not None else DEFAULT_DIST
 *         self.support = support if support is not None else\
 *                 self.support if self.support is not None else DEFAULT_SUPPORT             # <<<<<<<<<<<<<<
 * 
 *     def __nonzero__(self):
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_support); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = (__pyx_t_8 != Py_None);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if ((__pyx_t_5 != 0)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_support); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
    } else {
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_DEFAULT_SUPPORT); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
    }
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
  }

  /* "ete4/coretype/tree.pyx":274
 *         self.dist = dist if dist is not None else\
 *                 self.dist if self.dist is not None else DEFAULT_DIST
 *         self.support = support if support is not None else\             # <<<<<<<<<<<<<<
 *                 self.support if self.support is not None else DEFAULT_SUPPORT
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_support, __pyx_t_2) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":252
 *                          fset=_set__collapsed_face_areas)
 * 
 *     def __init__(self, newick=None, format=0, dist=None, support=None,             # <<<<<<<<<<<<<<
 *                  name=None, quoted_node_names=False):
 *         self._children = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_read_newick);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":277
 *                 self.support if self.support is not None else DEFAULT_SUPPORT
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_47__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_47__nonzero__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_46__nonzero__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_46__nonzero__(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__", 0);

  /* "ete4/coretype/tree.pyx":278
 * 
 *     def __nonzero__(self):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(self):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":277
 *                 self.support if self.support is not None else DEFAULT_SUPPORT
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":280
 *         return True
 * 
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Python3's equivalent of __nonzero__
 */

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_49__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_49__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_48__bool__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_48__bool__(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "ete4/coretype/tree.pyx":286
 *         __len__ in python3
 *         """
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":280
 *         return True
 * 
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Python3's equivalent of __nonzero__
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":288
 *         return True
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Tree node '%s' (%s)" %(self.name, hex(self.__hash__()))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_51__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_51__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_50__repr__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_50__repr__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "ete4/coretype/tree.pyx":289
 * 
 *     def __repr__(self):
 *         return "Tree node '%s' (%s)" %(self.name, hex(self.__hash__()))             # <<<<<<<<<<<<<<
 * 
 *     def __and__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Tree_node_s_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":288
 *         return True
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Tree node '%s' (%s)" %(self.name, hex(self.__hash__()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":291
 *         return "Tree node '%s' (%s)" %(self.name, hex(self.__hash__()))
 * 
 *     def __and__(self, value):             # <<<<<<<<<<<<<<
 *         """ This allows to execute tree&'A' to obtain the descendant node
 *         whose name is A"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_53__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_52__and__[] = " This allows to execute tree&'A' to obtain the descendant node\n        whose name is A";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_52__and__;
#endif
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_53__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_52__and__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_52__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_first_match = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 0);
  __Pyx_INCREF(__pyx_v_value);

  /* "ete4/coretype/tree.pyx":294
 *         """ This allows to execute tree&'A' to obtain the descendant node
 *         whose name is A"""
 *         value=str(value)             # <<<<<<<<<<<<<<
 *         try:
 *             first_match = next(self.iter_search_nodes(name=value))
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":295
 *         whose name is A"""
 *         value=str(value)
 *         try:             # <<<<<<<<<<<<<<
 *             first_match = next(self.iter_search_nodes(name=value))
 *             return first_match
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":296
 *         value=str(value)
 *         try:
 *             first_match = next(self.iter_search_nodes(name=value))             # <<<<<<<<<<<<<<
 *             return first_match
 *         except StopIteration:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_iter_search_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_name, __pyx_v_value) < 0) __PYX_ERR(0, 296, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 296, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyIter_Next(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_first_match = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":297
 *         try:
 *             first_match = next(self.iter_search_nodes(name=value))
 *             return first_match             # <<<<<<<<<<<<<<
 *         except StopIteration:
 *             raise TreeError("Node not found")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_first_match);
      __pyx_r = __pyx_v_first_match;
      goto __pyx_L7_try_return;

      /* "ete4/coretype/tree.pyx":295
 *         whose name is A"""
 *         value=str(value)
 *         try:             # <<<<<<<<<<<<<<
 *             first_match = next(self.iter_search_nodes(name=value))
 *             return first_match
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":298
 *             first_match = next(self.iter_search_nodes(name=value))
 *             return first_match
 *         except StopIteration:             # <<<<<<<<<<<<<<
 *             raise TreeError("Node not found")
 * 
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(0, 298, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_1);

      /* "ete4/coretype/tree.pyx":299
 *             return first_match
 *         except StopIteration:
 *             raise TreeError("Node not found")             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, value):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 299, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_s_Node_not_found) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_Node_not_found);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 299, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 299, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "ete4/coretype/tree.pyx":295
 *         whose name is A"""
 *         value=str(value)
 *         try:             # <<<<<<<<<<<<<<
 *             first_match = next(self.iter_search_nodes(name=value))
 *             return first_match
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":291
 *         return "Tree node '%s' (%s)" %(self.name, hex(self.__hash__()))
 * 
 *     def __and__(self, value):             # <<<<<<<<<<<<<<
 *         """ This allows to execute tree&'A' to obtain the descendant node
 *         whose name is A"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_first_match);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":301
 *             raise TreeError("Node not found")
 * 
 *     def __add__(self, value):             # <<<<<<<<<<<<<<
 *         """ This allows to sum two trees."""
 *         # Should a make the sum with two copies of the original trees?
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_55__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_54__add__[] = " This allows to sum two trees.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_54__add__;
#endif
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_55__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_54__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_54__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_new_root = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "ete4/coretype/tree.pyx":304
 *         """ This allows to sum two trees."""
 *         # Should a make the sum with two copies of the original trees?
 *         if type(value) == self.__class__:             # <<<<<<<<<<<<<<
 *             new_root = self.__class__()
 *             new_root.add_child(self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_value)), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_3)) {

    /* "ete4/coretype/tree.pyx":305
 *         # Should a make the sum with two copies of the original trees?
 *         if type(value) == self.__class__:
 *             new_root = self.__class__()             # <<<<<<<<<<<<<<
 *             new_root.add_child(self)
 *             new_root.add_child(value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_new_root = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":306
 *         if type(value) == self.__class__:
 *             new_root = self.__class__()
 *             new_root.add_child(self)             # <<<<<<<<<<<<<<
 *             new_root.add_child(value)
 *             return new_root
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_root, __pyx_n_s_add_child); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_self) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_self);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":307
 *             new_root = self.__class__()
 *             new_root.add_child(self)
 *             new_root.add_child(value)             # <<<<<<<<<<<<<<
 *             return new_root
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_root, __pyx_n_s_add_child); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_value);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":308
 *             new_root.add_child(self)
 *             new_root.add_child(value)
 *             return new_root             # <<<<<<<<<<<<<<
 *         else:
 *             raise TreeError("Invalid node type")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_new_root);
    __pyx_r = __pyx_v_new_root;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":304
 *         """ This allows to sum two trees."""
 *         # Should a make the sum with two copies of the original trees?
 *         if type(value) == self.__class__:             # <<<<<<<<<<<<<<
 *             new_root = self.__class__()
 *             new_root.add_child(self)
 */
  }

  /* "ete4/coretype/tree.pyx":310
 *             return new_root
 *         else:
 *             raise TreeError("Invalid node type")             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_kp_s_Invalid_node_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_Invalid_node_type);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 310, __pyx_L1_error)
  }

  /* "ete4/coretype/tree.pyx":301
 *             raise TreeError("Node not found")
 * 
 *     def __add__(self, value):             # <<<<<<<<<<<<<<
 *         """ This allows to sum two trees."""
 *         # Should a make the sum with two copies of the original trees?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_root);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":312
 *             raise TreeError("Invalid node type")
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """ Print tree in newick format. """
 *         return self.get_ascii(compact=DEFAULT_COMPACT, \
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_57__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_56__str__[] = " Print tree in newick format. ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_56__str__;
#endif
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_57__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_56__str__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_56__str__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "ete4/coretype/tree.pyx":314
 *     def __str__(self):
 *         """ Print tree in newick format. """
 *         return self.get_ascii(compact=DEFAULT_COMPACT, \             # <<<<<<<<<<<<<<
 *                                 show_internal=DEFAULT_SHOWINTERNAL)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_ascii); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DEFAULT_COMPACT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_compact, __pyx_t_3) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":315
 *         """ Print tree in newick format. """
 *         return self.get_ascii(compact=DEFAULT_COMPACT, \
 *                                 show_internal=DEFAULT_SHOWINTERNAL)             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, item):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DEFAULT_SHOWINTERNAL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_show_internal, __pyx_t_3) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":314
 *     def __str__(self):
 *         """ Print tree in newick format. """
 *         return self.get_ascii(compact=DEFAULT_COMPACT, \             # <<<<<<<<<<<<<<
 *                                 show_internal=DEFAULT_SHOWINTERNAL)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":312
 *             raise TreeError("Invalid node type")
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """ Print tree in newick format. """
 *         return self.get_ascii(compact=DEFAULT_COMPACT, \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":317
 *                                 show_internal=DEFAULT_SHOWINTERNAL)
 * 
 *     def __contains__(self, item):             # <<<<<<<<<<<<<<
 *         """ Check if item belongs to this node. The 'item' argument must
 *         be a node instance or its associated name."""
 */

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_59__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_58__contains__[] = " Check if item belongs to this node. The 'item' argument must\n        be a node instance or its associated name.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_58__contains__;
#endif
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_59__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_58__contains__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_58__contains__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_v_n = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "ete4/coretype/tree.pyx":320
 *         """ Check if item belongs to this node. The 'item' argument must
 *         be a node instance or its associated name."""
 *         if isinstance(item, self.__class__):             # <<<<<<<<<<<<<<
 *             return item in set(self.get_descendants())
 *         elif type(item)==str:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_item, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":321
 *         be a node instance or its associated name."""
 *         if isinstance(item, self.__class__):
 *             return item in set(self.get_descendants())             # <<<<<<<<<<<<<<
 *         elif type(item)==str:
 *             return item in set([n.name for n in self.traverse()])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_descendants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__Pyx_PySet_ContainsTF(__pyx_v_item, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":320
 *         """ Check if item belongs to this node. The 'item' argument must
 *         be a node instance or its associated name."""
 *         if isinstance(item, self.__class__):             # <<<<<<<<<<<<<<
 *             return item in set(self.get_descendants())
 *         elif type(item)==str:
 */
  }

  /* "ete4/coretype/tree.pyx":322
 *         if isinstance(item, self.__class__):
 *             return item in set(self.get_descendants())
 *         elif type(item)==str:             # <<<<<<<<<<<<<<
 *             return item in set([n.name for n in self.traverse()])
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_item)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":323
 *             return item in set(self.get_descendants())
 *         elif type(item)==str:
 *             return item in set([n.name for n in self.traverse()])             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 323, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_8(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 323, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = (__Pyx_PySet_ContainsTF(__pyx_v_item, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":322
 *         if isinstance(item, self.__class__):
 *             return item in set(self.get_descendants())
 *         elif type(item)==str:             # <<<<<<<<<<<<<<
 *             return item in set([n.name for n in self.traverse()])
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":317
 *                                 show_internal=DEFAULT_SHOWINTERNAL)
 * 
 *     def __contains__(self, item):             # <<<<<<<<<<<<<<
 *         """ Check if item belongs to this node. The 'item' argument must
 *         be a node instance or its associated name."""
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":325
 *             return item in set([n.name for n in self.traverse()])
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """Node len returns number of children."""
 *         return len(self.get_leaves())
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_4ete4_8coretype_4tree_8TreeNode_61__len__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_60__len__[] = "Node len returns number of children.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_60__len__;
#endif
static Py_ssize_t __pyx_pw_4ete4_8coretype_4tree_8TreeNode_61__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_60__len__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_4ete4_8coretype_4tree_8TreeNode_60__len__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "ete4/coretype/tree.pyx":327
 *     def __len__(self):
 *         """Node len returns number of children."""
 *         return len(self.get_leaves())             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_leaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":325
 *             return item in set([n.name for n in self.traverse()])
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """Node len returns number of children."""
 *         return len(self.get_leaves())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":329
 *         return len(self.get_leaves())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """ Iterator over leaf nodes"""
 *         return self.iter_leaves()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_63__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_62__iter__[] = " Iterator over leaf nodes";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_62__iter__;
#endif
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_63__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_62__iter__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_62__iter__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "ete4/coretype/tree.pyx":331
 *     def __iter__(self):
 *         """ Iterator over leaf nodes"""
 *         return self.iter_leaves()             # <<<<<<<<<<<<<<
 * 
 *     def add_prop(self, name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":329
 *         return len(self.get_leaves())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """ Iterator over leaf nodes"""
 *         return self.iter_leaves()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":333
 *         return self.iter_leaves()
 * 
 *     def add_prop(self, name, value):             # <<<<<<<<<<<<<<
 *         """ Add or update node's property """
 *         if name != None and value != None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_65add_prop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_64add_prop[] = " Add or update node's property ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_65add_prop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_prop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_prop", 1, 2, 2, 1); __PYX_ERR(0, 333, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_prop") < 0)) __PYX_ERR(0, 333, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_prop", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_64add_prop(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_64add_prop(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_prop", 0);

  /* "ete4/coretype/tree.pyx":335
 *     def add_prop(self, name, value):
 *         """ Add or update node's property """
 *         if name != None and value != None:             # <<<<<<<<<<<<<<
 *             self.props[name] = value
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_name, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":336
 *         """ Add or update node's property """
 *         if name != None and value != None:
 *             self.props[name] = value             # <<<<<<<<<<<<<<
 * 
 *     def add_props(self, **props):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_props); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_name, __pyx_v_value) < 0)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":335
 *     def add_prop(self, name, value):
 *         """ Add or update node's property """
 *         if name != None and value != None:             # <<<<<<<<<<<<<<
 *             self.props[name] = value
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":333
 *         return self.iter_leaves()
 * 
 *     def add_prop(self, name, value):             # <<<<<<<<<<<<<<
 *         """ Add or update node's property """
 *         if name != None and value != None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":338
 *             self.props[name] = value
 * 
 *     def add_props(self, **props):             # <<<<<<<<<<<<<<
 *         """Add or update several properties."""
 *         for name, value in six.iteritems(props):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_67add_props(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_66add_props[] = "Add or update several properties.";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_67add_props(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_props = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_props (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("add_props", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_props", 1))) return NULL;
  __pyx_v_props = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_props)) return NULL;
  __Pyx_GOTREF(__pyx_v_props);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_66add_props(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_props);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_props);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_66add_props(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_props) {
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_props", 0);

  /* "ete4/coretype/tree.pyx":340
 *     def add_props(self, **props):
 *         """Add or update several properties."""
 *         for name, value in six.iteritems(props):             # <<<<<<<<<<<<<<
 *             self.add_prop(name, value)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_six); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_props) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_props);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 340, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 340, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 340, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 340, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 340, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 340, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":341
 *         """Add or update several properties."""
 *         for name, value in six.iteritems(props):
 *             self.add_prop(name, value)             # <<<<<<<<<<<<<<
 * 
 *     def del_prop(self, name):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_prop); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, __pyx_v_value};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_v_name);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_v_value);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":340
 *     def add_props(self, **props):
 *         """Add or update several properties."""
 *         for name, value in six.iteritems(props):             # <<<<<<<<<<<<<<
 *             self.add_prop(name, value)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":338
 *             self.props[name] = value
 * 
 *     def add_props(self, **props):             # <<<<<<<<<<<<<<
 *         """Add or update several properties."""
 *         for name, value in six.iteritems(props):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_props", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":343
 *             self.add_prop(name, value)
 * 
 *     def del_prop(self, name):             # <<<<<<<<<<<<<<
 *         """Permanently deletes a node's property."""
 *         self.props.pop(name, None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_69del_prop(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_68del_prop[] = "Permanently deletes a node's property.";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_69del_prop(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("del_prop (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_68del_prop(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_68del_prop(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("del_prop", 0);

  /* "ete4/coretype/tree.pyx":345
 *     def del_prop(self, name):
 *         """Permanently deletes a node's property."""
 *         self.props.pop(name, None)             # <<<<<<<<<<<<<<
 * 
 *     # DEPRECATED #
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_props); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, Py_None};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, Py_None};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_name);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, Py_None);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":343
 *             self.add_prop(name, value)
 * 
 *     def del_prop(self, name):             # <<<<<<<<<<<<<<
 *         """Permanently deletes a node's property."""
 *         self.props.pop(name, None)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.del_prop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":348
 * 
 *     # DEPRECATED #
 *     def add_feature(self, pr_name, pr_value):             # <<<<<<<<<<<<<<
 *         """
 *         Add or update a node's feature.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_71add_feature(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_70add_feature[] = "\n        Add or update a node's feature.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_71add_feature(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pr_name = 0;
  PyObject *__pyx_v_pr_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_feature (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pr_name,&__pyx_n_s_pr_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pr_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pr_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_feature", 1, 2, 2, 1); __PYX_ERR(0, 348, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_feature") < 0)) __PYX_ERR(0, 348, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pr_name = values[0];
    __pyx_v_pr_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_feature", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 348, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_70add_feature(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_pr_name, __pyx_v_pr_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_70add_feature(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_pr_name, PyObject *__pyx_v_pr_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_feature", 0);

  /* "ete4/coretype/tree.pyx":352
 *         Add or update a node's feature.
 *         """
 *         print("\nWARNING! add_feature is DEPRECATED use add_prop instead\n")             # <<<<<<<<<<<<<<
 *         self.add_prop(pr_name, pr_value)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":353
 *         """
 *         print("\nWARNING! add_feature is DEPRECATED use add_prop instead\n")
 *         self.add_prop(pr_name, pr_value)             # <<<<<<<<<<<<<<
 * 
 *     def add_features(self, **features):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_prop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pr_name, __pyx_v_pr_value};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pr_name, __pyx_v_pr_value};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pr_name);
    __Pyx_GIVEREF(__pyx_v_pr_name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_pr_name);
    __Pyx_INCREF(__pyx_v_pr_value);
    __Pyx_GIVEREF(__pyx_v_pr_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_pr_value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":348
 * 
 *     # DEPRECATED #
 *     def add_feature(self, pr_name, pr_value):             # <<<<<<<<<<<<<<
 *         """
 *         Add or update a node's feature.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":355
 *         self.add_prop(pr_name, pr_value)
 * 
 *     def add_features(self, **features):             # <<<<<<<<<<<<<<
 *         """
 *         Add or update several features. """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_73add_features(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_72add_features[] = "\n        Add or update several features. ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_73add_features(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_features = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_features (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("add_features", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_features", 1))) return NULL;
  __pyx_v_features = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_features)) return NULL;
  __Pyx_GOTREF(__pyx_v_features);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_72add_features(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_features);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_features);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_72add_features(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_features) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_features", 0);

  /* "ete4/coretype/tree.pyx":358
 *         """
 *         Add or update several features. """
 *         print("\nWARNING! add_features is DEPRECATED use add_props instead\n")             # <<<<<<<<<<<<<<
 *         self.add_props(**features)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":359
 *         Add or update several features. """
 *         print("\nWARNING! add_features is DEPRECATED use add_props instead\n")
 *         self.add_props(**features)             # <<<<<<<<<<<<<<
 * 
 *     def del_feature(self, pr_name):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_Copy(__pyx_v_features); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":355
 *         self.add_prop(pr_name, pr_value)
 * 
 *     def add_features(self, **features):             # <<<<<<<<<<<<<<
 *         """
 *         Add or update several features. """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":361
 *         self.add_props(**features)
 * 
 *     def del_feature(self, pr_name):             # <<<<<<<<<<<<<<
 *         """
 *         Permanently deletes a node's feature.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_75del_feature(PyObject *__pyx_v_self, PyObject *__pyx_v_pr_name); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_74del_feature[] = "\n        Permanently deletes a node's feature.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_75del_feature(PyObject *__pyx_v_self, PyObject *__pyx_v_pr_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("del_feature (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_74del_feature(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_pr_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_74del_feature(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_pr_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("del_feature", 0);

  /* "ete4/coretype/tree.pyx":365
 *         Permanently deletes a node's feature.
 *         """
 *         print("\nWARNING! del_prop is DEPRECATED use del_prop instead\n")             # <<<<<<<<<<<<<<
 *         self.del_prop(pr_name)
 *     # DEPRECATED #
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":366
 *         """
 *         print("\nWARNING! del_prop is DEPRECATED use del_prop instead\n")
 *         self.del_prop(pr_name)             # <<<<<<<<<<<<<<
 *     # DEPRECATED #
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_del_prop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_pr_name) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_pr_name);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":361
 *         self.add_props(**features)
 * 
 *     def del_feature(self, pr_name):             # <<<<<<<<<<<<<<
 *         """
 *         Permanently deletes a node's feature.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.del_feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":370
 * 
 *     # Topology management
 *     def add_child(self, child=None, name=None, dist=None, support=None):             # <<<<<<<<<<<<<<
 *         """
 *         Adds a new child to this node. If child node is not suplied
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_77add_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_76add_child[] = "\n        Adds a new child to this node. If child node is not suplied\n        as an argument, a new node instance will be created.\n\n        :argument None child: the node instance to be added as a child.\n        :argument None name: the name that will be given to the child.\n        :argument None dist: the distance from the node to the child.\n        :argument None support: the support value of child partition.\n\n        :returns: The child node instance\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_77add_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_child = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_dist = 0;
  PyObject *__pyx_v_support = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_name,&__pyx_n_s_dist,&__pyx_n_s_support,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dist);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_support);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_child") < 0)) __PYX_ERR(0, 370, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = values[0];
    __pyx_v_name = values[1];
    __pyx_v_dist = values[2];
    __pyx_v_support = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_child", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 370, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_76add_child(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_child, __pyx_v_name, __pyx_v_dist, __pyx_v_support);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_76add_child(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_child, PyObject *__pyx_v_name, PyObject *__pyx_v_dist, PyObject *__pyx_v_support) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_child", 0);
  __Pyx_INCREF(__pyx_v_child);

  /* "ete4/coretype/tree.pyx":383
 * 
 *         """
 *         if child is None:             # <<<<<<<<<<<<<<
 *             child = self.__class__()
 * 
 */
  __pyx_t_1 = (__pyx_v_child == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":384
 *         """
 *         if child is None:
 *             child = self.__class__()             # <<<<<<<<<<<<<<
 * 
 *         if name is not None:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_child, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":383
 * 
 *         """
 *         if child is None:             # <<<<<<<<<<<<<<
 *             child = self.__class__()
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":386
 *             child = self.__class__()
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             child.name = name
 *         if dist is not None:
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":387
 * 
 *         if name is not None:
 *             child.name = name             # <<<<<<<<<<<<<<
 *         if dist is not None:
 *             child.dist = dist
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_child, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 387, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":386
 *             child = self.__class__()
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             child.name = name
 *         if dist is not None:
 */
  }

  /* "ete4/coretype/tree.pyx":388
 *         if name is not None:
 *             child.name = name
 *         if dist is not None:             # <<<<<<<<<<<<<<
 *             child.dist = dist
 *         if support is not None:
 */
  __pyx_t_1 = (__pyx_v_dist != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":389
 *             child.name = name
 *         if dist is not None:
 *             child.dist = dist             # <<<<<<<<<<<<<<
 *         if support is not None:
 *             child.support = support
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_child, __pyx_n_s_dist, __pyx_v_dist) < 0) __PYX_ERR(0, 389, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":388
 *         if name is not None:
 *             child.name = name
 *         if dist is not None:             # <<<<<<<<<<<<<<
 *             child.dist = dist
 *         if support is not None:
 */
  }

  /* "ete4/coretype/tree.pyx":390
 *         if dist is not None:
 *             child.dist = dist
 *         if support is not None:             # <<<<<<<<<<<<<<
 *             child.support = support
 * 
 */
  __pyx_t_2 = (__pyx_v_support != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":391
 *             child.dist = dist
 *         if support is not None:
 *             child.support = support             # <<<<<<<<<<<<<<
 * 
 *         if type(child) != type(self):
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_child, __pyx_n_s_support, __pyx_v_support) < 0) __PYX_ERR(0, 391, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":390
 *         if dist is not None:
 *             child.dist = dist
 *         if support is not None:             # <<<<<<<<<<<<<<
 *             child.support = support
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":393
 *             child.support = support
 * 
 *         if type(child) != type(self):             # <<<<<<<<<<<<<<
 *             raise TreeError(f'Incorrect child type: {type(child)}')
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_child)), ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":394
 * 
 *         if type(child) != type(self):
 *             raise TreeError(f'Incorrect child type: {type(child)}')             # <<<<<<<<<<<<<<
 * 
 *         child.up = self
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_child)), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Incorrect_child_type, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 394, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":393
 *             child.support = support
 * 
 *         if type(child) != type(self):             # <<<<<<<<<<<<<<
 *             raise TreeError(f'Incorrect child type: {type(child)}')
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":396
 *             raise TreeError(f'Incorrect child type: {type(child)}')
 * 
 *         child.up = self             # <<<<<<<<<<<<<<
 *         self.children.append(child)
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_child, __pyx_n_s_up, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 396, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":397
 * 
 *         child.up = self
 *         self.children.append(child)             # <<<<<<<<<<<<<<
 * 
 *         return child
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_v_child); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":399
 *         self.children.append(child)
 * 
 *         return child             # <<<<<<<<<<<<<<
 * 
 *     def add_children(self, children=[]):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_child);
  __pyx_r = __pyx_v_child;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":370
 * 
 *     # Topology management
 *     def add_child(self, child=None, name=None, dist=None, support=None):             # <<<<<<<<<<<<<<
 *         """
 *         Adds a new child to this node. If child node is not suplied
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":401
 *         return child
 * 
 *     def add_children(self, children=[]):             # <<<<<<<<<<<<<<
 *         for child in children:
 *             self.add_child(child)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_79add_children(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_79add_children(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_children = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_children (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_children,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__5;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_children);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_children") < 0)) __PYX_ERR(0, 401, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_children = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_children", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 401, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_78add_children(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_children);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_78add_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_children) {
  PyObject *__pyx_v_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_children", 0);

  /* "ete4/coretype/tree.pyx":402
 * 
 *     def add_children(self, children=[]):
 *         for child in children:             # <<<<<<<<<<<<<<
 *             self.add_child(child)
 *         return children
 */
  if (likely(PyList_CheckExact(__pyx_v_children)) || PyTuple_CheckExact(__pyx_v_children)) {
    __pyx_t_1 = __pyx_v_children; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 402, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_child, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":403
 *     def add_children(self, children=[]):
 *         for child in children:
 *             self.add_child(child)             # <<<<<<<<<<<<<<
 *         return children
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_child) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_child);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":402
 * 
 *     def add_children(self, children=[]):
 *         for child in children:             # <<<<<<<<<<<<<<
 *             self.add_child(child)
 *         return children
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":404
 *         for child in children:
 *             self.add_child(child)
 *         return children             # <<<<<<<<<<<<<<
 * 
 *     def pop_child(self, child_idx=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_children);
  __pyx_r = __pyx_v_children;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":401
 *         return child
 * 
 *     def add_children(self, children=[]):             # <<<<<<<<<<<<<<
 *         for child in children:
 *             self.add_child(child)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":406
 *         return children
 * 
 *     def pop_child(self, child_idx=-1):             # <<<<<<<<<<<<<<
 *         try:
 *             child = self.children.pop(child_idx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_81pop_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_81pop_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_child_idx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pop_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child_idx,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child_idx);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pop_child") < 0)) __PYX_ERR(0, 406, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child_idx = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pop_child", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 406, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.pop_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_80pop_child(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_child_idx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_80pop_child(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_child_idx) {
  PyObject *__pyx_v_child = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pop_child", 0);

  /* "ete4/coretype/tree.pyx":407
 * 
 *     def pop_child(self, child_idx=-1):
 *         try:             # <<<<<<<<<<<<<<
 *             child = self.children.pop(child_idx)
 *         except ValueError as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":408
 *     def pop_child(self, child_idx=-1):
 *         try:
 *             child = self.children.pop(child_idx)             # <<<<<<<<<<<<<<
 *         except ValueError as e:
 *             raise TreeError("child not found")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 408, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_pop); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 408, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_child_idx) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_child_idx);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 408, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_child = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":407
 * 
 *     def pop_child(self, child_idx=-1):
 *         try:             # <<<<<<<<<<<<<<
 *             child = self.children.pop(child_idx)
 *         except ValueError as e:
 */
    }

    /* "ete4/coretype/tree.pyx":412
 *             raise TreeError("child not found")
 *         else:
 *             child.up = None             # <<<<<<<<<<<<<<
 *             return child
 * 
 */
    /*else:*/ {
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_child, __pyx_n_s_up, Py_None) < 0) __PYX_ERR(0, 412, __pyx_L5_except_error)

      /* "ete4/coretype/tree.pyx":413
 *         else:
 *             child.up = None
 *             return child             # <<<<<<<<<<<<<<
 * 
 *     def remove_child(self, child):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_child);
      __pyx_r = __pyx_v_child;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":409
 *         try:
 *             child = self.children.pop(child_idx)
 *         except ValueError as e:             # <<<<<<<<<<<<<<
 *             raise TreeError("child not found")
 *         else:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.pop_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 409, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;

      /* "ete4/coretype/tree.pyx":410
 *             child = self.children.pop(child_idx)
 *         except ValueError as e:
 *             raise TreeError("child not found")             # <<<<<<<<<<<<<<
 *         else:
 *             child.up = None
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 410, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_s_child_not_found) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_child_not_found);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 410, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 410, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "ete4/coretype/tree.pyx":407
 * 
 *     def pop_child(self, child_idx=-1):
 *         try:             # <<<<<<<<<<<<<<
 *             child = self.children.pop(child_idx)
 *         except ValueError as e:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":406
 *         return children
 * 
 *     def pop_child(self, child_idx=-1):             # <<<<<<<<<<<<<<
 *         try:
 *             child = self.children.pop(child_idx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.pop_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":415
 *             return child
 * 
 *     def remove_child(self, child):             # <<<<<<<<<<<<<<
 *         """
 *         Removes a child from this node (parent and child
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_83remove_child(PyObject *__pyx_v_self, PyObject *__pyx_v_child); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_82remove_child[] = "\n        Removes a child from this node (parent and child\n        nodes still exit but are no longer connected).\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_83remove_child(PyObject *__pyx_v_self, PyObject *__pyx_v_child) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_child (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_82remove_child(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_child));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_82remove_child(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_child) {
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_child", 0);

  /* "ete4/coretype/tree.pyx":420
 *         nodes still exit but are no longer connected).
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             self.children.remove(child)
 *         except ValueError as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":421
 *         """
 *         try:
 *             self.children.remove(child)             # <<<<<<<<<<<<<<
 *         except ValueError as e:
 *             raise TreeError("child not found")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_remove); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 421, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_child) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_child);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":420
 *         nodes still exit but are no longer connected).
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             self.children.remove(child)
 *         except ValueError as e:
 */
    }

    /* "ete4/coretype/tree.pyx":425
 *             raise TreeError("child not found")
 *         else:
 *             child.up = None             # <<<<<<<<<<<<<<
 *             return child
 * 
 */
    /*else:*/ {
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_child, __pyx_n_s_up, Py_None) < 0) __PYX_ERR(0, 425, __pyx_L5_except_error)

      /* "ete4/coretype/tree.pyx":426
 *         else:
 *             child.up = None
 *             return child             # <<<<<<<<<<<<<<
 * 
 *     def remove_children(self):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_child);
      __pyx_r = __pyx_v_child;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":422
 *         try:
 *             self.children.remove(child)
 *         except ValueError as e:             # <<<<<<<<<<<<<<
 *             raise TreeError("child not found")
 *         else:
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.remove_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 422, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;

      /* "ete4/coretype/tree.pyx":423
 *             self.children.remove(child)
 *         except ValueError as e:
 *             raise TreeError("child not found")             # <<<<<<<<<<<<<<
 *         else:
 *             child.up = None
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 423, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_s_child_not_found) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s_child_not_found);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 423, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 423, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "ete4/coretype/tree.pyx":420
 *         nodes still exit but are no longer connected).
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             self.children.remove(child)
 *         except ValueError as e:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":415
 *             return child
 * 
 *     def remove_child(self, child):             # <<<<<<<<<<<<<<
 *         """
 *         Removes a child from this node (parent and child
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.remove_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":428
 *             return child
 * 
 *     def remove_children(self):             # <<<<<<<<<<<<<<
 *         children = list(self.children)
 *         return [ self.remove_child(child) for child in children ]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_85remove_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_85remove_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_children (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_84remove_children(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_84remove_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_children = NULL;
  PyObject *__pyx_v_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_children", 0);

  /* "ete4/coretype/tree.pyx":429
 * 
 *     def remove_children(self):
 *         children = list(self.children)             # <<<<<<<<<<<<<<
 *         return [ self.remove_child(child) for child in children ]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_children = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":430
 *     def remove_children(self):
 *         children = list(self.children)
 *         return [ self.remove_child(child) for child in children ]             # <<<<<<<<<<<<<<
 * 
 *     def add_sister(self, sister=None, name=None, dist=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_v_children; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 430, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_child, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_remove_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_child) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_child);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":428
 *             return child
 * 
 *     def remove_children(self):             # <<<<<<<<<<<<<<
 *         children = list(self.children)
 *         return [ self.remove_child(child) for child in children ]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.remove_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_children);
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":432
 *         return [ self.remove_child(child) for child in children ]
 * 
 *     def add_sister(self, sister=None, name=None, dist=None):             # <<<<<<<<<<<<<<
 *         """
 *         Adds a sister to this node. If sister node is not supplied
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_87add_sister(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_86add_sister[] = "\n        Adds a sister to this node. If sister node is not supplied\n        as an argument, a new TreeNode instance will be created and\n        returned.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_87add_sister(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sister = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_dist = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_sister (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sister,&__pyx_n_s_name,&__pyx_n_s_dist,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sister);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dist);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_sister") < 0)) __PYX_ERR(0, 432, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sister = values[0];
    __pyx_v_name = values[1];
    __pyx_v_dist = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_sister", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 432, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_sister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_86add_sister(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_sister, __pyx_v_name, __pyx_v_dist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_86add_sister(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_sister, PyObject *__pyx_v_name, PyObject *__pyx_v_dist) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_sister", 0);

  /* "ete4/coretype/tree.pyx":438
 *         returned.
 *         """
 *         if self.up is None:             # <<<<<<<<<<<<<<
 *             raise TreeError("A parent node is required to add a sister")
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "ete4/coretype/tree.pyx":439
 *         """
 *         if self.up is None:
 *             raise TreeError("A parent node is required to add a sister")             # <<<<<<<<<<<<<<
 *         else:
 *             return self.up.add_child(child=sister, name=name, dist=dist)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_A_parent_node_is_required_to_add) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_A_parent_node_is_required_to_add);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 439, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":438
 *         returned.
 *         """
 *         if self.up is None:             # <<<<<<<<<<<<<<
 *             raise TreeError("A parent node is required to add a sister")
 *         else:
 */
  }

  /* "ete4/coretype/tree.pyx":441
 *             raise TreeError("A parent node is required to add a sister")
 *         else:
 *             return self.up.add_child(child=sister, name=name, dist=dist)             # <<<<<<<<<<<<<<
 * 
 *     def remove_sister(self, sister=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add_child); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_child, __pyx_v_sister) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dist, __pyx_v_dist) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":432
 *         return [ self.remove_child(child) for child in children ]
 * 
 *     def add_sister(self, sister=None, name=None, dist=None):             # <<<<<<<<<<<<<<
 *         """
 *         Adds a sister to this node. If sister node is not supplied
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_sister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":443
 *             return self.up.add_child(child=sister, name=name, dist=dist)
 * 
 *     def remove_sister(self, sister=None):             # <<<<<<<<<<<<<<
 *         """
 *         Removes a sister node. It has the same effect as
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_89remove_sister(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_88remove_sister[] = "\n        Removes a sister node. It has the same effect as\n        **`TreeNode.up.remove_child(sister)`**\n\n        If a sister node is not supplied, the first sister will be deleted\n        and returned.\n\n        :argument sister: A node instance\n\n        :return: The node removed\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_89remove_sister(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sister = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_sister (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sister,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sister);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove_sister") < 0)) __PYX_ERR(0, 443, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sister = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_sister", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 443, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.remove_sister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_88remove_sister(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_sister);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_88remove_sister(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_sister) {
  PyObject *__pyx_v_sisters = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_sister", 0);
  __Pyx_INCREF(__pyx_v_sister);

  /* "ete4/coretype/tree.pyx":455
 *         :return: The node removed
 *         """
 *         sisters = self.get_sisters()             # <<<<<<<<<<<<<<
 *         if len(sisters) > 0:
 *             if sister is None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_sisters); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sisters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":456
 *         """
 *         sisters = self.get_sisters()
 *         if len(sisters) > 0:             # <<<<<<<<<<<<<<
 *             if sister is None:
 *                 sister = sisters.pop(0)
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_sisters); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 0) != 0);
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":457
 *         sisters = self.get_sisters()
 *         if len(sisters) > 0:
 *             if sister is None:             # <<<<<<<<<<<<<<
 *                 sister = sisters.pop(0)
 *             return self.up.remove_child(sister)
 */
    __pyx_t_5 = (__pyx_v_sister == Py_None);
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":458
 *         if len(sisters) > 0:
 *             if sister is None:
 *                 sister = sisters.pop(0)             # <<<<<<<<<<<<<<
 *             return self.up.remove_child(sister)
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_PopIndex(__pyx_v_sisters, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_sister, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":457
 *         sisters = self.get_sisters()
 *         if len(sisters) > 0:
 *             if sister is None:             # <<<<<<<<<<<<<<
 *                 sister = sisters.pop(0)
 *             return self.up.remove_child(sister)
 */
    }

    /* "ete4/coretype/tree.pyx":459
 *             if sister is None:
 *                 sister = sisters.pop(0)
 *             return self.up.remove_child(sister)             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, prevent_nondicotomic=True, preserve_branch_length=False):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove_child); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_sister) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_sister);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":456
 *         """
 *         sisters = self.get_sisters()
 *         if len(sisters) > 0:             # <<<<<<<<<<<<<<
 *             if sister is None:
 *                 sister = sisters.pop(0)
 */
  }

  /* "ete4/coretype/tree.pyx":443
 *             return self.up.add_child(child=sister, name=name, dist=dist)
 * 
 *     def remove_sister(self, sister=None):             # <<<<<<<<<<<<<<
 *         """
 *         Removes a sister node. It has the same effect as
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.remove_sister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sisters);
  __Pyx_XDECREF(__pyx_v_sister);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":461
 *             return self.up.remove_child(sister)
 * 
 *     def delete(self, prevent_nondicotomic=True, preserve_branch_length=False):             # <<<<<<<<<<<<<<
 *         """
 *         Deletes node from the tree structure. Notice that this method
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_91delete(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_90delete[] = "\n        Deletes node from the tree structure. Notice that this method\n        makes 'disappear' the node from the tree structure. This means\n        that children from the deleted node are transferred to the\n        next available parent.\n\n        :param True prevent_nondicotomic: When True (default), delete\n            function will be execute recursively to prevent\n            single-child nodes.\n\n        :param False preserve_branch_length: If True, branch lengths\n            of the deleted nodes are transferred (summed up) to its\n            parent's branch, thus keeping original distances among\n            nodes.\n\n        **Example:**\n\n        ::\n\n                / C\n          root-|\n               |        / B\n                \\--- H |\n                        \\ A\n\n          > H.delete() will produce this structure:\n\n                / C\n               |\n          root-|--B\n               |\n                \\ A\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_91delete(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_prevent_nondicotomic = 0;
  PyObject *__pyx_v_preserve_branch_length = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prevent_nondicotomic,&__pyx_n_s_preserve_branch_length,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_True);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prevent_nondicotomic);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_preserve_branch_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete") < 0)) __PYX_ERR(0, 461, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_prevent_nondicotomic = values[0];
    __pyx_v_preserve_branch_length = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 461, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_90delete(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_prevent_nondicotomic, __pyx_v_preserve_branch_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_90delete(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_prevent_nondicotomic, PyObject *__pyx_v_preserve_branch_length) {
  PyObject *__pyx_v_parent = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "ete4/coretype/tree.pyx":496
 * 
 *         """
 *         parent = self.up             # <<<<<<<<<<<<<<
 *         if parent:
 *             if preserve_branch_length:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_parent = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":497
 *         """
 *         parent = self.up
 *         if parent:             # <<<<<<<<<<<<<<
 *             if preserve_branch_length:
 *                 if len(self.children) == 1:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_parent); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":498
 *         parent = self.up
 *         if parent:
 *             if preserve_branch_length:             # <<<<<<<<<<<<<<
 *                 if len(self.children) == 1:
 *                     self.children[0].dist += self.dist
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_preserve_branch_length); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 498, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ete4/coretype/tree.pyx":499
 *         if parent:
 *             if preserve_branch_length:
 *                 if len(self.children) == 1:             # <<<<<<<<<<<<<<
 *                     self.children[0].dist += self.dist
 *                 elif len(self.children) > 1:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 499, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_2 = ((__pyx_t_3 == 1) != 0);
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":500
 *             if preserve_branch_length:
 *                 if len(self.children) == 1:
 *                     self.children[0].dist += self.dist             # <<<<<<<<<<<<<<
 *                 elif len(self.children) > 1:
 *                     parent.dist += self.dist
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_t_4, __pyx_n_s_dist, __pyx_t_6) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":499
 *         if parent:
 *             if preserve_branch_length:
 *                 if len(self.children) == 1:             # <<<<<<<<<<<<<<
 *                     self.children[0].dist += self.dist
 *                 elif len(self.children) > 1:
 */
        goto __pyx_L5;
      }

      /* "ete4/coretype/tree.pyx":501
 *                 if len(self.children) == 1:
 *                     self.children[0].dist += self.dist
 *                 elif len(self.children) > 1:             # <<<<<<<<<<<<<<
 *                     parent.dist += self.dist
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 501, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = ((__pyx_t_3 > 1) != 0);
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":502
 *                     self.children[0].dist += self.dist
 *                 elif len(self.children) > 1:
 *                     parent.dist += self.dist             # <<<<<<<<<<<<<<
 * 
 *             for ch in self.children:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_dist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dist); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_parent, __pyx_n_s_dist, __pyx_t_5) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ete4/coretype/tree.pyx":501
 *                 if len(self.children) == 1:
 *                     self.children[0].dist += self.dist
 *                 elif len(self.children) > 1:             # <<<<<<<<<<<<<<
 *                     parent.dist += self.dist
 * 
 */
      }
      __pyx_L5:;

      /* "ete4/coretype/tree.pyx":498
 *         parent = self.up
 *         if parent:
 *             if preserve_branch_length:             # <<<<<<<<<<<<<<
 *                 if len(self.children) == 1:
 *                     self.children[0].dist += self.dist
 */
    }

    /* "ete4/coretype/tree.pyx":504
 *                     parent.dist += self.dist
 * 
 *             for ch in self.children:             # <<<<<<<<<<<<<<
 *                 parent.add_child(ch)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 504, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 504, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 504, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_6);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 504, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":505
 * 
 *             for ch in self.children:
 *                 parent.add_child(ch)             # <<<<<<<<<<<<<<
 * 
 *             parent.remove_child(self)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_add_child); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_v_ch) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ch);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":504
 *                     parent.dist += self.dist
 * 
 *             for ch in self.children:             # <<<<<<<<<<<<<<
 *                 parent.add_child(ch)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":507
 *                 parent.add_child(ch)
 * 
 *             parent.remove_child(self)             # <<<<<<<<<<<<<<
 * 
 *         # Avoids parents with only one child
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_remove_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":497
 *         """
 *         parent = self.up
 *         if parent:             # <<<<<<<<<<<<<<
 *             if preserve_branch_length:
 *                 if len(self.children) == 1:
 */
  }

  /* "ete4/coretype/tree.pyx":510
 * 
 *         # Avoids parents with only one child
 *         if prevent_nondicotomic and parent and\             # <<<<<<<<<<<<<<
 *               len(parent.children) < 2:
 *             parent.delete(prevent_nondicotomic=False,
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_prevent_nondicotomic); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 510, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_2 = __pyx_t_8;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_parent); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 510, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_2 = __pyx_t_8;
    goto __pyx_L9_bool_binop_done;
  }

  /* "ete4/coretype/tree.pyx":511
 *         # Avoids parents with only one child
 *         if prevent_nondicotomic and parent and\
 *               len(parent.children) < 2:             # <<<<<<<<<<<<<<
 *             parent.delete(prevent_nondicotomic=False,
 *                           preserve_branch_length=preserve_branch_length)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_children); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = ((__pyx_t_3 < 2) != 0);
  __pyx_t_2 = __pyx_t_8;
  __pyx_L9_bool_binop_done:;

  /* "ete4/coretype/tree.pyx":510
 * 
 *         # Avoids parents with only one child
 *         if prevent_nondicotomic and parent and\             # <<<<<<<<<<<<<<
 *               len(parent.children) < 2:
 *             parent.delete(prevent_nondicotomic=False,
 */
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":512
 *         if prevent_nondicotomic and parent and\
 *               len(parent.children) < 2:
 *             parent.delete(prevent_nondicotomic=False,             # <<<<<<<<<<<<<<
 *                           preserve_branch_length=preserve_branch_length)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_delete); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_prevent_nondicotomic, Py_False) < 0) __PYX_ERR(0, 512, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":513
 *               len(parent.children) < 2:
 *             parent.delete(prevent_nondicotomic=False,
 *                           preserve_branch_length=preserve_branch_length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_preserve_branch_length, __pyx_v_preserve_branch_length) < 0) __PYX_ERR(0, 512, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":512
 *         if prevent_nondicotomic and parent and\
 *               len(parent.children) < 2:
 *             parent.delete(prevent_nondicotomic=False,             # <<<<<<<<<<<<<<
 *                           preserve_branch_length=preserve_branch_length)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":510
 * 
 *         # Avoids parents with only one child
 *         if prevent_nondicotomic and parent and\             # <<<<<<<<<<<<<<
 *               len(parent.children) < 2:
 *             parent.delete(prevent_nondicotomic=False,
 */
  }

  /* "ete4/coretype/tree.pyx":461
 *             return self.up.remove_child(sister)
 * 
 *     def delete(self, prevent_nondicotomic=True, preserve_branch_length=False):             # <<<<<<<<<<<<<<
 *         """
 *         Deletes node from the tree structure. Notice that this method
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":516
 * 
 * 
 *     def detach(self):             # <<<<<<<<<<<<<<
 *         """
 *         Detachs this node (and all its descendants) from its parent
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_93detach(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_92detach[] = "\n        Detachs this node (and all its descendants) from its parent\n        and returns the referent to itself.\n\n        Detached node conserves all its structure of descendants, and can\n        be attached to another node through the 'add_child' function. This\n        mechanism can be seen as a cut and paste.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_93detach(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("detach (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_92detach(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_92detach(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("detach", 0);

  /* "ete4/coretype/tree.pyx":526
 *         """
 * 
 *         if self.up:             # <<<<<<<<<<<<<<
 *             self.up.children.remove(self)
 *             self.up = None
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":527
 * 
 *         if self.up:
 *             self.up.children.remove(self)             # <<<<<<<<<<<<<<
 *             self.up = None
 *         return self
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":528
 *         if self.up:
 *             self.up.children.remove(self)
 *             self.up = None             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up, Py_None) < 0) __PYX_ERR(0, 528, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":526
 *         """
 * 
 *         if self.up:             # <<<<<<<<<<<<<<
 *             self.up.children.remove(self)
 *             self.up = None
 */
  }

  /* "ete4/coretype/tree.pyx":529
 *             self.up.children.remove(self)
 *             self.up = None
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":516
 * 
 * 
 *     def detach(self):             # <<<<<<<<<<<<<<
 *         """
 *         Detachs this node (and all its descendants) from its parent
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.detach", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":532
 * 
 * 
 *     def prune(self, nodes, preserve_branch_length=False):             # <<<<<<<<<<<<<<
 *         """Prunes the topology of a node to conserve only the selected list of leaf
 *         internal nodes. The minimum number of nodes that conserve the
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_95prune(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_94prune[] = "Prunes the topology of a node to conserve only the selected list of leaf\n        internal nodes. The minimum number of nodes that conserve the\n        topological relationships among the requested nodes will be\n        retained. Root node is always conserved.\n\n        :var nodes: a list of node names or node objects that should be retained\n\n        :param False preserve_branch_length: If True, branch lengths\n          of the deleted nodes are transferred (summed up) to its\n          parent's branch, thus keeping original distances among\n          nodes.\n\n        **Examples:**\n\n        ::\n\n          t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)\n          t1.prune(['A', 'B'])\n\n\n          #                /-A\n          #          /D /C|\n          #       /F|      \\-B\n          #      |  |\n          #    /H|   \\-E\n          #   |  |                        /-A\n          #-root  \\-G                 -root\n          #   |                           \\-B\n          #   |   /-I\n          #    \\K|\n          #       \\-J\n\n\n\n          t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)\n          t1.prune(['A', 'B', 'C'])\n\n          #                /-A\n          #          /D /C|\n          #       /F|      \\-B\n          #      |  |\n          #    /H|   \\-E\n          #   |  |                              /-A\n          #-root  \\-G                  -root- C|\n          #   |                                 \\-B\n          #   |   /-I\n          #    \\K|\n          #       \\-J\n\n\n\n          t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)\n          t1.prune(['A', 'B', 'I'])\n\n\n          #                /-A\n          #          /D /C|\n          #       /F|      \\-B\n          #      |  |\n          #    /H|   \\-E                    /-I\n          #   |  |                      -root\n          #-root  \\-G                      |   /-A\n          #   |                             \\C|\n          #   | ""  /-I                          \\-B\n          #    \\K|\n          #       \\-J\n\n          t1 = Tree('(((((A,B)C)D,E)F,G)H,(I,J)K)root;', format=1)\n          t1.prune(['A', 'B', 'F', 'H'])\n\n          #                /-A\n          #          /D /C|\n          #       /F|      \\-B\n          #      |  |\n          #    /H|   \\-E\n          #   |  |                              /-A\n          #-root  \\-G                -root-H /F|\n          #   |                                 \\-B\n          #   |   /-I\n          #    \\K|\n          #       \\-J\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_95prune(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_v_preserve_branch_length = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodes,&__pyx_n_s_preserve_branch_length,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_preserve_branch_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune") < 0)) __PYX_ERR(0, 532, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nodes = values[0];
    __pyx_v_preserve_branch_length = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_94prune(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_nodes, __pyx_v_preserve_branch_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":616
 * 
 *         """
 *         def cmp_nodes(x, y):             # <<<<<<<<<<<<<<
 *             # if several nodes are in the same path of two kept nodes,
 *             # only one should be maintained. This prioritize internal
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_5prune_1cmp_nodes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_5prune_1cmp_nodes = {"cmp_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_5prune_1cmp_nodes, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_5prune_1cmp_nodes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cmp_nodes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cmp_nodes", 1, 2, 2, 1); __PYX_ERR(0, 616, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cmp_nodes") < 0)) __PYX_ERR(0, 616, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cmp_nodes", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 616, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.prune.cmp_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_5prune_cmp_nodes(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_5prune_cmp_nodes(PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cmp_nodes", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ete4/coretype/tree.pyx":621
 *             # nodes that are already in the to_keep list and then
 *             # deeper nodes (closer to the leaves).
 *             if n2depth[x] > n2depth[y]:             # <<<<<<<<<<<<<<
 *                 return -1
 *             elif n2depth[x] < n2depth[y]:
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_n2depth)) { __Pyx_RaiseClosureNameError("n2depth"); __PYX_ERR(0, 621, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_n2depth == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 621, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_n2depth, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_n2depth)) { __Pyx_RaiseClosureNameError("n2depth"); __PYX_ERR(0, 621, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_n2depth == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 621, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_n2depth, __pyx_v_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":622
 *             # deeper nodes (closer to the leaves).
 *             if n2depth[x] > n2depth[y]:
 *                 return -1             # <<<<<<<<<<<<<<
 *             elif n2depth[x] < n2depth[y]:
 *                 return 1
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_r = __pyx_int_neg_1;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":621
 *             # nodes that are already in the to_keep list and then
 *             # deeper nodes (closer to the leaves).
 *             if n2depth[x] > n2depth[y]:             # <<<<<<<<<<<<<<
 *                 return -1
 *             elif n2depth[x] < n2depth[y]:
 */
  }

  /* "ete4/coretype/tree.pyx":623
 *             if n2depth[x] > n2depth[y]:
 *                 return -1
 *             elif n2depth[x] < n2depth[y]:             # <<<<<<<<<<<<<<
 *                 return 1
 *             else:
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_n2depth)) { __Pyx_RaiseClosureNameError("n2depth"); __PYX_ERR(0, 623, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_n2depth == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 623, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_n2depth, __pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_cur_scope->__pyx_v_n2depth)) { __Pyx_RaiseClosureNameError("n2depth"); __PYX_ERR(0, 623, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_n2depth == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 623, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_n2depth, __pyx_v_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":624
 *                 return -1
 *             elif n2depth[x] < n2depth[y]:
 *                 return 1             # <<<<<<<<<<<<<<
 *             else:
 *                 return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":623
 *             if n2depth[x] > n2depth[y]:
 *                 return -1
 *             elif n2depth[x] < n2depth[y]:             # <<<<<<<<<<<<<<
 *                 return 1
 *             else:
 */
  }

  /* "ete4/coretype/tree.pyx":626
 *                 return 1
 *             else:
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *         to_keep = set(_translate_nodes(self, *nodes))
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":616
 * 
 *         """
 *         def cmp_nodes(x, y):             # <<<<<<<<<<<<<<
 *             # if several nodes are in the same path of two kept nodes,
 *             # only one should be maintained. This prioritize internal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.prune.cmp_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":532
 * 
 * 
 *     def prune(self, nodes, preserve_branch_length=False):             # <<<<<<<<<<<<<<
 *         """Prunes the topology of a node to conserve only the selected list of leaf
 *         internal nodes. The minimum number of nodes that conserve the
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_94prune(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_nodes, PyObject *__pyx_v_preserve_branch_length) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *__pyx_cur_scope;
  PyObject *__pyx_v_cmp_nodes = 0;
  PyObject *__pyx_v_to_keep = NULL;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_node2path = NULL;
  PyObject *__pyx_v_n2count = NULL;
  PyObject *__pyx_v_seed = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_v_visited_node = NULL;
  PyObject *__pyx_v_depth = NULL;
  PyObject *__pyx_v_visitors2nodes = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_visitors = NULL;
  PyObject *__pyx_v_visitor_key = NULL;
  PyObject *__pyx_v_sorted_nodes = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct__prune(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct__prune, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 532, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_INCREF(__pyx_v_nodes);

  /* "ete4/coretype/tree.pyx":616
 * 
 *         """
 *         def cmp_nodes(x, y):             # <<<<<<<<<<<<<<
 *             # if several nodes are in the same path of two kept nodes,
 *             # only one should be maintained. This prioritize internal
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_5prune_1cmp_nodes, 0, __pyx_n_s_prune_locals_cmp_nodes, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cmp_nodes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":628
 *                 return 0
 * 
 *         to_keep = set(_translate_nodes(self, *nodes))             # <<<<<<<<<<<<<<
 *         start, node2path = self.get_common_ancestor(to_keep, get_path=True)
 *         to_keep.add(self)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_translate_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_to_keep = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":629
 * 
 *         to_keep = set(_translate_nodes(self, *nodes))
 *         start, node2path = self.get_common_ancestor(to_keep, get_path=True)             # <<<<<<<<<<<<<<
 *         to_keep.add(self)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_common_ancestor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_to_keep);
  __Pyx_GIVEREF(__pyx_v_to_keep);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_to_keep);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_get_path, Py_True) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 629, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 629, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_start = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_node2path = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":630
 *         to_keep = set(_translate_nodes(self, *nodes))
 *         start, node2path = self.get_common_ancestor(to_keep, get_path=True)
 *         to_keep.add(self)             # <<<<<<<<<<<<<<
 * 
 *         # Calculate which kept nodes are visiting the same nodes in
 */
  __pyx_t_6 = PySet_Add(__pyx_v_to_keep, ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 630, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":634
 *         # Calculate which kept nodes are visiting the same nodes in
 *         # their path to the common ancestor.
 *         n2count = {}             # <<<<<<<<<<<<<<
 *         n2depth = {}
 *         for seed, path in six.iteritems(node2path):
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_n2count = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":635
 *         # their path to the common ancestor.
 *         n2count = {}
 *         n2depth = {}             # <<<<<<<<<<<<<<
 *         for seed, path in six.iteritems(node2path):
 *             for visited_node in path:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_n2depth = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":636
 *         n2count = {}
 *         n2depth = {}
 *         for seed, path in six.iteritems(node2path):             # <<<<<<<<<<<<<<
 *             for visited_node in path:
 *                 if visited_node not in n2depth:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_six); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_node2path) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_node2path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 636, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 636, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 636, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 636, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 636, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_5(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_9), 2) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 636, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_seed, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_path, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":637
 *         n2depth = {}
 *         for seed, path in six.iteritems(node2path):
 *             for visited_node in path:             # <<<<<<<<<<<<<<
 *                 if visited_node not in n2depth:
 *                     depth = visited_node.get_distance(start, topology_only=True)
 */
    if (likely(PyList_CheckExact(__pyx_v_path)) || PyTuple_CheckExact(__pyx_v_path)) {
      __pyx_t_2 = __pyx_v_path; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 637, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_11(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 637, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_visited_node, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":638
 *         for seed, path in six.iteritems(node2path):
 *             for visited_node in path:
 *                 if visited_node not in n2depth:             # <<<<<<<<<<<<<<
 *                     depth = visited_node.get_distance(start, topology_only=True)
 *                     n2depth[visited_node] = depth
 */
      __pyx_t_12 = (__Pyx_PyDict_ContainsTF(__pyx_v_visited_node, __pyx_cur_scope->__pyx_v_n2depth, Py_NE)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
      __pyx_t_13 = (__pyx_t_12 != 0);
      if (__pyx_t_13) {

        /* "ete4/coretype/tree.pyx":639
 *             for visited_node in path:
 *                 if visited_node not in n2depth:
 *                     depth = visited_node.get_distance(start, topology_only=True)             # <<<<<<<<<<<<<<
 *                     n2depth[visited_node] = depth
 *                 if visited_node is not seed:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_visited_node, __pyx_n_s_get_distance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_start);
        __Pyx_GIVEREF(__pyx_v_start);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_start);
        __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_topology_only, Py_True) < 0) __PYX_ERR(0, 639, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_depth, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "ete4/coretype/tree.pyx":640
 *                 if visited_node not in n2depth:
 *                     depth = visited_node.get_distance(start, topology_only=True)
 *                     n2depth[visited_node] = depth             # <<<<<<<<<<<<<<
 *                 if visited_node is not seed:
 *                     n2count.setdefault(visited_node, set()).add(seed)
 */
        if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_n2depth, __pyx_v_visited_node, __pyx_v_depth) < 0)) __PYX_ERR(0, 640, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":638
 *         for seed, path in six.iteritems(node2path):
 *             for visited_node in path:
 *                 if visited_node not in n2depth:             # <<<<<<<<<<<<<<
 *                     depth = visited_node.get_distance(start, topology_only=True)
 *                     n2depth[visited_node] = depth
 */
      }

      /* "ete4/coretype/tree.pyx":641
 *                     depth = visited_node.get_distance(start, topology_only=True)
 *                     n2depth[visited_node] = depth
 *                 if visited_node is not seed:             # <<<<<<<<<<<<<<
 *                     n2count.setdefault(visited_node, set()).add(seed)
 * 
 */
      __pyx_t_13 = (__pyx_v_visited_node != __pyx_v_seed);
      __pyx_t_12 = (__pyx_t_13 != 0);
      if (__pyx_t_12) {

        /* "ete4/coretype/tree.pyx":642
 *                     n2depth[visited_node] = depth
 *                 if visited_node is not seed:
 *                     n2count.setdefault(visited_node, set()).add(seed)             # <<<<<<<<<<<<<<
 * 
 *         # if several internal nodes are in the path of exactly the same kept
 */
        __pyx_t_9 = PySet_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = __Pyx_PyDict_SetDefault(__pyx_v_n2count, __pyx_v_visited_node, __pyx_t_9, -1L); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_14 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_seed) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_seed);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "ete4/coretype/tree.pyx":641
 *                     depth = visited_node.get_distance(start, topology_only=True)
 *                     n2depth[visited_node] = depth
 *                 if visited_node is not seed:             # <<<<<<<<<<<<<<
 *                     n2count.setdefault(visited_node, set()).add(seed)
 * 
 */
      }

      /* "ete4/coretype/tree.pyx":637
 *         n2depth = {}
 *         for seed, path in six.iteritems(node2path):
 *             for visited_node in path:             # <<<<<<<<<<<<<<
 *                 if visited_node not in n2depth:
 *                     depth = visited_node.get_distance(start, topology_only=True)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":636
 *         n2count = {}
 *         n2depth = {}
 *         for seed, path in six.iteritems(node2path):             # <<<<<<<<<<<<<<
 *             for visited_node in path:
 *                 if visited_node not in n2depth:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":646
 *         # if several internal nodes are in the path of exactly the same kept
 *         # nodes, only one (the deepest) should be maintain.
 *         visitors2nodes = {}             # <<<<<<<<<<<<<<
 *         for node, visitors in six.iteritems(n2count):
 *             # keep nodes connection at least two other nodes
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_visitors2nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":647
 *         # nodes, only one (the deepest) should be maintain.
 *         visitors2nodes = {}
 *         for node, visitors in six.iteritems(n2count):             # <<<<<<<<<<<<<<
 *             # keep nodes connection at least two other nodes
 *             if len(visitors)>1:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_six); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_2, __pyx_v_n2count) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_n2count);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_14 = __pyx_t_1; __Pyx_INCREF(__pyx_t_14); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_8 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 647, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_14))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 647, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 647, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_14);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 647, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 647, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_9 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_9)) goto __pyx_L15_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_3), 2) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L16_unpacking_done;
      __pyx_L15_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 647, __pyx_L1_error)
      __pyx_L16_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_visitors, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "ete4/coretype/tree.pyx":649
 *         for node, visitors in six.iteritems(n2count):
 *             # keep nodes connection at least two other nodes
 *             if len(visitors)>1:             # <<<<<<<<<<<<<<
 *                 visitor_key = frozenset(visitors)
 *                 visitors2nodes.setdefault(visitor_key, set()).add(node)
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_visitors); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 649, __pyx_L1_error)
    __pyx_t_12 = ((__pyx_t_10 > 1) != 0);
    if (__pyx_t_12) {

      /* "ete4/coretype/tree.pyx":650
 *             # keep nodes connection at least two other nodes
 *             if len(visitors)>1:
 *                 visitor_key = frozenset(visitors)             # <<<<<<<<<<<<<<
 *                 visitors2nodes.setdefault(visitor_key, set()).add(node)
 * 
 */
      __pyx_t_1 = __Pyx_PyFrozenSet_New(__pyx_v_visitors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_visitor_key, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":651
 *             if len(visitors)>1:
 *                 visitor_key = frozenset(visitors)
 *                 visitors2nodes.setdefault(visitor_key, set()).add(node)             # <<<<<<<<<<<<<<
 * 
 *         for visitors, nodes in six.iteritems(visitors2nodes):
 */
      __pyx_t_9 = PySet_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = __Pyx_PyDict_SetDefault(__pyx_v_visitors2nodes, __pyx_v_visitor_key, __pyx_t_9, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_2, __pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_node);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":649
 *         for node, visitors in six.iteritems(n2count):
 *             # keep nodes connection at least two other nodes
 *             if len(visitors)>1:             # <<<<<<<<<<<<<<
 *                 visitor_key = frozenset(visitors)
 *                 visitors2nodes.setdefault(visitor_key, set()).add(node)
 */
    }

    /* "ete4/coretype/tree.pyx":647
 *         # nodes, only one (the deepest) should be maintain.
 *         visitors2nodes = {}
 *         for node, visitors in six.iteritems(n2count):             # <<<<<<<<<<<<<<
 *             # keep nodes connection at least two other nodes
 *             if len(visitors)>1:
 */
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "ete4/coretype/tree.pyx":653
 *                 visitors2nodes.setdefault(visitor_key, set()).add(node)
 * 
 *         for visitors, nodes in six.iteritems(visitors2nodes):             # <<<<<<<<<<<<<<
 *             if not (to_keep & nodes):
 *                 sorted_nodes = sorted(nodes, key=cmp_to_key(cmp_nodes))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_six); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_14 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_1, __pyx_v_visitors2nodes) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_visitors2nodes);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
    __pyx_t_9 = __pyx_t_14; __Pyx_INCREF(__pyx_t_9); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 653, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_14 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_7); __Pyx_INCREF(__pyx_t_14); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 653, __pyx_L1_error)
        #else
        __pyx_t_14 = PySequence_ITEM(__pyx_t_9, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_7); __Pyx_INCREF(__pyx_t_14); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 653, __pyx_L1_error)
        #else
        __pyx_t_14 = PySequence_ITEM(__pyx_t_9, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        #endif
      }
    } else {
      __pyx_t_14 = __pyx_t_8(__pyx_t_9);
      if (unlikely(!__pyx_t_14)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 653, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_14);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
      PyObject* sequence = __pyx_t_14;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 653, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_3), 2) < 0) __PYX_ERR(0, 653, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L21_unpacking_done;
      __pyx_L20_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 653, __pyx_L1_error)
      __pyx_L21_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_visitors, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_nodes, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":654
 * 
 *         for visitors, nodes in six.iteritems(visitors2nodes):
 *             if not (to_keep & nodes):             # <<<<<<<<<<<<<<
 *                 sorted_nodes = sorted(nodes, key=cmp_to_key(cmp_nodes))
 *                 to_keep.add(sorted_nodes[0])
 */
    __pyx_t_14 = PyNumber_And(__pyx_v_to_keep, __pyx_v_nodes); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_13 = ((!__pyx_t_12) != 0);
    if (__pyx_t_13) {

      /* "ete4/coretype/tree.pyx":655
 *         for visitors, nodes in six.iteritems(visitors2nodes):
 *             if not (to_keep & nodes):
 *                 sorted_nodes = sorted(nodes, key=cmp_to_key(cmp_nodes))             # <<<<<<<<<<<<<<
 *                 to_keep.add(sorted_nodes[0])
 * 
 */
      __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_v_nodes);
      __Pyx_GIVEREF(__pyx_v_nodes);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_nodes);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cmp_to_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_cmp_nodes) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_cmp_nodes);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_t_1) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_14, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_sorted_nodes, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":656
 *             if not (to_keep & nodes):
 *                 sorted_nodes = sorted(nodes, key=cmp_to_key(cmp_nodes))
 *                 to_keep.add(sorted_nodes[0])             # <<<<<<<<<<<<<<
 * 
 *         for n in self.get_descendants('postorder'):
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_sorted_nodes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PySet_Add(__pyx_v_to_keep, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 656, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":654
 * 
 *         for visitors, nodes in six.iteritems(visitors2nodes):
 *             if not (to_keep & nodes):             # <<<<<<<<<<<<<<
 *                 sorted_nodes = sorted(nodes, key=cmp_to_key(cmp_nodes))
 *                 to_keep.add(sorted_nodes[0])
 */
    }

    /* "ete4/coretype/tree.pyx":653
 *                 visitors2nodes.setdefault(visitor_key, set()).add(node)
 * 
 *         for visitors, nodes in six.iteritems(visitors2nodes):             # <<<<<<<<<<<<<<
 *             if not (to_keep & nodes):
 *                 sorted_nodes = sorted(nodes, key=cmp_to_key(cmp_nodes))
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "ete4/coretype/tree.pyx":658
 *                 to_keep.add(sorted_nodes[0])
 * 
 *         for n in self.get_descendants('postorder'):             # <<<<<<<<<<<<<<
 *             if n not in to_keep:
 *                 if preserve_branch_length:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_descendants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_n_s_postorder) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_s_postorder);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
    __pyx_t_1 = __pyx_t_9; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 658, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 658, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 658, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "ete4/coretype/tree.pyx":659
 * 
 *         for n in self.get_descendants('postorder'):
 *             if n not in to_keep:             # <<<<<<<<<<<<<<
 *                 if preserve_branch_length:
 *                     if len(n.children) == 1:
 */
    __pyx_t_13 = (__Pyx_PySet_ContainsTF(__pyx_v_n, __pyx_v_to_keep, Py_NE)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 659, __pyx_L1_error)
    __pyx_t_12 = (__pyx_t_13 != 0);
    if (__pyx_t_12) {

      /* "ete4/coretype/tree.pyx":660
 *         for n in self.get_descendants('postorder'):
 *             if n not in to_keep:
 *                 if preserve_branch_length:             # <<<<<<<<<<<<<<
 *                     if len(n.children) == 1:
 *                         n.children[0].dist += n.dist
 */
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_preserve_branch_length); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 660, __pyx_L1_error)
      if (__pyx_t_12) {

        /* "ete4/coretype/tree.pyx":661
 *             if n not in to_keep:
 *                 if preserve_branch_length:
 *                     if len(n.children) == 1:             # <<<<<<<<<<<<<<
 *                         n.children[0].dist += n.dist
 *                     elif len(n.children) > 1 and n.up:
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_12 = ((__pyx_t_10 == 1) != 0);
        if (__pyx_t_12) {

          /* "ete4/coretype/tree.pyx":662
 *                 if preserve_branch_length:
 *                     if len(n.children) == 1:
 *                         n.children[0].dist += n.dist             # <<<<<<<<<<<<<<
 *                     elif len(n.children) > 1 and n.up:
 *                         n.up.dist += n.dist
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 662, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dist); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 662, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_dist); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 662, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_9, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 662, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_dist, __pyx_t_3) < 0) __PYX_ERR(0, 662, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "ete4/coretype/tree.pyx":661
 *             if n not in to_keep:
 *                 if preserve_branch_length:
 *                     if len(n.children) == 1:             # <<<<<<<<<<<<<<
 *                         n.children[0].dist += n.dist
 *                     elif len(n.children) > 1 and n.up:
 */
          goto __pyx_L27;
        }

        /* "ete4/coretype/tree.pyx":663
 *                     if len(n.children) == 1:
 *                         n.children[0].dist += n.dist
 *                     elif len(n.children) > 1 and n.up:             # <<<<<<<<<<<<<<
 *                         n.up.dist += n.dist
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 663, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_13 = ((__pyx_t_10 > 1) != 0);
        if (__pyx_t_13) {
        } else {
          __pyx_t_12 = __pyx_t_13;
          goto __pyx_L28_bool_binop_done;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_up); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 663, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_12 = __pyx_t_13;
        __pyx_L28_bool_binop_done:;
        if (__pyx_t_12) {

          /* "ete4/coretype/tree.pyx":664
 *                         n.children[0].dist += n.dist
 *                     elif len(n.children) > 1 and n.up:
 *                         n.up.dist += n.dist             # <<<<<<<<<<<<<<
 * 
 *                 n.delete(prevent_nondicotomic=False)
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_up); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_dist); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_dist, __pyx_t_9) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "ete4/coretype/tree.pyx":663
 *                     if len(n.children) == 1:
 *                         n.children[0].dist += n.dist
 *                     elif len(n.children) > 1 and n.up:             # <<<<<<<<<<<<<<
 *                         n.up.dist += n.dist
 * 
 */
        }
        __pyx_L27:;

        /* "ete4/coretype/tree.pyx":660
 *         for n in self.get_descendants('postorder'):
 *             if n not in to_keep:
 *                 if preserve_branch_length:             # <<<<<<<<<<<<<<
 *                     if len(n.children) == 1:
 *                         n.children[0].dist += n.dist
 */
      }

      /* "ete4/coretype/tree.pyx":666
 *                         n.up.dist += n.dist
 * 
 *                 n.delete(prevent_nondicotomic=False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_delete); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_prevent_nondicotomic, Py_False) < 0) __PYX_ERR(0, 666, __pyx_L1_error)
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "ete4/coretype/tree.pyx":659
 * 
 *         for n in self.get_descendants('postorder'):
 *             if n not in to_keep:             # <<<<<<<<<<<<<<
 *                 if preserve_branch_length:
 *                     if len(n.children) == 1:
 */
    }

    /* "ete4/coretype/tree.pyx":658
 *                 to_keep.add(sorted_nodes[0])
 * 
 *         for n in self.get_descendants('postorder'):             # <<<<<<<<<<<<<<
 *             if n not in to_keep:
 *                 if preserve_branch_length:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":532
 * 
 * 
 *     def prune(self, nodes, preserve_branch_length=False):             # <<<<<<<<<<<<<<
 *         """Prunes the topology of a node to conserve only the selected list of leaf
 *         internal nodes. The minimum number of nodes that conserve the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cmp_nodes);
  __Pyx_XDECREF(__pyx_v_to_keep);
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_node2path);
  __Pyx_XDECREF(__pyx_v_n2count);
  __Pyx_XDECREF(__pyx_v_seed);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF(__pyx_v_visited_node);
  __Pyx_XDECREF(__pyx_v_depth);
  __Pyx_XDECREF(__pyx_v_visitors2nodes);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_visitors);
  __Pyx_XDECREF(__pyx_v_visitor_key);
  __Pyx_XDECREF(__pyx_v_sorted_nodes);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":669
 * 
 * 
 *     def swap_children(self):             # <<<<<<<<<<<<<<
 *         """
 *         Swaps current children order.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_97swap_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_96swap_children[] = "\n        Swaps current children order.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_97swap_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap_children (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_96swap_children(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_96swap_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("swap_children", 0);

  /* "ete4/coretype/tree.pyx":673
 *         Swaps current children order.
 *         """
 *         if len(self.children)>1:             # <<<<<<<<<<<<<<
 *             self.children.reverse()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 > 1) != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":674
 *         """
 *         if len(self.children)>1:
 *             self.children.reverse()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_reverse); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":673
 *         Swaps current children order.
 *         """
 *         if len(self.children)>1:             # <<<<<<<<<<<<<<
 *             self.children.reverse()
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":669
 * 
 * 
 *     def swap_children(self):             # <<<<<<<<<<<<<<
 *         """
 *         Swaps current children order.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.swap_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":682
 * 
 * 
 *     def get_children(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an independent list of node's children.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_99get_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_98get_children[] = "\n        Returns an independent list of node's children.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_99get_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_children (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_98get_children(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_98get_children(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_children", 0);

  /* "ete4/coretype/tree.pyx":686
 *         Returns an independent list of node's children.
 *         """
 *         return [ch for ch in self.children]             # <<<<<<<<<<<<<<
 * 
 *     def get_sisters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 686, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_ch))) __PYX_ERR(0, 686, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":682
 * 
 * 
 *     def get_children(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an independent list of node's children.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":688
 *         return [ch for ch in self.children]
 * 
 *     def get_sisters(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an independent list of sister nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_101get_sisters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_100get_sisters[] = "\n        Returns an independent list of sister nodes.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_101get_sisters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sisters (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_100get_sisters(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_100get_sisters(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_sisters", 0);

  /* "ete4/coretype/tree.pyx":692
 *         Returns an independent list of sister nodes.
 *         """
 *         if self.up is not None:             # <<<<<<<<<<<<<<
 *             return [ch for ch in self.up.children if ch!=self]
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":693
 *         """
 *         if self.up is not None:
 *             return [ch for ch in self.up.children if ch!=self]             # <<<<<<<<<<<<<<
 *         else:
 *             return []
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 693, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 693, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 693, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 693, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 693, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_ch, ((PyObject *)__pyx_v_self), Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 693, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_ch))) __PYX_ERR(0, 693, __pyx_L1_error)
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":692
 *         Returns an independent list of sister nodes.
 *         """
 *         if self.up is not None:             # <<<<<<<<<<<<<<
 *             return [ch for ch in self.up.children if ch!=self]
 *         else:
 */
  }

  /* "ete4/coretype/tree.pyx":695
 *             return [ch for ch in self.up.children if ch!=self]
 *         else:
 *             return []             # <<<<<<<<<<<<<<
 * 
 *     def iter_leaves(self, is_leaf_fn=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":688
 *         return [ch for ch in self.children]
 * 
 *     def get_sisters(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an independent list of sister nodes.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_sisters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_104generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":697
 *             return []
 * 
 *     def iter_leaves(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over the leaves under this node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_103iter_leaves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_102iter_leaves[] = "\n        Returns an iterator over the leaves under this node.\n\n        :argument None is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_103iter_leaves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_leaves (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_leaves") < 0)) __PYX_ERR(0, 697, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_leaves", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 697, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_102iter_leaves(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_102iter_leaves(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_leaves", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 697, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_104generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_leaves, __pyx_n_s_TreeNode_iter_leaves, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_104generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_leaves", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    case 2: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 697, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":704
 *           documentation.
 *         """
 *         for n in self.traverse(strategy="preorder", is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             if not is_leaf_fn:
 *                 if n.is_leaf():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_strategy, __pyx_n_s_preorder) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_leaf_fn, __pyx_cur_scope->__pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 704, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 704, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 704, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_n, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":705
 *         """
 *         for n in self.traverse(strategy="preorder", is_leaf_fn=is_leaf_fn):
 *             if not is_leaf_fn:             # <<<<<<<<<<<<<<
 *                 if n.is_leaf():
 *                     yield n
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_leaf_fn); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 705, __pyx_L1_error)
    __pyx_t_7 = ((!__pyx_t_6) != 0);
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":706
 *         for n in self.traverse(strategy="preorder", is_leaf_fn=is_leaf_fn):
 *             if not is_leaf_fn:
 *                 if n.is_leaf():             # <<<<<<<<<<<<<<
 *                     yield n
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_n, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {

        /* "ete4/coretype/tree.pyx":707
 *             if not is_leaf_fn:
 *                 if n.is_leaf():
 *                     yield n             # <<<<<<<<<<<<<<
 *             else:
 *                 if is_leaf_fn(n):
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
        __pyx_r = __pyx_cur_scope->__pyx_v_n;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L8_resume_from_yield:;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 707, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":706
 *         for n in self.traverse(strategy="preorder", is_leaf_fn=is_leaf_fn):
 *             if not is_leaf_fn:
 *                 if n.is_leaf():             # <<<<<<<<<<<<<<
 *                     yield n
 *             else:
 */
      }

      /* "ete4/coretype/tree.pyx":705
 *         """
 *         for n in self.traverse(strategy="preorder", is_leaf_fn=is_leaf_fn):
 *             if not is_leaf_fn:             # <<<<<<<<<<<<<<
 *                 if n.is_leaf():
 *                     yield n
 */
      goto __pyx_L6;
    }

    /* "ete4/coretype/tree.pyx":709
 *                     yield n
 *             else:
 *                 if is_leaf_fn(n):             # <<<<<<<<<<<<<<
 *                     yield n
 * 
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_is_leaf_fn; __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_8, __pyx_cur_scope->__pyx_v_n) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_n);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 709, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 709, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {

        /* "ete4/coretype/tree.pyx":710
 *             else:
 *                 if is_leaf_fn(n):
 *                     yield n             # <<<<<<<<<<<<<<
 * 
 *     def get_leaves(self, is_leaf_fn=None):
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
        __pyx_r = __pyx_cur_scope->__pyx_v_n;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __pyx_r;
        __pyx_L10_resume_from_yield:;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 710, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":709
 *                     yield n
 *             else:
 *                 if is_leaf_fn(n):             # <<<<<<<<<<<<<<
 *                     yield n
 * 
 */
      }
    }
    __pyx_L6:;

    /* "ete4/coretype/tree.pyx":704
 *           documentation.
 *         """
 *         for n in self.traverse(strategy="preorder", is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             if not is_leaf_fn:
 *                 if n.is_leaf():
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":697
 *             return []
 * 
 *     def iter_leaves(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over the leaves under this node.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("iter_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":712
 *                     yield n
 * 
 *     def get_leaves(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the list of terminal nodes (leaves) under this node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_106get_leaves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_105get_leaves[] = "\n        Returns the list of terminal nodes (leaves) under this node.\n\n        :argument None is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_106get_leaves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_leaves (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_leaves") < 0)) __PYX_ERR(0, 712, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_leaves", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 712, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_105get_leaves(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_105get_leaves(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_leaves", 0);

  /* "ete4/coretype/tree.pyx":719
 *           documentation.
 *         """
 *         return [n for n in self.iter_leaves(is_leaf_fn=is_leaf_fn)]             # <<<<<<<<<<<<<<
 * 
 *     def iter_leaf_names(self, is_leaf_fn=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 719, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 719, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 719, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 719, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_n))) __PYX_ERR(0, 719, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":712
 *                     yield n
 * 
 *     def get_leaves(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the list of terminal nodes (leaves) under this node.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_109generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":721
 *         return [n for n in self.iter_leaves(is_leaf_fn=is_leaf_fn)]
 * 
 *     def iter_leaf_names(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over the leaf names under this node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_108iter_leaf_names(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_107iter_leaf_names[] = "\n        Returns an iterator over the leaf names under this node.\n\n        :argument None is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_108iter_leaf_names(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_leaf_names (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_leaf_names") < 0)) __PYX_ERR(0, 721, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_leaf_names", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 721, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_leaf_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_107iter_leaf_names(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_107iter_leaf_names(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_leaf_names", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 721, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_109generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_leaf_names, __pyx_n_s_TreeNode_iter_leaf_names, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_leaf_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_109generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_leaf_names", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 721, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":728
 *           documentation.
 *         """
 *         for n in self.iter_leaves(is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             yield n.name
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_leaf_fn, __pyx_cur_scope->__pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 728, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_n, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":729
 *         """
 *         for n in self.iter_leaves(is_leaf_fn=is_leaf_fn):
 *             yield n.name             # <<<<<<<<<<<<<<
 * 
 *     def get_leaf_names(self, is_leaf_fn=None):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_n, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 729, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":728
 *           documentation.
 *         """
 *         for n in self.iter_leaves(is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             yield n.name
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":721
 *         return [n for n in self.iter_leaves(is_leaf_fn=is_leaf_fn)]
 * 
 *     def iter_leaf_names(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over the leaf names under this node.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_leaf_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":731
 *             yield n.name
 * 
 *     def get_leaf_names(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the list of terminal node names under the current
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_111get_leaf_names(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_110get_leaf_names[] = "\n        Returns the list of terminal node names under the current\n        node.\n\n        :argument None is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_111get_leaf_names(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_leaf_names (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_leaf_names") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_leaf_names", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_leaf_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_110get_leaf_names(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_110get_leaf_names(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_leaf_names", 0);

  /* "ete4/coretype/tree.pyx":739
 *           documentation.
 *         """
 *         return [name for name in self.iter_leaf_names(is_leaf_fn=is_leaf_fn)]             # <<<<<<<<<<<<<<
 * 
 *     def iter_descendants(self, strategy="levelorder", is_leaf_fn=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_leaf_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 739, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 739, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_name))) __PYX_ERR(0, 739, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":731
 *             yield n.name
 * 
 *     def get_leaf_names(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the list of terminal node names under the current
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_leaf_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_114generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":741
 *         return [name for name in self.iter_leaf_names(is_leaf_fn=is_leaf_fn)]
 * 
 *     def iter_descendants(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over all descendant nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_113iter_descendants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_112iter_descendants[] = "\n        Returns an iterator over all descendant nodes.\n\n        :argument None is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_113iter_descendants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategy = 0;
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_descendants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_n_s_levelorder);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_descendants") < 0)) __PYX_ERR(0, 741, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strategy = values[0];
    __pyx_v_is_leaf_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_descendants", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_112iter_descendants(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_strategy, __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_112iter_descendants(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_strategy, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_descendants", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 741, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_strategy = __pyx_v_strategy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_strategy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_strategy);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_114generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_descendants, __pyx_n_s_TreeNode_iter_descendants, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_114generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_descendants", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 741, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":748
 *           documentation.
 *         """
 *         for n in self.traverse(strategy=strategy, is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             if n is not self:
 *                 yield n
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_strategy, __pyx_cur_scope->__pyx_v_strategy) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_leaf_fn, __pyx_cur_scope->__pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 748, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_n, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":749
 *         """
 *         for n in self.traverse(strategy=strategy, is_leaf_fn=is_leaf_fn):
 *             if n is not self:             # <<<<<<<<<<<<<<
 *                 yield n
 * 
 */
    __pyx_t_6 = (__pyx_cur_scope->__pyx_v_n != ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":750
 *         for n in self.traverse(strategy=strategy, is_leaf_fn=is_leaf_fn):
 *             if n is not self:
 *                 yield n             # <<<<<<<<<<<<<<
 * 
 *     def get_descendants(self, strategy="levelorder", is_leaf_fn=None):
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
      __pyx_r = __pyx_cur_scope->__pyx_v_n;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 750, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":749
 *         """
 *         for n in self.traverse(strategy=strategy, is_leaf_fn=is_leaf_fn):
 *             if n is not self:             # <<<<<<<<<<<<<<
 *                 yield n
 * 
 */
    }

    /* "ete4/coretype/tree.pyx":748
 *           documentation.
 *         """
 *         for n in self.traverse(strategy=strategy, is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             if n is not self:
 *                 yield n
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":741
 *         return [name for name in self.iter_leaf_names(is_leaf_fn=is_leaf_fn)]
 * 
 *     def iter_descendants(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator over all descendant nodes.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":752
 *                 yield n
 * 
 *     def get_descendants(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of all (leaves and internal) descendant nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_116get_descendants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_115get_descendants[] = "\n        Returns a list of all (leaves and internal) descendant nodes.\n\n        :argument None is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_116get_descendants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategy = 0;
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_descendants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_n_s_levelorder);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_descendants") < 0)) __PYX_ERR(0, 752, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strategy = values[0];
    __pyx_v_is_leaf_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_descendants", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 752, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_115get_descendants(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_strategy, __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_115get_descendants(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_strategy, PyObject *__pyx_v_is_leaf_fn) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_descendants", 0);

  /* "ete4/coretype/tree.pyx":759
 *           documentation.
 *         """
 *         return [n for n in self.iter_descendants(strategy=strategy, \             # <<<<<<<<<<<<<<
 *                                                  is_leaf_fn=is_leaf_fn)]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_descendants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_strategy, __pyx_v_strategy) < 0) __PYX_ERR(0, 759, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":760
 *         """
 *         return [n for n in self.iter_descendants(strategy=strategy, \
 *                                                  is_leaf_fn=is_leaf_fn)]             # <<<<<<<<<<<<<<
 * 
 *     def traverse(self, strategy="levelorder", is_leaf_fn=None):
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 759, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":759
 *           documentation.
 *         """
 *         return [n for n in self.iter_descendants(strategy=strategy, \             # <<<<<<<<<<<<<<
 *                                                  is_leaf_fn=is_leaf_fn)]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 759, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 759, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_n))) __PYX_ERR(0, 759, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":752
 *                 yield n
 * 
 *     def get_descendants(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of all (leaves and internal) descendant nodes.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":762
 *                                                  is_leaf_fn=is_leaf_fn)]
 * 
 *     def traverse(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator to traverse the tree structure under this
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_118traverse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_117traverse[] = "\n        Returns an iterator to traverse the tree structure under this\n        node.\n\n        :argument \"levelorder\" strategy: set the way in which tree\n           will be traversed. Possible values are: \"preorder\" (first\n           parent and then children) 'postorder' (first children and\n           the parent) and \"levelorder\" (nodes are visited in order\n           from root to leaves)\n\n        :argument None is_leaf_fn: If supplied, ``is_leaf_fn``\n           function will be used to interrogate nodes about if they\n           are terminal or internal. ``is_leaf_fn`` function should\n           receive a node instance as first argument and return True\n           or False. Use this argument to traverse a tree by\n           dynamically collapsing internal nodes matching\n           ``is_leaf_fn``.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_118traverse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategy = 0;
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("traverse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_n_s_levelorder);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "traverse") < 0)) __PYX_ERR(0, 762, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strategy = values[0];
    __pyx_v_is_leaf_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("traverse", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 762, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.traverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_117traverse(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_strategy, __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_117traverse(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_strategy, PyObject *__pyx_v_is_leaf_fn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("traverse", 0);

  /* "ete4/coretype/tree.pyx":781
 *            ``is_leaf_fn``.
 *         """
 *         if strategy=="preorder":             # <<<<<<<<<<<<<<
 *             return self._iter_descendants_preorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="levelorder":
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_strategy, __pyx_n_s_preorder, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 781, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":782
 *         """
 *         if strategy=="preorder":
 *             return self._iter_descendants_preorder(is_leaf_fn=is_leaf_fn)             # <<<<<<<<<<<<<<
 *         elif strategy=="levelorder":
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_descendants_preorder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":781
 *            ``is_leaf_fn``.
 *         """
 *         if strategy=="preorder":             # <<<<<<<<<<<<<<
 *             return self._iter_descendants_preorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="levelorder":
 */
  }

  /* "ete4/coretype/tree.pyx":783
 *         if strategy=="preorder":
 *             return self._iter_descendants_preorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="levelorder":             # <<<<<<<<<<<<<<
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="postorder":
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_strategy, __pyx_n_s_levelorder, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 783, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":784
 *             return self._iter_descendants_preorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="levelorder":
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)             # <<<<<<<<<<<<<<
 *         elif strategy=="postorder":
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_descendants_levelorder); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":783
 *         if strategy=="preorder":
 *             return self._iter_descendants_preorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="levelorder":             # <<<<<<<<<<<<<<
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="postorder":
 */
  }

  /* "ete4/coretype/tree.pyx":785
 *         elif strategy=="levelorder":
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="postorder":             # <<<<<<<<<<<<<<
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_strategy, __pyx_n_s_postorder, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 785, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":786
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="postorder":
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)             # <<<<<<<<<<<<<<
 * 
 *     def iter_prepostorder(self, is_leaf_fn=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_descendants_postorder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":785
 *         elif strategy=="levelorder":
 *             return self._iter_descendants_levelorder(is_leaf_fn=is_leaf_fn)
 *         elif strategy=="postorder":             # <<<<<<<<<<<<<<
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":762
 *                                                  is_leaf_fn=is_leaf_fn)]
 * 
 *     def traverse(self, strategy="levelorder", is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an iterator to traverse the tree structure under this
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.traverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_121generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":788
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)
 * 
 *     def iter_prepostorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over all nodes in a tree yielding every node in both
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_120iter_prepostorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_119iter_prepostorder[] = "\n        Iterate over all nodes in a tree yielding every node in both\n        pre and post order. Each iteration returns a postorder flag\n        (True if node is being visited in postorder) and a node\n        instance.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_120iter_prepostorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_prepostorder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_prepostorder") < 0)) __PYX_ERR(0, 788, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_prepostorder", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 788, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_prepostorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_119iter_prepostorder(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_119iter_prepostorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_prepostorder", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 788, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_121generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_prepostorder, __pyx_n_s_TreeNode_iter_prepostorder, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_prepostorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_121generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_prepostorder", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L15_resume_from_yield;
    case 2: goto __pyx_L18_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 788, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":795
 *         instance.
 *         """
 *         to_visit = [self]             # <<<<<<<<<<<<<<
 *         if is_leaf_fn is not None:
 *             _leaf = is_leaf_fn
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_to_visit = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":796
 *         """
 *         to_visit = [self]
 *         if is_leaf_fn is not None:             # <<<<<<<<<<<<<<
 *             _leaf = is_leaf_fn
 *         else:
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_is_leaf_fn != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":797
 *         to_visit = [self]
 *         if is_leaf_fn is not None:
 *             _leaf = is_leaf_fn             # <<<<<<<<<<<<<<
 *         else:
 *             _leaf = self.__class__.is_leaf
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
    __pyx_cur_scope->__pyx_v__leaf = __pyx_cur_scope->__pyx_v_is_leaf_fn;

    /* "ete4/coretype/tree.pyx":796
 *         """
 *         to_visit = [self]
 *         if is_leaf_fn is not None:             # <<<<<<<<<<<<<<
 *             _leaf = is_leaf_fn
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ete4/coretype/tree.pyx":799
 *             _leaf = is_leaf_fn
 *         else:
 *             _leaf = self.__class__.is_leaf             # <<<<<<<<<<<<<<
 * 
 *         while to_visit:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v__leaf = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "ete4/coretype/tree.pyx":801
 *             _leaf = self.__class__.is_leaf
 * 
 *         while to_visit:             # <<<<<<<<<<<<<<
 *             node = to_visit.pop(-1)
 *             try:
 */
  while (1) {
    __pyx_t_3 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_to_visit) != 0);
    if (!__pyx_t_3) break;

    /* "ete4/coretype/tree.pyx":802
 * 
 *         while to_visit:
 *             node = to_visit.pop(-1)             # <<<<<<<<<<<<<<
 *             try:
 *                 node = node[1]
 */
    __pyx_t_4 = __Pyx_PyList_PopIndex(__pyx_cur_scope->__pyx_v_to_visit, __pyx_int_neg_1, -1L, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":803
 *         while to_visit:
 *             node = to_visit.pop(-1)
 *             try:             # <<<<<<<<<<<<<<
 *                 node = node[1]
 *             except TypeError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "ete4/coretype/tree.pyx":804
 *             node = to_visit.pop(-1)
 *             try:
 *                 node = node[1]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 # PREORDER ACTIONS
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_node, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_node);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":803
 *         while to_visit:
 *             node = to_visit.pop(-1)
 *             try:             # <<<<<<<<<<<<<<
 *                 node = node[1]
 *             except TypeError:
 */
      }

      /* "ete4/coretype/tree.pyx":813
 *             else:
 *                 #POSTORDER ACTIONS
 *                 yield (True, node)             # <<<<<<<<<<<<<<
 * 
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):
 */
      /*else:*/ {
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 813, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(Py_True);
        __Pyx_GIVEREF(Py_True);
        PyTuple_SET_ITEM(__pyx_t_4, 0, Py_True);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_node);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_node);
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_t_5);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
        __Pyx_XGIVEREF(__pyx_t_6);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
        __Pyx_XGIVEREF(__pyx_t_7);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L15_resume_from_yield:;
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_5);
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_7);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 813, __pyx_L9_except_error)
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":805
 *             try:
 *                 node = node[1]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 # PREORDER ACTIONS
 *                 yield (False, node)
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_prepostorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_9) < 0) __PYX_ERR(0, 805, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_9);

        /* "ete4/coretype/tree.pyx":807
 *             except TypeError:
 *                 # PREORDER ACTIONS
 *                 yield (False, node)             # <<<<<<<<<<<<<<
 *                 if not _leaf(node):
 *                     # ADD CHILDREN
 */
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 807, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(Py_False);
        __Pyx_GIVEREF(Py_False);
        PyTuple_SET_ITEM(__pyx_t_10, 0, Py_False);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_node);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_cur_scope->__pyx_v_node);
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_4);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
        __Pyx_XGIVEREF(__pyx_t_5);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
        __Pyx_XGIVEREF(__pyx_t_6);
        __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
        __Pyx_XGIVEREF(__pyx_t_7);
        __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
        __Pyx_XGIVEREF(__pyx_t_9);
        __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_SwapException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __pyx_r;
        __pyx_L18_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_5);
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
        __pyx_cur_scope->__pyx_t_3 = 0;
        __Pyx_XGOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
        __pyx_cur_scope->__pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_t_7);
        __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
        __pyx_cur_scope->__pyx_t_5 = 0;
        __Pyx_XGOTREF(__pyx_t_9);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 807, __pyx_L9_except_error)

        /* "ete4/coretype/tree.pyx":808
 *                 # PREORDER ACTIONS
 *                 yield (False, node)
 *                 if not _leaf(node):             # <<<<<<<<<<<<<<
 *                     # ADD CHILDREN
 *                     to_visit.extend(reversed(node.children + [[1, node]]))
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v__leaf);
        __pyx_t_11 = __pyx_cur_scope->__pyx_v__leaf; __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_cur_scope->__pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_cur_scope->__pyx_v_node);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 808, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 808, __pyx_L9_except_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_2 = ((!__pyx_t_3) != 0);
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":810
 *                 if not _leaf(node):
 *                     # ADD CHILDREN
 *                     to_visit.extend(reversed(node.children + [[1, node]]))             # <<<<<<<<<<<<<<
 *             else:
 *                 #POSTORDER ACTIONS
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 810, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 810, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyList_SET_ITEM(__pyx_t_11, 0, __pyx_int_1);
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_node);
          PyList_SET_ITEM(__pyx_t_11, 1, __pyx_cur_scope->__pyx_v_node);
          __pyx_t_12 = PyList_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 810, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11);
          PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 810, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 810, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __Pyx_PyList_Extend(__pyx_cur_scope->__pyx_v_to_visit, __pyx_t_12); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 810, __pyx_L9_except_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "ete4/coretype/tree.pyx":808
 *                 # PREORDER ACTIONS
 *                 yield (False, node)
 *                 if not _leaf(node):             # <<<<<<<<<<<<<<
 *                     # ADD CHILDREN
 *                     to_visit.extend(reversed(node.children + [[1, node]]))
 */
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L8_exception_handled;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "ete4/coretype/tree.pyx":803
 *         while to_visit:
 *             node = to_visit.pop(-1)
 *             try:             # <<<<<<<<<<<<<<
 *                 node = node[1]
 *             except TypeError:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L14_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":788
 *             return self._iter_descendants_postorder(is_leaf_fn=is_leaf_fn)
 * 
 *     def iter_prepostorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over all nodes in a tree yielding every node in both
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("iter_prepostorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_124generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":815
 *                 yield (True, node)
 * 
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         to_visit = [self]
 *         if is_leaf_fn is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_123_iter_descendants_postorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_123_iter_descendants_postorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_descendants_postorder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_iter_descendants_postorder") < 0)) __PYX_ERR(0, 815, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_iter_descendants_postorder", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 815, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_postorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_122_iter_descendants_postorder(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_122_iter_descendants_postorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_iter_descendants_postorder", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 815, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_124generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_descendants_postorder, __pyx_n_s_TreeNode__iter_descendants_posto, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_postorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_124generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_descendants_postorder", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L15_resume_from_yield;
    case 2: goto __pyx_L19_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 815, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":816
 * 
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):
 *         to_visit = [self]             # <<<<<<<<<<<<<<
 *         if is_leaf_fn is not None:
 *             _leaf = is_leaf_fn
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_to_visit = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":817
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):
 *         to_visit = [self]
 *         if is_leaf_fn is not None:             # <<<<<<<<<<<<<<
 *             _leaf = is_leaf_fn
 *         else:
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_is_leaf_fn != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":818
 *         to_visit = [self]
 *         if is_leaf_fn is not None:
 *             _leaf = is_leaf_fn             # <<<<<<<<<<<<<<
 *         else:
 *             _leaf = self.__class__.is_leaf
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
    __pyx_cur_scope->__pyx_v__leaf = __pyx_cur_scope->__pyx_v_is_leaf_fn;

    /* "ete4/coretype/tree.pyx":817
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):
 *         to_visit = [self]
 *         if is_leaf_fn is not None:             # <<<<<<<<<<<<<<
 *             _leaf = is_leaf_fn
 *         else:
 */
    goto __pyx_L4;
  }

  /* "ete4/coretype/tree.pyx":820
 *             _leaf = is_leaf_fn
 *         else:
 *             _leaf = self.__class__.is_leaf             # <<<<<<<<<<<<<<
 * 
 *         while to_visit:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v__leaf = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "ete4/coretype/tree.pyx":822
 *             _leaf = self.__class__.is_leaf
 * 
 *         while to_visit:             # <<<<<<<<<<<<<<
 *             node = to_visit.pop(-1)
 *             try:
 */
  while (1) {
    __pyx_t_3 = (PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_to_visit) != 0);
    if (!__pyx_t_3) break;

    /* "ete4/coretype/tree.pyx":823
 * 
 *         while to_visit:
 *             node = to_visit.pop(-1)             # <<<<<<<<<<<<<<
 *             try:
 *                 node = node[1]
 */
    __pyx_t_4 = __Pyx_PyList_PopIndex(__pyx_cur_scope->__pyx_v_to_visit, __pyx_int_neg_1, -1L, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":824
 *         while to_visit:
 *             node = to_visit.pop(-1)
 *             try:             # <<<<<<<<<<<<<<
 *                 node = node[1]
 *             except TypeError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "ete4/coretype/tree.pyx":825
 *             node = to_visit.pop(-1)
 *             try:
 *                 node = node[1]             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 # PREORDER ACTIONS
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_node, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 825, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_node);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":824
 *         while to_visit:
 *             node = to_visit.pop(-1)
 *             try:             # <<<<<<<<<<<<<<
 *                 node = node[1]
 *             except TypeError:
 */
      }

      /* "ete4/coretype/tree.pyx":835
 *             else:
 *                 #POSTORDER ACTIONS
 *                 yield node             # <<<<<<<<<<<<<<
 * 
 *     def _iter_descendants_levelorder(self, is_leaf_fn=None):
 */
      /*else:*/ {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
        __pyx_r = __pyx_cur_scope->__pyx_v_node;
        __Pyx_XGIVEREF(__pyx_t_5);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
        __Pyx_XGIVEREF(__pyx_t_6);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
        __Pyx_XGIVEREF(__pyx_t_7);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L15_resume_from_yield:;
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_5);
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_7);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 835, __pyx_L9_except_error)
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":826
 *             try:
 *                 node = node[1]
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 # PREORDER ACTIONS
 *                 if not _leaf(node):
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_postorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_9) < 0) __PYX_ERR(0, 826, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_9);

        /* "ete4/coretype/tree.pyx":828
 *             except TypeError:
 *                 # PREORDER ACTIONS
 *                 if not _leaf(node):             # <<<<<<<<<<<<<<
 *                     # ADD CHILDREN
 *                     to_visit.extend(reversed(node.children + [[1, node]]))
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v__leaf);
        __pyx_t_11 = __pyx_cur_scope->__pyx_v__leaf; __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_cur_scope->__pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_cur_scope->__pyx_v_node);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 828, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 828, __pyx_L9_except_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_2 = ((!__pyx_t_3) != 0);
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":830
 *                 if not _leaf(node):
 *                     # ADD CHILDREN
 *                     to_visit.extend(reversed(node.children + [[1, node]]))             # <<<<<<<<<<<<<<
 *                 else:
 *                     yield node
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 830, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 830, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyList_SET_ITEM(__pyx_t_11, 0, __pyx_int_1);
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_node);
          PyList_SET_ITEM(__pyx_t_11, 1, __pyx_cur_scope->__pyx_v_node);
          __pyx_t_12 = PyList_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 830, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11);
          PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 830, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 830, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __Pyx_PyList_Extend(__pyx_cur_scope->__pyx_v_to_visit, __pyx_t_12); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 830, __pyx_L9_except_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "ete4/coretype/tree.pyx":828
 *             except TypeError:
 *                 # PREORDER ACTIONS
 *                 if not _leaf(node):             # <<<<<<<<<<<<<<
 *                     # ADD CHILDREN
 *                     to_visit.extend(reversed(node.children + [[1, node]]))
 */
          goto __pyx_L18;
        }

        /* "ete4/coretype/tree.pyx":832
 *                     to_visit.extend(reversed(node.children + [[1, node]]))
 *                 else:
 *                     yield node             # <<<<<<<<<<<<<<
 *             else:
 *                 #POSTORDER ACTIONS
 */
        /*else*/ {
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
          __pyx_r = __pyx_cur_scope->__pyx_v_node;
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_7);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, yielding value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L19_resume_from_yield:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_7);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 832, __pyx_L9_except_error)
        }
        __pyx_L18:;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L8_exception_handled;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "ete4/coretype/tree.pyx":824
 *         while to_visit:
 *             node = to_visit.pop(-1)
 *             try:             # <<<<<<<<<<<<<<
 *                 node = node[1]
 *             except TypeError:
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L14_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":815
 *                 yield (True, node)
 * 
 *     def _iter_descendants_postorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         to_visit = [self]
 *         if is_leaf_fn is not None:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_iter_descendants_postorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_127generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":837
 *                 yield node
 * 
 *     def _iter_descendants_levelorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over all desdecendant nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_126_iter_descendants_levelorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_125_iter_descendants_levelorder[] = "\n        Iterate over all desdecendant nodes.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_126_iter_descendants_levelorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_descendants_levelorder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_iter_descendants_levelorder") < 0)) __PYX_ERR(0, 837, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_iter_descendants_levelorder", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 837, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_levelorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_125_iter_descendants_levelorder(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_125_iter_descendants_levelorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_iter_descendants_levelorder", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 837, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_127generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_descendants_levelorder, __pyx_n_s_TreeNode__iter_descendants_level, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_levelorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_127generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_descendants_levelorder", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 837, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":841
 *         Iterate over all desdecendant nodes.
 *         """
 *         tovisit = deque([self])             # <<<<<<<<<<<<<<
 *         while len(tovisit)>0:
 *             node = tovisit.popleft()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_tovisit = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":842
 *         """
 *         tovisit = deque([self])
 *         while len(tovisit)>0:             # <<<<<<<<<<<<<<
 *             node = tovisit.popleft()
 *             yield node
 */
  while (1) {
    __pyx_t_5 = PyObject_Length(__pyx_cur_scope->__pyx_v_tovisit); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 842, __pyx_L1_error)
    __pyx_t_6 = ((__pyx_t_5 > 0) != 0);
    if (!__pyx_t_6) break;

    /* "ete4/coretype/tree.pyx":843
 *         tovisit = deque([self])
 *         while len(tovisit)>0:
 *             node = tovisit.popleft()             # <<<<<<<<<<<<<<
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tovisit, __pyx_n_s_popleft); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":844
 *         while len(tovisit)>0:
 *             node = tovisit.popleft()
 *             yield node             # <<<<<<<<<<<<<<
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 tovisit.extend(node.children)
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
    __pyx_r = __pyx_cur_scope->__pyx_v_node;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 844, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":845
 *             node = tovisit.popleft()
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):             # <<<<<<<<<<<<<<
 *                 tovisit.extend(node.children)
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_leaf_fn); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
    __pyx_t_8 = ((!__pyx_t_7) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_6 = __pyx_t_8;
      goto __pyx_L8_bool_binop_done;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_is_leaf_fn; __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = ((!__pyx_t_8) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":846
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 tovisit.extend(node.children)             # <<<<<<<<<<<<<<
 * 
 *     def _iter_descendants_preorder(self, is_leaf_fn=None):
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tovisit, __pyx_n_s_extend); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":845
 *             node = tovisit.popleft()
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):             # <<<<<<<<<<<<<<
 *                 tovisit.extend(node.children)
 * 
 */
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":837
 *                 yield node
 * 
 *     def _iter_descendants_levelorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over all desdecendant nodes.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_iter_descendants_levelorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_130generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":848
 *                 tovisit.extend(node.children)
 * 
 *     def _iter_descendants_preorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterator over all descendant nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_129_iter_descendants_preorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_128_iter_descendants_preorder[] = "\n        Iterator over all descendant nodes.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_129_iter_descendants_preorder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_descendants_preorder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_iter_descendants_preorder") < 0)) __PYX_ERR(0, 848, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_is_leaf_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_iter_descendants_preorder", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 848, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_preorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_128_iter_descendants_preorder(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_128_iter_descendants_preorder(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_is_leaf_fn) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_iter_descendants_preorder", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 848, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_is_leaf_fn = __pyx_v_is_leaf_fn;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_130generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_descendants_preorder, __pyx_n_s_TreeNode__iter_descendants_preor, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_preorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_130generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_descendants_preorder", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 848, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":852
 *         Iterator over all descendant nodes.
 *         """
 *         to_visit = deque()             # <<<<<<<<<<<<<<
 *         node = self
 *         while node is not None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_to_visit = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":853
 *         """
 *         to_visit = deque()
 *         node = self             # <<<<<<<<<<<<<<
 *         while node is not None:
 *             yield node
 */
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __pyx_cur_scope->__pyx_v_node = ((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "ete4/coretype/tree.pyx":854
 *         to_visit = deque()
 *         node = self
 *         while node is not None:             # <<<<<<<<<<<<<<
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):
 */
  while (1) {
    __pyx_t_4 = (__pyx_cur_scope->__pyx_v_node != Py_None);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (!__pyx_t_5) break;

    /* "ete4/coretype/tree.pyx":855
 *         node = self
 *         while node is not None:
 *             yield node             # <<<<<<<<<<<<<<
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 to_visit.extendleft(reversed(node.children))
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_node);
    __pyx_r = __pyx_cur_scope->__pyx_v_node;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 855, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":856
 *         while node is not None:
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):             # <<<<<<<<<<<<<<
 *                 to_visit.extendleft(reversed(node.children))
 *             try:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_leaf_fn); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 856, __pyx_L1_error)
    __pyx_t_6 = ((!__pyx_t_4) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L8_bool_binop_done;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_leaf_fn);
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_is_leaf_fn; __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_node);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 856, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = ((!__pyx_t_6) != 0);
    __pyx_t_5 = __pyx_t_4;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_5) {

      /* "ete4/coretype/tree.pyx":857
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 to_visit.extendleft(reversed(node.children))             # <<<<<<<<<<<<<<
 *             try:
 *                 node = to_visit.popleft()
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_to_visit, __pyx_n_s_extendleft); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":856
 *         while node is not None:
 *             yield node
 *             if not is_leaf_fn or not is_leaf_fn(node):             # <<<<<<<<<<<<<<
 *                 to_visit.extendleft(reversed(node.children))
 *             try:
 */
    }

    /* "ete4/coretype/tree.pyx":858
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 to_visit.extendleft(reversed(node.children))
 *             try:             # <<<<<<<<<<<<<<
 *                 node = to_visit.popleft()
 *             except:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "ete4/coretype/tree.pyx":859
 *                 to_visit.extendleft(reversed(node.children))
 *             try:
 *                 node = to_visit.popleft()             # <<<<<<<<<<<<<<
 *             except:
 *                 node = None
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_to_visit, __pyx_n_s_popleft); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_node);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "ete4/coretype/tree.pyx":858
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 to_visit.extendleft(reversed(node.children))
 *             try:             # <<<<<<<<<<<<<<
 *                 node = to_visit.popleft()
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L17_try_end;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":860
 *             try:
 *                 node = to_visit.popleft()
 *             except:             # <<<<<<<<<<<<<<
 *                 node = None
 * 
 */
      /*except:*/ {
        __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._iter_descendants_preorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) __PYX_ERR(0, 860, __pyx_L12_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_7);

        /* "ete4/coretype/tree.pyx":861
 *                 node = to_visit.popleft()
 *             except:
 *                 node = None             # <<<<<<<<<<<<<<
 * 
 *     def iter_ancestors(self):
 */
        __Pyx_INCREF(Py_None);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_node);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_node, Py_None);
        __Pyx_GIVEREF(Py_None);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L11_exception_handled;
      }
      __pyx_L12_except_error:;

      /* "ete4/coretype/tree.pyx":858
 *             if not is_leaf_fn or not is_leaf_fn(node):
 *                 to_visit.extendleft(reversed(node.children))
 *             try:             # <<<<<<<<<<<<<<
 *                 node = to_visit.popleft()
 *             except:
 */
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L11_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_L17_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":848
 *                 tovisit.extend(node.children)
 * 
 *     def _iter_descendants_preorder(self, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Iterator over all descendant nodes.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_iter_descendants_preorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_133generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":863
 *                 node = None
 * 
 *     def iter_ancestors(self):             # <<<<<<<<<<<<<<
 *         '''versionadded: 2.2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_132iter_ancestors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_131iter_ancestors[] = "versionadded: 2.2\n\n        Iterates over the list of all ancestor nodes from current node\n        to the current tree root.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_132iter_ancestors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_ancestors (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_131iter_ancestors(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_131iter_ancestors(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_ancestors", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 863, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_133generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_ancestors, __pyx_n_s_TreeNode_iter_ancestors, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_ancestors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_133generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_ancestors", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 863, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":870
 * 
 *         '''
 *         node = self             # <<<<<<<<<<<<<<
 *         while node.up is not None:
 *             yield node.up
 */
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __pyx_cur_scope->__pyx_v_node = ((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "ete4/coretype/tree.pyx":871
 *         '''
 *         node = self
 *         while node.up is not None:             # <<<<<<<<<<<<<<
 *             yield node.up
 *             node = node.up
 */
  while (1) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) break;

    /* "ete4/coretype/tree.pyx":872
 *         node = self
 *         while node.up is not None:
 *             yield node.up             # <<<<<<<<<<<<<<
 *             node = node.up
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 872, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":873
 *         while node.up is not None:
 *             yield node.up
 *             node = node.up             # <<<<<<<<<<<<<<
 * 
 *     def get_ancestors(self):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_node);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_node, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":863
 *                 node = None
 * 
 *     def iter_ancestors(self):             # <<<<<<<<<<<<<<
 *         '''versionadded: 2.2
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("iter_ancestors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":875
 *             node = node.up
 * 
 *     def get_ancestors(self):             # <<<<<<<<<<<<<<
 *         '''versionadded: 2.2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_135get_ancestors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_134get_ancestors[] = "versionadded: 2.2\n\n        Returns the list of all ancestor nodes from current node to\n        the current tree root.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_135get_ancestors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ancestors (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_134get_ancestors(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_134get_ancestors(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ancestors", 0);

  /* "ete4/coretype/tree.pyx":882
 * 
 *         '''
 *         return [n for n in self.iter_ancestors()]             # <<<<<<<<<<<<<<
 * 
 *     def describe(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_ancestors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 882, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 882, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 882, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 882, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_n))) __PYX_ERR(0, 882, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":875
 *             node = node.up
 * 
 *     def get_ancestors(self):             # <<<<<<<<<<<<<<
 *         '''versionadded: 2.2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_ancestors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":884
 *         return [n for n in self.iter_ancestors()]
 * 
 *     def describe(self):             # <<<<<<<<<<<<<<
 *         """
 *         Prints general information about this node and its
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_137describe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_136describe[] = "\n        Prints general information about this node and its\n        connections.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_137describe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("describe (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_136describe(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_136describe(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_rooting = NULL;
  PyObject *__pyx_v_max_node = NULL;
  PyObject *__pyx_v_max_dist = NULL;
  PyObject *__pyx_v_cached_content = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("describe", 0);

  /* "ete4/coretype/tree.pyx":889
 *         connections.
 *         """
 *         if len(self.get_tree_root().children)==2:             # <<<<<<<<<<<<<<
 *             rooting = "Yes"
 *         elif len(self.get_tree_root().children)>2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_tree_root); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((__pyx_t_4 == 2) != 0);
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":890
 *         """
 *         if len(self.get_tree_root().children)==2:
 *             rooting = "Yes"             # <<<<<<<<<<<<<<
 *         elif len(self.get_tree_root().children)>2:
 *             rooting = "No"
 */
    __Pyx_INCREF(__pyx_n_s_Yes);
    __pyx_v_rooting = __pyx_n_s_Yes;

    /* "ete4/coretype/tree.pyx":889
 *         connections.
 *         """
 *         if len(self.get_tree_root().children)==2:             # <<<<<<<<<<<<<<
 *             rooting = "Yes"
 *         elif len(self.get_tree_root().children)>2:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":891
 *         if len(self.get_tree_root().children)==2:
 *             rooting = "Yes"
 *         elif len(self.get_tree_root().children)>2:             # <<<<<<<<<<<<<<
 *             rooting = "No"
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_tree_root); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((__pyx_t_4 > 2) != 0);
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":892
 *             rooting = "Yes"
 *         elif len(self.get_tree_root().children)>2:
 *             rooting = "No"             # <<<<<<<<<<<<<<
 *         else:
 *             rooting = "No children"
 */
    __Pyx_INCREF(__pyx_n_s_No);
    __pyx_v_rooting = __pyx_n_s_No;

    /* "ete4/coretype/tree.pyx":891
 *         if len(self.get_tree_root().children)==2:
 *             rooting = "Yes"
 *         elif len(self.get_tree_root().children)>2:             # <<<<<<<<<<<<<<
 *             rooting = "No"
 *         else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":894
 *             rooting = "No"
 *         else:
 *             rooting = "No children"             # <<<<<<<<<<<<<<
 *         max_node, max_dist = self.get_farthest_leaf()
 *         cached_content = self.get_cached_content()
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_s_No_children);
    __pyx_v_rooting = __pyx_kp_s_No_children;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":895
 *         else:
 *             rooting = "No children"
 *         max_node, max_dist = self.get_farthest_leaf()             # <<<<<<<<<<<<<<
 *         cached_content = self.get_cached_content()
 *         print("Number of leaf nodes:\t%d" % len(cached_content[self]))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_farthest_leaf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 895, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 895, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_max_node = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_max_dist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":896
 *             rooting = "No children"
 *         max_node, max_dist = self.get_farthest_leaf()
 *         cached_content = self.get_cached_content()             # <<<<<<<<<<<<<<
 *         print("Number of leaf nodes:\t%d" % len(cached_content[self]))
 *         print("Total number of nodes:\t%d" % len(cached_content))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cached_content = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":897
 *         max_node, max_dist = self.get_farthest_leaf()
 *         cached_content = self.get_cached_content()
 *         print("Number of leaf nodes:\t%d" % len(cached_content[self]))             # <<<<<<<<<<<<<<
 *         print("Total number of nodes:\t%d" % len(cached_content))
 *         print("Rooted:\t%s" %rooting)
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_cached_content, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Number_of_leaf_nodes_d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":898
 *         cached_content = self.get_cached_content()
 *         print("Number of leaf nodes:\t%d" % len(cached_content[self]))
 *         print("Total number of nodes:\t%d" % len(cached_content))             # <<<<<<<<<<<<<<
 *         print("Rooted:\t%s" %rooting)
 *         print("Most distant node:\t%s" %max_node.name)
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_cached_content); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 898, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Total_number_of_nodes_d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":899
 *         print("Number of leaf nodes:\t%d" % len(cached_content[self]))
 *         print("Total number of nodes:\t%d" % len(cached_content))
 *         print("Rooted:\t%s" %rooting)             # <<<<<<<<<<<<<<
 *         print("Most distant node:\t%s" %max_node.name)
 *         print("Max. distance:\t%f" %max_dist)
 */
  __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Rooted_s, __pyx_v_rooting); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":900
 *         print("Total number of nodes:\t%d" % len(cached_content))
 *         print("Rooted:\t%s" %rooting)
 *         print("Most distant node:\t%s" %max_node.name)             # <<<<<<<<<<<<<<
 *         print("Max. distance:\t%f" %max_dist)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_max_node, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Most_distant_node_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":901
 *         print("Rooted:\t%s" %rooting)
 *         print("Most distant node:\t%s" %max_node.name)
 *         print("Max. distance:\t%f" %max_dist)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,
 */
  __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Max_distance_f, __pyx_v_max_dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":884
 *         return [n for n in self.iter_ancestors()]
 * 
 *     def describe(self):             # <<<<<<<<<<<<<<
 *         """
 *         Prints general information about this node and its
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.describe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rooting);
  __Pyx_XDECREF(__pyx_v_max_node);
  __Pyx_XDECREF(__pyx_v_max_dist);
  __Pyx_XDECREF(__pyx_v_cached_content);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":903
 *         print("Max. distance:\t%f" %max_dist)
 * 
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,             # <<<<<<<<<<<<<<
 *               format_root_node=False, dist_formatter=None, support_formatter=None,
 *               name_formatter=None, quoted_node_names=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_139write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_138write[] = "\n        Returns the newick representation of current node. Several\n        arguments control the way in which extra data is shown for\n        every node:\n\n        :argument properties: a list of feature names to be exported\n          using the Extended Newick Format (i.e. properties=[\"name\",\n          \"dist\"]). Use an empty list to export all available properties\n          in each node (properties=[])\n\n        :argument outfile: writes the output to a given file\n\n        :argument format: defines the newick standard used to encode the\n          tree. See tutorial for details.\n\n        :argument False format_root_node: If True, it allows properties\n          and branch information from root node to be exported as a\n          part of the newick text string. For newick compatibility\n          reasons, this is False by default.\n\n        :argument is_leaf_fn: See :func:`TreeNode.traverse` for\n          documentation.\n\n        **Example:**\n\n        ::\n\n             t.write(properties=[\"species\",\"name\"], format=1, outfile=\"mytree.nwx\")\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_139write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_properties = 0;
  PyObject *__pyx_v_outfile = 0;
  PyObject *__pyx_v_format = 0;
  CYTHON_UNUSED PyObject *__pyx_v_is_leaf_fn = 0;
  CYTHON_UNUSED PyObject *__pyx_v_format_root_node = 0;
  PyObject *__pyx_v_dist_formatter = 0;
  PyObject *__pyx_v_support_formatter = 0;
  PyObject *__pyx_v_name_formatter = 0;
  PyObject *__pyx_v_quoted_node_names = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_properties,&__pyx_n_s_outfile,&__pyx_n_s_format,&__pyx_n_s_is_leaf_fn,&__pyx_n_s_format_root_node,&__pyx_n_s_dist_formatter,&__pyx_n_s_support_formatter,&__pyx_n_s_name_formatter,&__pyx_n_s_quoted_node_names,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[0] = __pyx_k__8;
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)Py_None);

    /* "ete4/coretype/tree.pyx":904
 * 
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,
 *               format_root_node=False, dist_formatter=None, support_formatter=None,             # <<<<<<<<<<<<<<
 *               name_formatter=None, quoted_node_names=False):
 *         """
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);

    /* "ete4/coretype/tree.pyx":905
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,
 *               format_root_node=False, dist_formatter=None, support_formatter=None,
 *               name_formatter=None, quoted_node_names=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the newick representation of current node. Several
 */
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_properties);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outfile);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format_root_node);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dist_formatter);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_support_formatter);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name_formatter);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quoted_node_names);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(0, 903, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_properties = values[0];
    __pyx_v_outfile = values[1];
    __pyx_v_format = values[2];
    __pyx_v_is_leaf_fn = values[3];
    __pyx_v_format_root_node = values[4];
    __pyx_v_dist_formatter = values[5];
    __pyx_v_support_formatter = values[6];
    __pyx_v_name_formatter = values[7];
    __pyx_v_quoted_node_names = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 0, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_138write(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_properties, __pyx_v_outfile, __pyx_v_format, __pyx_v_is_leaf_fn, __pyx_v_format_root_node, __pyx_v_dist_formatter, __pyx_v_support_formatter, __pyx_v_name_formatter, __pyx_v_quoted_node_names);

  /* "ete4/coretype/tree.pyx":903
 *         print("Max. distance:\t%f" %max_dist)
 * 
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,             # <<<<<<<<<<<<<<
 *               format_root_node=False, dist_formatter=None, support_formatter=None,
 *               name_formatter=None, quoted_node_names=False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_138write(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_properties, PyObject *__pyx_v_outfile, PyObject *__pyx_v_format, CYTHON_UNUSED PyObject *__pyx_v_is_leaf_fn, CYTHON_UNUSED PyObject *__pyx_v_format_root_node, PyObject *__pyx_v_dist_formatter, PyObject *__pyx_v_support_formatter, PyObject *__pyx_v_name_formatter, PyObject *__pyx_v_quoted_node_names) {
  PyObject *__pyx_v_set_formatters = NULL;
  PyObject *__pyx_v_write_newick = NULL;
  PyObject *__pyx_v_nw = NULL;
  PyObject *__pyx_v_OUT = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "ete4/coretype/tree.pyx":937
 *         """
 * 
 *         from ete4.parser.newick import set_formatters, write_newick             # <<<<<<<<<<<<<<
 *         # Set dist, support and name formatters
 *         set_formatters(dist_formatter=dist_formatter,
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_set_formatters);
  __Pyx_GIVEREF(__pyx_n_s_set_formatters);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_set_formatters);
  __Pyx_INCREF(__pyx_n_s_write_newick);
  __Pyx_GIVEREF(__pyx_n_s_write_newick);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_write_newick);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ete4_parser_newick, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_set_formatters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_set_formatters = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_write_newick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_write_newick = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":939
 *         from ete4.parser.newick import set_formatters, write_newick
 *         # Set dist, support and name formatters
 *         set_formatters(dist_formatter=dist_formatter,             # <<<<<<<<<<<<<<
 *                        support_formatter=support_formatter,
 *                        name_formatter=name_formatter)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dist_formatter, __pyx_v_dist_formatter) < 0) __PYX_ERR(0, 939, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":940
 *         # Set dist, support and name formatters
 *         set_formatters(dist_formatter=dist_formatter,
 *                        support_formatter=support_formatter,             # <<<<<<<<<<<<<<
 *                        name_formatter=name_formatter)
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_support_formatter, __pyx_v_support_formatter) < 0) __PYX_ERR(0, 939, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":941
 *         set_formatters(dist_formatter=dist_formatter,
 *                        support_formatter=support_formatter,
 *                        name_formatter=name_formatter)             # <<<<<<<<<<<<<<
 * 
 *         nw = write_newick(self, format=format, properties=properties,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_name_formatter, __pyx_v_name_formatter) < 0) __PYX_ERR(0, 939, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":939
 *         from ete4.parser.newick import set_formatters, write_newick
 *         # Set dist, support and name formatters
 *         set_formatters(dist_formatter=dist_formatter,             # <<<<<<<<<<<<<<
 *                        support_formatter=support_formatter,
 *                        name_formatter=name_formatter)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_set_formatters, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":943
 *                        name_formatter=name_formatter)
 * 
 *         nw = write_newick(self, format=format, properties=properties,             # <<<<<<<<<<<<<<
 *                 quoted_names=quoted_node_names)
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_format, __pyx_v_format) < 0) __PYX_ERR(0, 943, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_properties, __pyx_v_properties) < 0) __PYX_ERR(0, 943, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":944
 * 
 *         nw = write_newick(self, format=format, properties=properties,
 *                 quoted_names=quoted_node_names)             # <<<<<<<<<<<<<<
 * 
 *         if outfile is not None:
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_quoted_names, __pyx_v_quoted_node_names) < 0) __PYX_ERR(0, 943, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":943
 *                        name_formatter=name_formatter)
 * 
 *         nw = write_newick(self, format=format, properties=properties,             # <<<<<<<<<<<<<<
 *                 quoted_names=quoted_node_names)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_write_newick, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nw = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":946
 *                 quoted_names=quoted_node_names)
 * 
 *         if outfile is not None:             # <<<<<<<<<<<<<<
 *             with open(outfile, "w") as OUT:
 *                 OUT.write(nw)
 */
  __pyx_t_4 = (__pyx_v_outfile != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":947
 * 
 *         if outfile is not None:
 *             with open(outfile, "w") as OUT:             # <<<<<<<<<<<<<<
 *                 OUT.write(nw)
 *         else:
 */
    /*with:*/ {
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_outfile);
      __Pyx_GIVEREF(__pyx_v_outfile);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_outfile);
      __Pyx_INCREF(__pyx_n_s_w);
      __Pyx_GIVEREF(__pyx_n_s_w);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_w);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 947, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          /*try:*/ {
            __pyx_v_OUT = __pyx_t_1;
            __pyx_t_1 = 0;

            /* "ete4/coretype/tree.pyx":948
 *         if outfile is not None:
 *             with open(outfile, "w") as OUT:
 *                 OUT.write(nw)             # <<<<<<<<<<<<<<
 *         else:
 *             return nw
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_OUT, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_nw) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_nw);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ete4/coretype/tree.pyx":947
 * 
 *         if outfile is not None:
 *             with open(outfile, "w") as OUT:             # <<<<<<<<<<<<<<
 *                 OUT.write(nw)
 *         else:
 */
          }
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L13_try_end;
          __pyx_L8_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 947, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_7 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 947, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_5 < 0) __PYX_ERR(0, 947, __pyx_L10_except_error)
            __pyx_t_4 = ((!(__pyx_t_5 != 0)) != 0);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_2, __pyx_t_3);
              __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
              __PYX_ERR(0, 947, __pyx_L10_except_error)
            }
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          goto __pyx_L1_error;
          __pyx_L9_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          __pyx_L13_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_6) {
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, NULL);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 947, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
      goto __pyx_L17;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L1_error;
      __pyx_L17:;
    }

    /* "ete4/coretype/tree.pyx":946
 *                 quoted_names=quoted_node_names)
 * 
 *         if outfile is not None:             # <<<<<<<<<<<<<<
 *             with open(outfile, "w") as OUT:
 *                 OUT.write(nw)
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":950
 *                 OUT.write(nw)
 *         else:
 *             return nw             # <<<<<<<<<<<<<<
 * 
 *     def get_tree_root(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_nw);
    __pyx_r = __pyx_v_nw;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":903
 *         print("Max. distance:\t%f" %max_dist)
 * 
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,             # <<<<<<<<<<<<<<
 *               format_root_node=False, dist_formatter=None, support_formatter=None,
 *               name_formatter=None, quoted_node_names=False):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_set_formatters);
  __Pyx_XDECREF(__pyx_v_write_newick);
  __Pyx_XDECREF(__pyx_v_nw);
  __Pyx_XDECREF(__pyx_v_OUT);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":952
 *             return nw
 * 
 *     def get_tree_root(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the absolute root node of current tree structure.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_141get_tree_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_140get_tree_root[] = "\n        Returns the absolute root node of current tree structure.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_141get_tree_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tree_root (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_140get_tree_root(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_140get_tree_root(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tree_root", 0);

  /* "ete4/coretype/tree.pyx":956
 *         Returns the absolute root node of current tree structure.
 *         """
 *         root = self             # <<<<<<<<<<<<<<
 *         while root.up is not None:
 *             root = root.up
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_v_root = ((PyObject *)__pyx_v_self);

  /* "ete4/coretype/tree.pyx":957
 *         """
 *         root = self
 *         while root.up is not None:             # <<<<<<<<<<<<<<
 *             root = root.up
 *         return root
 */
  while (1) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_root, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) break;

    /* "ete4/coretype/tree.pyx":958
 *         root = self
 *         while root.up is not None:
 *             root = root.up             # <<<<<<<<<<<<<<
 *         return root
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_root, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_root, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "ete4/coretype/tree.pyx":959
 *         while root.up is not None:
 *             root = root.up
 *         return root             # <<<<<<<<<<<<<<
 * 
 *     def get_common_ancestor(self, *target_nodes, **kargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_root);
  __pyx_r = __pyx_v_root;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":952
 *             return nw
 * 
 *     def get_tree_root(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the absolute root node of current tree structure.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_tree_root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":961
 *         return root
 * 
 *     def get_common_ancestor(self, *target_nodes, **kargs):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the first common ancestor between this node and a given
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_143get_common_ancestor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_142get_common_ancestor[] = "\n        Returns the first common ancestor between this node and a given\n        list of 'target_nodes'.\n\n        **Examples:**\n\n        ::\n\n          t = tree.Tree(\"(((A:0.1, B:0.01):0.001, C:0.0001):1.0[&&NHX:name=common], (D:0.00001):0.000001):2.0[&&NHX:name=root];\")\n          A = t.get_descendants_by_name(\"A\")[0]\n          C = t.get_descendants_by_name(\"C\")[0]\n          common =  A.get_common_ancestor(C)\n          print common.name\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_143get_common_ancestor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_target_nodes = 0;
  PyObject *__pyx_v_kargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_common_ancestor (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_common_ancestor", 1))) return NULL;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_target_nodes = __pyx_args;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_142get_common_ancestor(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_target_nodes, __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_target_nodes);
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_142get_common_ancestor(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_target_nodes, PyObject *__pyx_v_kargs) {
  PyObject *__pyx_v_get_path = NULL;
  PyObject *__pyx_v_n2path = NULL;
  PyObject *__pyx_v_reference = NULL;
  PyObject *__pyx_v_ref_node = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_current = NULL;
  PyObject *__pyx_v_common = NULL;
  int __pyx_v_broken;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_common_ancestor", 0);
  __Pyx_INCREF(__pyx_v_target_nodes);

  /* "ete4/coretype/tree.pyx":978
 *         """
 * 
 *         get_path = kargs.get("get_path", False)             # <<<<<<<<<<<<<<
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kargs, __pyx_n_s_get_path, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_get_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":980
 *         get_path = kargs.get("get_path", False)
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \             # <<<<<<<<<<<<<<
 *                 in set([set, tuple, list, frozenset]):
 *             target_nodes = target_nodes[0]
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_target_nodes); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 == 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "ete4/coretype/tree.pyx":981
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \
 *                 in set([set, tuple, list, frozenset]):             # <<<<<<<<<<<<<<
 *             target_nodes = target_nodes[0]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_target_nodes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "ete4/coretype/tree.pyx":980
 *         get_path = kargs.get("get_path", False)
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \             # <<<<<<<<<<<<<<
 *                 in set([set, tuple, list, frozenset]):
 *             target_nodes = target_nodes[0]
 */
  __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PySet_Add(__pyx_t_5, ((PyObject *)(&PySet_Type))) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  if (PySet_Add(__pyx_t_5, ((PyObject *)(&PyTuple_Type))) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  if (PySet_Add(__pyx_t_5, ((PyObject *)(&PyList_Type))) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  if (PySet_Add(__pyx_t_5, ((PyObject *)(&PyFrozenSet_Type))) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  __pyx_t_4 = (__Pyx_PySet_ContainsTF(((PyObject *)Py_TYPE(__pyx_t_1)), __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "ete4/coretype/tree.pyx":981
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \
 *                 in set([set, tuple, list, frozenset]):             # <<<<<<<<<<<<<<
 *             target_nodes = target_nodes[0]
 * 
 */
  __pyx_t_6 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;

  /* "ete4/coretype/tree.pyx":980
 *         get_path = kargs.get("get_path", False)
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \             # <<<<<<<<<<<<<<
 *                 in set([set, tuple, list, frozenset]):
 *             target_nodes = target_nodes[0]
 */
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":982
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \
 *                 in set([set, tuple, list, frozenset]):
 *             target_nodes = target_nodes[0]             # <<<<<<<<<<<<<<
 * 
 *         # Convert node names into node instances
 */
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_target_nodes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_target_nodes, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "ete4/coretype/tree.pyx":980
 *         get_path = kargs.get("get_path", False)
 * 
 *         if len(target_nodes) == 1 and type(target_nodes[0]) \             # <<<<<<<<<<<<<<
 *                 in set([set, tuple, list, frozenset]):
 *             target_nodes = target_nodes[0]
 */
  }

  /* "ete4/coretype/tree.pyx":985
 * 
 *         # Convert node names into node instances
 *         target_nodes = _translate_nodes(self, *target_nodes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_translate_nodes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_7 = __Pyx_PySequence_Tuple(__pyx_v_target_nodes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyNumber_Add(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_target_nodes, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":988
 * 
 * 
 *         if type(target_nodes) != list:             # <<<<<<<<<<<<<<
 *             # If only one node is provided and is the same as the seed node,
 *             # return itself
 */
  __pyx_t_7 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_target_nodes)), ((PyObject *)(&PyList_Type)), Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":991
 *             # If only one node is provided and is the same as the seed node,
 *             # return itself
 *             if target_nodes is self:             # <<<<<<<<<<<<<<
 *                 if get_path:
 *                     return self, {}
 */
    __pyx_t_2 = (__pyx_v_target_nodes == ((PyObject *)__pyx_v_self));
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":992
 *             # return itself
 *             if target_nodes is self:
 *                 if get_path:             # <<<<<<<<<<<<<<
 *                     return self, {}
 *                 else:
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_get_path); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 992, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "ete4/coretype/tree.pyx":993
 *             if target_nodes is self:
 *                 if get_path:
 *                     return self, {}             # <<<<<<<<<<<<<<
 *                 else:
 *                     return self
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(((PyObject *)__pyx_v_self));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
        PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_self));
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L0;

        /* "ete4/coretype/tree.pyx":992
 *             # return itself
 *             if target_nodes is self:
 *                 if get_path:             # <<<<<<<<<<<<<<
 *                     return self, {}
 *                 else:
 */
      }

      /* "ete4/coretype/tree.pyx":995
 *                     return self, {}
 *                 else:
 *                     return self             # <<<<<<<<<<<<<<
 *             else:
 *                 #Otherwise find the common ancestor of current seed node and
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_self));
        __pyx_r = ((PyObject *)__pyx_v_self);
        goto __pyx_L0;
      }

      /* "ete4/coretype/tree.pyx":991
 *             # If only one node is provided and is the same as the seed node,
 *             # return itself
 *             if target_nodes is self:             # <<<<<<<<<<<<<<
 *                 if get_path:
 *                     return self, {}
 */
    }

    /* "ete4/coretype/tree.pyx":999
 *                 #Otherwise find the common ancestor of current seed node and
 *                 #the target_node provided
 *                 target_nodes = [target_nodes, self]             # <<<<<<<<<<<<<<
 * 
 *         n2path = {}
 */
    /*else*/ {
      __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_target_nodes);
      __Pyx_GIVEREF(__pyx_v_target_nodes);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_target_nodes);
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyList_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_v_self));
      __Pyx_DECREF_SET(__pyx_v_target_nodes, __pyx_t_8);
      __pyx_t_8 = 0;
    }

    /* "ete4/coretype/tree.pyx":988
 * 
 * 
 *         if type(target_nodes) != list:             # <<<<<<<<<<<<<<
 *             # If only one node is provided and is the same as the seed node,
 *             # return itself
 */
  }

  /* "ete4/coretype/tree.pyx":1001
 *                 target_nodes = [target_nodes, self]
 * 
 *         n2path = {}             # <<<<<<<<<<<<<<
 *         reference = []
 *         ref_node = None
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_n2path = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":1002
 * 
 *         n2path = {}
 *         reference = []             # <<<<<<<<<<<<<<
 *         ref_node = None
 *         for n in target_nodes:
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_reference = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":1003
 *         n2path = {}
 *         reference = []
 *         ref_node = None             # <<<<<<<<<<<<<<
 *         for n in target_nodes:
 *             current = n
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_ref_node = Py_None;

  /* "ete4/coretype/tree.pyx":1004
 *         reference = []
 *         ref_node = None
 *         for n in target_nodes:             # <<<<<<<<<<<<<<
 *             current = n
 *             while current:
 */
  if (likely(PyList_CheckExact(__pyx_v_target_nodes)) || PyTuple_CheckExact(__pyx_v_target_nodes)) {
    __pyx_t_8 = __pyx_v_target_nodes; __Pyx_INCREF(__pyx_t_8); __pyx_t_3 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_target_nodes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1004, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1004, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1004, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_9(__pyx_t_8);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1004, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1005
 *         ref_node = None
 *         for n in target_nodes:
 *             current = n             # <<<<<<<<<<<<<<
 *             while current:
 *                 n2path.setdefault(n, set()).add(current)
 */
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_v_current, __pyx_v_n);

    /* "ete4/coretype/tree.pyx":1006
 *         for n in target_nodes:
 *             current = n
 *             while current:             # <<<<<<<<<<<<<<
 *                 n2path.setdefault(n, set()).add(current)
 *                 if not ref_node:
 */
    while (1) {
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_current); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1006, __pyx_L1_error)
      if (!__pyx_t_6) break;

      /* "ete4/coretype/tree.pyx":1007
 *             current = n
 *             while current:
 *                 n2path.setdefault(n, set()).add(current)             # <<<<<<<<<<<<<<
 *                 if not ref_node:
 *                     reference.append(current)
 */
      __pyx_t_5 = PySet_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyDict_SetDefault(__pyx_v_n2path, __pyx_v_n, __pyx_t_5, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_current) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_current);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1008
 *             while current:
 *                 n2path.setdefault(n, set()).add(current)
 *                 if not ref_node:             # <<<<<<<<<<<<<<
 *                     reference.append(current)
 *                 current = current.up
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_ref_node); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __pyx_t_2 = ((!__pyx_t_6) != 0);
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1009
 *                 n2path.setdefault(n, set()).add(current)
 *                 if not ref_node:
 *                     reference.append(current)             # <<<<<<<<<<<<<<
 *                 current = current.up
 *             if not ref_node:
 */
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_reference, __pyx_v_current); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1009, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1008
 *             while current:
 *                 n2path.setdefault(n, set()).add(current)
 *                 if not ref_node:             # <<<<<<<<<<<<<<
 *                     reference.append(current)
 *                 current = current.up
 */
      }

      /* "ete4/coretype/tree.pyx":1010
 *                 if not ref_node:
 *                     reference.append(current)
 *                 current = current.up             # <<<<<<<<<<<<<<
 *             if not ref_node:
 *                 ref_node = n
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_current, __pyx_n_s_up); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF_SET(__pyx_v_current, __pyx_t_7);
      __pyx_t_7 = 0;
    }

    /* "ete4/coretype/tree.pyx":1011
 *                     reference.append(current)
 *                 current = current.up
 *             if not ref_node:             # <<<<<<<<<<<<<<
 *                 ref_node = n
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_ref_node); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1011, __pyx_L1_error)
    __pyx_t_6 = ((!__pyx_t_2) != 0);
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":1012
 *                 current = current.up
 *             if not ref_node:
 *                 ref_node = n             # <<<<<<<<<<<<<<
 * 
 *         common = None
 */
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_DECREF_SET(__pyx_v_ref_node, __pyx_v_n);

      /* "ete4/coretype/tree.pyx":1011
 *                     reference.append(current)
 *                 current = current.up
 *             if not ref_node:             # <<<<<<<<<<<<<<
 *                 ref_node = n
 * 
 */
    }

    /* "ete4/coretype/tree.pyx":1004
 *         reference = []
 *         ref_node = None
 *         for n in target_nodes:             # <<<<<<<<<<<<<<
 *             current = n
 *             while current:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":1014
 *                 ref_node = n
 * 
 *         common = None             # <<<<<<<<<<<<<<
 *         for n in reference:
 *             broken = False
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_common = Py_None;

  /* "ete4/coretype/tree.pyx":1015
 * 
 *         common = None
 *         for n in reference:             # <<<<<<<<<<<<<<
 *             broken = False
 *             for node, path in six.iteritems(n2path):
 */
  __pyx_t_8 = __pyx_v_reference; __Pyx_INCREF(__pyx_t_8); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_8)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1015, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1016
 *         common = None
 *         for n in reference:
 *             broken = False             # <<<<<<<<<<<<<<
 *             for node, path in six.iteritems(n2path):
 *                 if node is not ref_node and n not in path:
 */
    __pyx_v_broken = 0;

    /* "ete4/coretype/tree.pyx":1017
 *         for n in reference:
 *             broken = False
 *             for node, path in six.iteritems(n2path):             # <<<<<<<<<<<<<<
 *                 if node is not ref_node and n not in path:
 *                     broken = True
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_six); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_n2path) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_n2path);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_1 = __pyx_t_7; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1017, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1017, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1017, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1017, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1017, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_1);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1017, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1017, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_12);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1017, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_13 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1017, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = Py_TYPE(__pyx_t_13)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_5)) goto __pyx_L19_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_12 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_12)) goto __pyx_L19_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_12);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 2) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L20_unpacking_done;
        __pyx_L19_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1017, __pyx_L1_error)
        __pyx_L20_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_path, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "ete4/coretype/tree.pyx":1018
 *             broken = False
 *             for node, path in six.iteritems(n2path):
 *                 if node is not ref_node and n not in path:             # <<<<<<<<<<<<<<
 *                     broken = True
 *                     break
 */
      __pyx_t_2 = (__pyx_v_node != __pyx_v_ref_node);
      __pyx_t_4 = (__pyx_t_2 != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_6 = __pyx_t_4;
        goto __pyx_L22_bool_binop_done;
      }
      __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_n, __pyx_v_path, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      __pyx_t_6 = __pyx_t_2;
      __pyx_L22_bool_binop_done:;
      if (__pyx_t_6) {

        /* "ete4/coretype/tree.pyx":1019
 *             for node, path in six.iteritems(n2path):
 *                 if node is not ref_node and n not in path:
 *                     broken = True             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
        __pyx_v_broken = 1;

        /* "ete4/coretype/tree.pyx":1020
 *                 if node is not ref_node and n not in path:
 *                     broken = True
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             if not broken:
 */
        goto __pyx_L18_break;

        /* "ete4/coretype/tree.pyx":1018
 *             broken = False
 *             for node, path in six.iteritems(n2path):
 *                 if node is not ref_node and n not in path:             # <<<<<<<<<<<<<<
 *                     broken = True
 *                     break
 */
      }

      /* "ete4/coretype/tree.pyx":1017
 *         for n in reference:
 *             broken = False
 *             for node, path in six.iteritems(n2path):             # <<<<<<<<<<<<<<
 *                 if node is not ref_node and n not in path:
 *                     broken = True
 */
    }
    __pyx_L18_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1022
 *                     break
 * 
 *             if not broken:             # <<<<<<<<<<<<<<
 *                 common = n
 *                 break
 */
    __pyx_t_6 = ((!(__pyx_v_broken != 0)) != 0);
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":1023
 * 
 *             if not broken:
 *                 common = n             # <<<<<<<<<<<<<<
 *                 break
 *         if not common:
 */
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_DECREF_SET(__pyx_v_common, __pyx_v_n);

      /* "ete4/coretype/tree.pyx":1024
 *             if not broken:
 *                 common = n
 *                 break             # <<<<<<<<<<<<<<
 *         if not common:
 *             raise TreeError("Nodes are not connected!")
 */
      goto __pyx_L16_break;

      /* "ete4/coretype/tree.pyx":1022
 *                     break
 * 
 *             if not broken:             # <<<<<<<<<<<<<<
 *                 common = n
 *                 break
 */
    }

    /* "ete4/coretype/tree.pyx":1015
 * 
 *         common = None
 *         for n in reference:             # <<<<<<<<<<<<<<
 *             broken = False
 *             for node, path in six.iteritems(n2path):
 */
  }
  __pyx_L16_break:;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":1025
 *                 common = n
 *                 break
 *         if not common:             # <<<<<<<<<<<<<<
 *             raise TreeError("Nodes are not connected!")
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_common); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1025, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_6) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "ete4/coretype/tree.pyx":1026
 *                 break
 *         if not common:
 *             raise TreeError("Nodes are not connected!")             # <<<<<<<<<<<<<<
 * 
 *         if get_path:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_kp_s_Nodes_are_not_connected) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_Nodes_are_not_connected);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 1026, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1025
 *                 common = n
 *                 break
 *         if not common:             # <<<<<<<<<<<<<<
 *             raise TreeError("Nodes are not connected!")
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1028
 *             raise TreeError("Nodes are not connected!")
 * 
 *         if get_path:             # <<<<<<<<<<<<<<
 *             return common, n2path
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_get_path); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1028, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1029
 * 
 *         if get_path:
 *             return common, n2path             # <<<<<<<<<<<<<<
 *         else:
 *             return common
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_common);
    __Pyx_GIVEREF(__pyx_v_common);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_common);
    __Pyx_INCREF(__pyx_v_n2path);
    __Pyx_GIVEREF(__pyx_v_n2path);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_n2path);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":1028
 *             raise TreeError("Nodes are not connected!")
 * 
 *         if get_path:             # <<<<<<<<<<<<<<
 *             return common, n2path
 *         else:
 */
  }

  /* "ete4/coretype/tree.pyx":1031
 *             return common, n2path
 *         else:
 *             return common             # <<<<<<<<<<<<<<
 * 
 *     def iter_search_nodes(self, **conditions):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_common);
    __pyx_r = __pyx_v_common;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":961
 *         return root
 * 
 *     def get_common_ancestor(self, *target_nodes, **kargs):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the first common ancestor between this node and a given
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_common_ancestor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_target_nodes);
  __Pyx_XDECREF(__pyx_v_get_path);
  __Pyx_XDECREF(__pyx_v_n2path);
  __Pyx_XDECREF(__pyx_v_reference);
  __Pyx_XDECREF(__pyx_v_ref_node);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_current);
  __Pyx_XDECREF(__pyx_v_common);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_146generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":1033
 *             return common
 * 
 *     def iter_search_nodes(self, **conditions):             # <<<<<<<<<<<<<<
 *         """
 *         Search nodes in an iterative way. Matches are yielded as they
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_145iter_search_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_144iter_search_nodes[] = "\n        Search nodes in an iterative way. Matches are yielded as they\n        are being found. This avoids needing to scan the full tree\n        topology before returning the first matches. Useful when\n        dealing with huge trees.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_145iter_search_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conditions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_search_nodes (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("iter_search_nodes", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iter_search_nodes", 1))) return NULL;
  __pyx_v_conditions = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_conditions)) return NULL;
  __Pyx_GOTREF(__pyx_v_conditions);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_144iter_search_nodes(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_conditions);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conditions);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_144iter_search_nodes(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_conditions) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_search_nodes", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1033, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_conditions = __pyx_v_conditions;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_conditions);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_conditions);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_146generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_search_nodes, __pyx_n_s_TreeNode_iter_search_nodes, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 1033, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_search_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_146generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_search_nodes", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L15_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1033, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1041
 *         """
 * 
 *         for n in self.traverse():             # <<<<<<<<<<<<<<
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1041, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1041, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1041, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_n, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1042
 * 
 *         for n in self.traverse():
 *             conditions_passed = 0             # <<<<<<<<<<<<<<
 *             for key, value in six.iteritems(conditions):
 *                 if (hasattr(n, key) and getattr(n, key) == value)\
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_conditions_passed);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_conditions_passed, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);

    /* "ete4/coretype/tree.pyx":1043
 *         for n in self.traverse():
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):             # <<<<<<<<<<<<<<
 *                 if (hasattr(n, key) and getattr(n, key) == value)\
 *                   or n.props.get(key) == value:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_six); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_cur_scope->__pyx_v_conditions) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_cur_scope->__pyx_v_conditions);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1043, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1043, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1043, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1043, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1043, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1043, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        #else
        __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_3 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1043, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_key);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_key, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_value);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_value, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;

      /* "ete4/coretype/tree.pyx":1044
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):
 *                 if (hasattr(n, key) and getattr(n, key) == value)\             # <<<<<<<<<<<<<<
 *                   or n.props.get(key) == value:
 *                     conditions_passed +=1
 */
      __pyx_t_13 = __Pyx_HasAttr(__pyx_cur_scope->__pyx_v_n, __pyx_cur_scope->__pyx_v_key); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1044, __pyx_L1_error)
      __pyx_t_14 = (__pyx_t_13 != 0);
      if (!__pyx_t_14) {
        goto __pyx_L12_next_or;
      } else {
      }
      __pyx_t_1 = __Pyx_GetAttr(__pyx_cur_scope->__pyx_v_n, __pyx_cur_scope->__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1044, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (!__pyx_t_14) {
      } else {
        __pyx_t_12 = __pyx_t_14;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_L12_next_or:;

      /* "ete4/coretype/tree.pyx":1045
 *             for key, value in six.iteritems(conditions):
 *                 if (hasattr(n, key) and getattr(n, key) == value)\
 *                   or n.props.get(key) == value:             # <<<<<<<<<<<<<<
 *                     conditions_passed +=1
 *             if conditions_passed == len(conditions):
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_n, __pyx_n_s_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_cur_scope->__pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_key);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_9, __pyx_cur_scope->__pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = __pyx_t_14;
      __pyx_L11_bool_binop_done:;

      /* "ete4/coretype/tree.pyx":1044
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):
 *                 if (hasattr(n, key) and getattr(n, key) == value)\             # <<<<<<<<<<<<<<
 *                   or n.props.get(key) == value:
 *                     conditions_passed +=1
 */
      if (__pyx_t_12) {

        /* "ete4/coretype/tree.pyx":1046
 *                 if (hasattr(n, key) and getattr(n, key) == value)\
 *                   or n.props.get(key) == value:
 *                     conditions_passed +=1             # <<<<<<<<<<<<<<
 *             if conditions_passed == len(conditions):
 *                 yield n
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_conditions_passed, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_conditions_passed);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_conditions_passed, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "ete4/coretype/tree.pyx":1044
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):
 *                 if (hasattr(n, key) and getattr(n, key) == value)\             # <<<<<<<<<<<<<<
 *                   or n.props.get(key) == value:
 *                     conditions_passed +=1
 */
      }

      /* "ete4/coretype/tree.pyx":1043
 *         for n in self.traverse():
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):             # <<<<<<<<<<<<<<
 *                 if (hasattr(n, key) and getattr(n, key) == value)\
 *                   or n.props.get(key) == value:
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":1047
 *                   or n.props.get(key) == value:
 *                     conditions_passed +=1
 *             if conditions_passed == len(conditions):             # <<<<<<<<<<<<<<
 *                 yield n
 * 
 */
    __pyx_t_7 = PyDict_Size(__pyx_cur_scope->__pyx_v_conditions); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1047, __pyx_L1_error)
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_conditions_passed, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_12) {

      /* "ete4/coretype/tree.pyx":1048
 *                     conditions_passed +=1
 *             if conditions_passed == len(conditions):
 *                 yield n             # <<<<<<<<<<<<<<
 * 
 *     def search_nodes(self, **conditions):
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
      __pyx_r = __pyx_cur_scope->__pyx_v_n;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L15_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1048, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1047
 *                   or n.props.get(key) == value:
 *                     conditions_passed +=1
 *             if conditions_passed == len(conditions):             # <<<<<<<<<<<<<<
 *                 yield n
 * 
 */
    }

    /* "ete4/coretype/tree.pyx":1041
 *         """
 * 
 *         for n in self.traverse():             # <<<<<<<<<<<<<<
 *             conditions_passed = 0
 *             for key, value in six.iteritems(conditions):
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":1033
 *             return common
 * 
 *     def iter_search_nodes(self, **conditions):             # <<<<<<<<<<<<<<
 *         """
 *         Search nodes in an iterative way. Matches are yielded as they
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("iter_search_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1050
 *                 yield n
 * 
 *     def search_nodes(self, **conditions):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the list of nodes matching a given set of conditions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_148search_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_147search_nodes[] = "\n        Returns the list of nodes matching a given set of conditions.\n\n        **Example:**\n\n        ::\n\n          tree.search_nodes(dist=0.0, name=\"human\")\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_148search_nodes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conditions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("search_nodes (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("search_nodes", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "search_nodes", 1))) return NULL;
  __pyx_v_conditions = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_conditions)) return NULL;
  __Pyx_GOTREF(__pyx_v_conditions);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_147search_nodes(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_conditions);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_conditions);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_147search_nodes(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_conditions) {
  PyObject *__pyx_v_matching_nodes = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("search_nodes", 0);

  /* "ete4/coretype/tree.pyx":1061
 * 
 *         """
 *         matching_nodes = []             # <<<<<<<<<<<<<<
 *         for n in self.iter_search_nodes(**conditions):
 *             matching_nodes.append(n)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_matching_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1062
 *         """
 *         matching_nodes = []
 *         for n in self.iter_search_nodes(**conditions):             # <<<<<<<<<<<<<<
 *             matching_nodes.append(n)
 *         return matching_nodes
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_search_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_Copy(__pyx_v_conditions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1062, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1062, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1062, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1062, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1063
 *         matching_nodes = []
 *         for n in self.iter_search_nodes(**conditions):
 *             matching_nodes.append(n)             # <<<<<<<<<<<<<<
 *         return matching_nodes
 * 
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_matching_nodes, __pyx_v_n); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1063, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1062
 *         """
 *         matching_nodes = []
 *         for n in self.iter_search_nodes(**conditions):             # <<<<<<<<<<<<<<
 *             matching_nodes.append(n)
 *         return matching_nodes
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1064
 *         for n in self.iter_search_nodes(**conditions):
 *             matching_nodes.append(n)
 *         return matching_nodes             # <<<<<<<<<<<<<<
 * 
 *     def get_leaves_by_name(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_matching_nodes);
  __pyx_r = __pyx_v_matching_nodes;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1050
 *                 yield n
 * 
 *     def search_nodes(self, **conditions):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the list of nodes matching a given set of conditions.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.search_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_matching_nodes);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1066
 *         return matching_nodes
 * 
 *     def get_leaves_by_name(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of leaf nodes matching a given name.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_150get_leaves_by_name(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_149get_leaves_by_name[] = "\n        Returns a list of leaf nodes matching a given name.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_150get_leaves_by_name(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_leaves_by_name (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_149get_leaves_by_name(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_149get_leaves_by_name(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_leaves_by_name", 0);

  /* "ete4/coretype/tree.pyx":1070
 *         Returns a list of leaf nodes matching a given name.
 *         """
 *         return self.search_nodes(name=name, children=[])             # <<<<<<<<<<<<<<
 * 
 *     def is_leaf(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_search_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 1070, __pyx_L1_error)
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_children, __pyx_t_3) < 0) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1066
 *         return matching_nodes
 * 
 *     def get_leaves_by_name(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a list of leaf nodes matching a given name.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_leaves_by_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1072
 *         return self.search_nodes(name=name, children=[])
 * 
 *     def is_leaf(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return True if current node is a leaf.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_152is_leaf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_151is_leaf[] = "\n        Return True if current node is a leaf.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_152is_leaf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_leaf (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_151is_leaf(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_151is_leaf(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_leaf", 0);

  /* "ete4/coretype/tree.pyx":1076
 *         Return True if current node is a leaf.
 *         """
 *         return len(self.children) == 0             # <<<<<<<<<<<<<<
 * 
 *     def is_root(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_t_2 == 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1072
 *         return self.search_nodes(name=name, children=[])
 * 
 *     def is_leaf(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return True if current node is a leaf.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.is_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1078
 *         return len(self.children) == 0
 * 
 *     def is_root(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns True if current node has no parent
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_154is_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_153is_root[] = "\n        Returns True if current node has no parent\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_154is_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_root (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_153is_root(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_153is_root(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_root", 0);

  /* "ete4/coretype/tree.pyx":1082
 *         Returns True if current node has no parent
 *         """
 *         if self.up is None:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":1083
 *         """
 *         if self.up is None:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":1082
 *         Returns True if current node has no parent
 *         """
 *         if self.up is None:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  }

  /* "ete4/coretype/tree.pyx":1085
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     # ###########################
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":1078
 *         return len(self.children) == 0
 * 
 *     def is_root(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns True if current node has no parent
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.is_root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1090
 *     # Distance related functions
 *     # ###########################
 *     def get_distance(self, target, target2=None, topology_only=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the distance between two nodes. If only one target is
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_156get_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_155get_distance[] = "\n        Returns the distance between two nodes. If only one target is\n        specified, it returns the distance between the target and the\n        current node.\n\n        :argument target: a node within the same tree structure.\n\n        :argument target2: a node within the same tree structure. If\n          not specified, current node is used as target2.\n\n        :argument False topology_only: If set to True, distance will\n          refer to the number of nodes between target and target2.\n\n        :returns: branch length distance between target and\n          target2. If topology_only flag is True, returns the number\n          of nodes between target and target2.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_156get_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_target = 0;
  PyObject *__pyx_v_target2 = 0;
  PyObject *__pyx_v_topology_only = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,&__pyx_n_s_target2,&__pyx_n_s_topology_only,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target2);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_topology_only);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_distance") < 0)) __PYX_ERR(0, 1090, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_target = values[0];
    __pyx_v_target2 = values[1];
    __pyx_v_topology_only = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_distance", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1090, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_155get_distance(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_target, __pyx_v_target2, __pyx_v_topology_only);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_155get_distance(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_target, PyObject *__pyx_v_target2, PyObject *__pyx_v_topology_only) {
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_v_ancestor = NULL;
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_current = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_distance", 0);
  __Pyx_INCREF(__pyx_v_target);
  __Pyx_INCREF(__pyx_v_target2);

  /* "ete4/coretype/tree.pyx":1110
 *         """
 * 
 *         if target2 is None:             # <<<<<<<<<<<<<<
 *             target2 = self
 *             root = self.get_tree_root()
 */
  __pyx_t_1 = (__pyx_v_target2 == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1111
 * 
 *         if target2 is None:
 *             target2 = self             # <<<<<<<<<<<<<<
 *             root = self.get_tree_root()
 *         else:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_DECREF_SET(__pyx_v_target2, ((PyObject *)__pyx_v_self));

    /* "ete4/coretype/tree.pyx":1112
 *         if target2 is None:
 *             target2 = self
 *             root = self.get_tree_root()             # <<<<<<<<<<<<<<
 *         else:
 *             # is target node under current node?
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_tree_root); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_root = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1110
 *         """
 * 
 *         if target2 is None:             # <<<<<<<<<<<<<<
 *             target2 = self
 *             root = self.get_tree_root()
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1115
 *         else:
 *             # is target node under current node?
 *             root = self             # <<<<<<<<<<<<<<
 * 
 *         target, target2 = _translate_nodes(root, target, target2)
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_v_root = ((PyObject *)__pyx_v_self);
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":1117
 *             root = self
 * 
 *         target, target2 = _translate_nodes(root, target, target2)             # <<<<<<<<<<<<<<
 *         ancestor = root.get_common_ancestor(target, target2)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_translate_nodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_root, __pyx_v_target, __pyx_v_target2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_root, __pyx_v_target, __pyx_v_target2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_root);
    __Pyx_GIVEREF(__pyx_v_root);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_root);
    __Pyx_INCREF(__pyx_v_target);
    __Pyx_GIVEREF(__pyx_v_target);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_target);
    __Pyx_INCREF(__pyx_v_target2);
    __Pyx_GIVEREF(__pyx_v_target2);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_target2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1117, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1117, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1117, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __Pyx_DECREF_SET(__pyx_v_target, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_target2, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":1118
 * 
 *         target, target2 = _translate_nodes(root, target, target2)
 *         ancestor = root.get_common_ancestor(target, target2)             # <<<<<<<<<<<<<<
 * 
 *         dist = 0.0
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_root, __pyx_n_s_get_common_ancestor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_target, __pyx_v_target2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_target, __pyx_v_target2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_target);
    __Pyx_GIVEREF(__pyx_v_target);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_target);
    __Pyx_INCREF(__pyx_v_target2);
    __Pyx_GIVEREF(__pyx_v_target2);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_target2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_ancestor = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1120
 *         ancestor = root.get_common_ancestor(target, target2)
 * 
 *         dist = 0.0             # <<<<<<<<<<<<<<
 *         for n in [target2, target]:
 *             current = n
 */
  __Pyx_INCREF(__pyx_float_0_0);
  __pyx_v_dist = __pyx_float_0_0;

  /* "ete4/coretype/tree.pyx":1121
 * 
 *         dist = 0.0
 *         for n in [target2, target]:             # <<<<<<<<<<<<<<
 *             current = n
 *             while current != ancestor:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_target2);
  __Pyx_GIVEREF(__pyx_v_target2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_target2);
  __Pyx_INCREF(__pyx_v_target);
  __Pyx_GIVEREF(__pyx_v_target);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_target);
  __pyx_t_7 = __pyx_t_3; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_9 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1121, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1122
 *         dist = 0.0
 *         for n in [target2, target]:
 *             current = n             # <<<<<<<<<<<<<<
 *             while current != ancestor:
 *                 if topology_only:
 */
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_v_current, __pyx_v_n);

    /* "ete4/coretype/tree.pyx":1123
 *         for n in [target2, target]:
 *             current = n
 *             while current != ancestor:             # <<<<<<<<<<<<<<
 *                 if topology_only:
 *                     if  current!=target:
 */
    while (1) {
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_current, __pyx_v_ancestor, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1123, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1123, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_2) break;

      /* "ete4/coretype/tree.pyx":1124
 *             current = n
 *             while current != ancestor:
 *                 if topology_only:             # <<<<<<<<<<<<<<
 *                     if  current!=target:
 *                         dist += 1
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1124, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1125
 *             while current != ancestor:
 *                 if topology_only:
 *                     if  current!=target:             # <<<<<<<<<<<<<<
 *                         dist += 1
 *                 else:
 */
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_current, __pyx_v_target, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1125, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":1126
 *                 if topology_only:
 *                     if  current!=target:
 *                         dist += 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     dist += current.dist
 */
          __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_dist, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF_SET(__pyx_v_dist, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "ete4/coretype/tree.pyx":1125
 *             while current != ancestor:
 *                 if topology_only:
 *                     if  current!=target:             # <<<<<<<<<<<<<<
 *                         dist += 1
 *                 else:
 */
        }

        /* "ete4/coretype/tree.pyx":1124
 *             current = n
 *             while current != ancestor:
 *                 if topology_only:             # <<<<<<<<<<<<<<
 *                     if  current!=target:
 *                         dist += 1
 */
        goto __pyx_L10;
      }

      /* "ete4/coretype/tree.pyx":1128
 *                         dist += 1
 *                 else:
 *                     dist += current.dist             # <<<<<<<<<<<<<<
 *                 current = current.up
 *         return dist
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_current, __pyx_n_s_dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_dist, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF_SET(__pyx_v_dist, __pyx_t_5);
        __pyx_t_5 = 0;
      }
      __pyx_L10:;

      /* "ete4/coretype/tree.pyx":1129
 *                 else:
 *                     dist += current.dist
 *                 current = current.up             # <<<<<<<<<<<<<<
 *         return dist
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_current, __pyx_n_s_up); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1129, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_current, __pyx_t_5);
      __pyx_t_5 = 0;
    }

    /* "ete4/coretype/tree.pyx":1121
 * 
 *         dist = 0.0
 *         for n in [target2, target]:             # <<<<<<<<<<<<<<
 *             current = n
 *             while current != ancestor:
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":1130
 *                     dist += current.dist
 *                 current = current.up
 *         return dist             # <<<<<<<<<<<<<<
 * 
 *     def get_farthest_node(self, topology_only=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dist);
  __pyx_r = __pyx_v_dist;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1090
 *     # Distance related functions
 *     # ###########################
 *     def get_distance(self, target, target2=None, topology_only=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the distance between two nodes. If only one target is
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_ancestor);
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_current);
  __Pyx_XDECREF(__pyx_v_target);
  __Pyx_XDECREF(__pyx_v_target2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1132
 *         return dist
 * 
 *     def get_farthest_node(self, topology_only=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the node's farthest descendant or ancestor node, and the
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_158get_farthest_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_157get_farthest_node[] = "\n        Returns the node's farthest descendant or ancestor node, and the\n        distance to it.\n\n        :argument False topology_only: If set to True, distance\n          between nodes will be referred to the number of nodes\n          between them. In other words, topological distance will be\n          used instead of branch length distances.\n\n        :return: A tuple containing the farthest node referred to the\n          current node and the distance to it.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_158get_farthest_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_topology_only = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_farthest_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_topology_only,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_topology_only);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_farthest_node") < 0)) __PYX_ERR(0, 1132, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_topology_only = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_farthest_node", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1132, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_farthest_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_157get_farthest_node(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_topology_only);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_157get_farthest_node(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only) {
  PyObject *__pyx_v_farthest_node = NULL;
  PyObject *__pyx_v_farthest_dist = NULL;
  PyObject *__pyx_v_prev = NULL;
  PyObject *__pyx_v_cdist = NULL;
  PyObject *__pyx_v_current = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_fnode = NULL;
  PyObject *__pyx_v_fdist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_farthest_node", 0);

  /* "ete4/coretype/tree.pyx":1147
 *         """
 *         # Init farthest node to current farthest leaf
 *         farthest_node, farthest_dist = self.get_farthest_leaf(topology_only=topology_only)             # <<<<<<<<<<<<<<
 * 
 *         prev = self
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_farthest_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_topology_only, __pyx_v_topology_only) < 0) __PYX_ERR(0, 1147, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1147, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1147, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1147, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_farthest_node = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_farthest_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1149
 *         farthest_node, farthest_dist = self.get_farthest_leaf(topology_only=topology_only)
 * 
 *         prev = self             # <<<<<<<<<<<<<<
 *         cdist = 0.0 if topology_only else prev.dist
 *         current = prev.up
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_v_prev = ((PyObject *)__pyx_v_self);

  /* "ete4/coretype/tree.pyx":1150
 * 
 *         prev = self
 *         cdist = 0.0 if topology_only else prev.dist             # <<<<<<<<<<<<<<
 *         current = prev.up
 *         while current is not None:
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1150, __pyx_L1_error)
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_t_3 = __pyx_float_0_0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_prev, __pyx_n_s_dist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_v_cdist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1151
 *         prev = self
 *         cdist = 0.0 if topology_only else prev.dist
 *         current = prev.up             # <<<<<<<<<<<<<<
 *         while current is not None:
 *             for ch in current.children:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_prev, __pyx_n_s_up); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_current = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1152
 *         cdist = 0.0 if topology_only else prev.dist
 *         current = prev.up
 *         while current is not None:             # <<<<<<<<<<<<<<
 *             for ch in current.children:
 *                 if ch != prev:
 */
  while (1) {
    __pyx_t_6 = (__pyx_v_current != Py_None);
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) break;

    /* "ete4/coretype/tree.pyx":1153
 *         current = prev.up
 *         while current is not None:
 *             for ch in current.children:             # <<<<<<<<<<<<<<
 *                 if ch != prev:
 *                     if not ch.is_leaf():
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_current, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1153, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1153, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1153, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1153, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ete4/coretype/tree.pyx":1154
 *         while current is not None:
 *             for ch in current.children:
 *                 if ch != prev:             # <<<<<<<<<<<<<<
 *                     if not ch.is_leaf():
 *                         fnode, fdist = ch.get_farthest_leaf(topology_only=topology_only)
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_ch, __pyx_v_prev, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1154, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {

        /* "ete4/coretype/tree.pyx":1155
 *             for ch in current.children:
 *                 if ch != prev:
 *                     if not ch.is_leaf():             # <<<<<<<<<<<<<<
 *                         fnode, fdist = ch.get_farthest_leaf(topology_only=topology_only)
 *                     else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ch, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1155, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = ((!__pyx_t_7) != 0);
        if (__pyx_t_6) {

          /* "ete4/coretype/tree.pyx":1156
 *                 if ch != prev:
 *                     if not ch.is_leaf():
 *                         fnode, fdist = ch.get_farthest_leaf(topology_only=topology_only)             # <<<<<<<<<<<<<<
 *                     else:
 *                         fnode = ch
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ch, __pyx_n_s_get_farthest_leaf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_topology_only, __pyx_v_topology_only) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1156, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
            PyObject* sequence = __pyx_t_4;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 1156, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            #else
            __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1156, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_5 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L11_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_2);
            index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L11_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_3);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
            __pyx_t_5 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L12_unpacking_done;
            __pyx_L11_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_5 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 1156, __pyx_L1_error)
            __pyx_L12_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_fnode, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_XDECREF_SET(__pyx_v_fdist, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "ete4/coretype/tree.pyx":1155
 *             for ch in current.children:
 *                 if ch != prev:
 *                     if not ch.is_leaf():             # <<<<<<<<<<<<<<
 *                         fnode, fdist = ch.get_farthest_leaf(topology_only=topology_only)
 *                     else:
 */
          goto __pyx_L10;
        }

        /* "ete4/coretype/tree.pyx":1158
 *                         fnode, fdist = ch.get_farthest_leaf(topology_only=topology_only)
 *                     else:
 *                         fnode = ch             # <<<<<<<<<<<<<<
 *                         fdist = 0
 *                     if topology_only:
 */
        /*else*/ {
          __Pyx_INCREF(__pyx_v_ch);
          __Pyx_XDECREF_SET(__pyx_v_fnode, __pyx_v_ch);

          /* "ete4/coretype/tree.pyx":1159
 *                     else:
 *                         fnode = ch
 *                         fdist = 0             # <<<<<<<<<<<<<<
 *                     if topology_only:
 *                         fdist += 1.0
 */
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_XDECREF_SET(__pyx_v_fdist, __pyx_int_0);
        }
        __pyx_L10:;

        /* "ete4/coretype/tree.pyx":1160
 *                         fnode = ch
 *                         fdist = 0
 *                     if topology_only:             # <<<<<<<<<<<<<<
 *                         fdist += 1.0
 *                     else:
 */
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1160, __pyx_L1_error)
        if (__pyx_t_6) {

          /* "ete4/coretype/tree.pyx":1161
 *                         fdist = 0
 *                     if topology_only:
 *                         fdist += 1.0             # <<<<<<<<<<<<<<
 *                     else:
 *                         fdist += ch.dist
 */
          __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_v_fdist, __pyx_float_1_0, 1.0, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1161, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF_SET(__pyx_v_fdist, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "ete4/coretype/tree.pyx":1160
 *                         fnode = ch
 *                         fdist = 0
 *                     if topology_only:             # <<<<<<<<<<<<<<
 *                         fdist += 1.0
 *                     else:
 */
          goto __pyx_L13;
        }

        /* "ete4/coretype/tree.pyx":1163
 *                         fdist += 1.0
 *                     else:
 *                         fdist += ch.dist             # <<<<<<<<<<<<<<
 *                     if cdist+fdist > farthest_dist:
 *                         farthest_dist = cdist + fdist
 */
        /*else*/ {
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ch, __pyx_n_s_dist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_fdist, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1163, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF_SET(__pyx_v_fdist, __pyx_t_3);
          __pyx_t_3 = 0;
        }
        __pyx_L13:;

        /* "ete4/coretype/tree.pyx":1164
 *                     else:
 *                         fdist += ch.dist
 *                     if cdist+fdist > farthest_dist:             # <<<<<<<<<<<<<<
 *                         farthest_dist = cdist + fdist
 *                         farthest_node = fnode
 */
        __pyx_t_3 = PyNumber_Add(__pyx_v_cdist, __pyx_v_fdist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_farthest_dist, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_6) {

          /* "ete4/coretype/tree.pyx":1165
 *                         fdist += ch.dist
 *                     if cdist+fdist > farthest_dist:
 *                         farthest_dist = cdist + fdist             # <<<<<<<<<<<<<<
 *                         farthest_node = fnode
 *             prev = current
 */
          __pyx_t_4 = PyNumber_Add(__pyx_v_cdist, __pyx_v_fdist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1165, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF_SET(__pyx_v_farthest_dist, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "ete4/coretype/tree.pyx":1166
 *                     if cdist+fdist > farthest_dist:
 *                         farthest_dist = cdist + fdist
 *                         farthest_node = fnode             # <<<<<<<<<<<<<<
 *             prev = current
 *             if topology_only:
 */
          __Pyx_INCREF(__pyx_v_fnode);
          __Pyx_DECREF_SET(__pyx_v_farthest_node, __pyx_v_fnode);

          /* "ete4/coretype/tree.pyx":1164
 *                     else:
 *                         fdist += ch.dist
 *                     if cdist+fdist > farthest_dist:             # <<<<<<<<<<<<<<
 *                         farthest_dist = cdist + fdist
 *                         farthest_node = fnode
 */
        }

        /* "ete4/coretype/tree.pyx":1154
 *         while current is not None:
 *             for ch in current.children:
 *                 if ch != prev:             # <<<<<<<<<<<<<<
 *                     if not ch.is_leaf():
 *                         fnode, fdist = ch.get_farthest_leaf(topology_only=topology_only)
 */
      }

      /* "ete4/coretype/tree.pyx":1153
 *         current = prev.up
 *         while current is not None:
 *             for ch in current.children:             # <<<<<<<<<<<<<<
 *                 if ch != prev:
 *                     if not ch.is_leaf():
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1167
 *                         farthest_dist = cdist + fdist
 *                         farthest_node = fnode
 *             prev = current             # <<<<<<<<<<<<<<
 *             if topology_only:
 *                 cdist += 1
 */
    __Pyx_INCREF(__pyx_v_current);
    __Pyx_DECREF_SET(__pyx_v_prev, __pyx_v_current);

    /* "ete4/coretype/tree.pyx":1168
 *                         farthest_node = fnode
 *             prev = current
 *             if topology_only:             # <<<<<<<<<<<<<<
 *                 cdist += 1
 *             else:
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1168, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":1169
 *             prev = current
 *             if topology_only:
 *                 cdist += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 cdist  += prev.dist
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_cdist, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_cdist, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":1168
 *                         farthest_node = fnode
 *             prev = current
 *             if topology_only:             # <<<<<<<<<<<<<<
 *                 cdist += 1
 *             else:
 */
      goto __pyx_L15;
    }

    /* "ete4/coretype/tree.pyx":1171
 *                 cdist += 1
 *             else:
 *                 cdist  += prev.dist             # <<<<<<<<<<<<<<
 *             current = prev.up
 *         return farthest_node, farthest_dist
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_prev, __pyx_n_s_dist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_cdist, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_cdist, __pyx_t_4);
      __pyx_t_4 = 0;
    }
    __pyx_L15:;

    /* "ete4/coretype/tree.pyx":1172
 *             else:
 *                 cdist  += prev.dist
 *             current = prev.up             # <<<<<<<<<<<<<<
 *         return farthest_node, farthest_dist
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_prev, __pyx_n_s_up); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_current, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "ete4/coretype/tree.pyx":1173
 *                 cdist  += prev.dist
 *             current = prev.up
 *         return farthest_node, farthest_dist             # <<<<<<<<<<<<<<
 * 
 *     def _get_farthest_and_closest_leaves(self, topology_only=False, is_leaf_fn=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_farthest_node);
  __Pyx_GIVEREF(__pyx_v_farthest_node);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_farthest_node);
  __Pyx_INCREF(__pyx_v_farthest_dist);
  __Pyx_GIVEREF(__pyx_v_farthest_dist);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_farthest_dist);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1132
 *         return dist
 * 
 *     def get_farthest_node(self, topology_only=False):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the node's farthest descendant or ancestor node, and the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_farthest_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_farthest_node);
  __Pyx_XDECREF(__pyx_v_farthest_dist);
  __Pyx_XDECREF(__pyx_v_prev);
  __Pyx_XDECREF(__pyx_v_cdist);
  __Pyx_XDECREF(__pyx_v_current);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_fnode);
  __Pyx_XDECREF(__pyx_v_fdist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1175
 *         return farthest_node, farthest_dist
 * 
 *     def _get_farthest_and_closest_leaves(self, topology_only=False, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         # if called from a leaf node, no necessary to compute
 *         if (is_leaf_fn and is_leaf_fn(self)) or self.is_leaf():
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_160_get_farthest_and_closest_leaves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_160_get_farthest_and_closest_leaves(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_topology_only = 0;
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_farthest_and_closest_leaves (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_topology_only,&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_topology_only);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_farthest_and_closest_leaves") < 0)) __PYX_ERR(0, 1175, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_topology_only = values[0];
    __pyx_v_is_leaf_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_farthest_and_closest_leaves", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_farthest_and_closest_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_159_get_farthest_and_closest_leaves(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_topology_only, __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_159_get_farthest_and_closest_leaves(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only, PyObject *__pyx_v_is_leaf_fn) {
  PyObject *__pyx_v_min_dist = NULL;
  PyObject *__pyx_v_min_node = NULL;
  PyObject *__pyx_v_max_dist = NULL;
  PyObject *__pyx_v_max_node = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_post = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_total_d = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_farthest_and_closest_leaves", 0);

  /* "ete4/coretype/tree.pyx":1177
 *     def _get_farthest_and_closest_leaves(self, topology_only=False, is_leaf_fn=None):
 *         # if called from a leaf node, no necessary to compute
 *         if (is_leaf_fn and is_leaf_fn(self)) or self.is_leaf():             # <<<<<<<<<<<<<<
 *             return self, 0.0, self, 0.0
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_is_leaf_fn); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1177, __pyx_L1_error)
  if (!__pyx_t_2) {
    goto __pyx_L5_next_or;
  } else {
  }
  __Pyx_INCREF(__pyx_v_is_leaf_fn);
  __pyx_t_4 = __pyx_v_is_leaf_fn; __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_or:;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":1178
 *         # if called from a leaf node, no necessary to compute
 *         if (is_leaf_fn and is_leaf_fn(self)) or self.is_leaf():
 *             return self, 0.0, self, 0.0             # <<<<<<<<<<<<<<
 * 
 *         min_dist = None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_float_0_0);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_float_0_0);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":1177
 *     def _get_farthest_and_closest_leaves(self, topology_only=False, is_leaf_fn=None):
 *         # if called from a leaf node, no necessary to compute
 *         if (is_leaf_fn and is_leaf_fn(self)) or self.is_leaf():             # <<<<<<<<<<<<<<
 *             return self, 0.0, self, 0.0
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1180
 *             return self, 0.0, self, 0.0
 * 
 *         min_dist = None             # <<<<<<<<<<<<<<
 *         min_node = None
 *         max_dist = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_min_dist = Py_None;

  /* "ete4/coretype/tree.pyx":1181
 * 
 *         min_dist = None
 *         min_node = None             # <<<<<<<<<<<<<<
 *         max_dist = None
 *         max_node = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_min_node = Py_None;

  /* "ete4/coretype/tree.pyx":1182
 *         min_dist = None
 *         min_node = None
 *         max_dist = None             # <<<<<<<<<<<<<<
 *         max_node = None
 *         d = 0.0
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_max_dist = Py_None;

  /* "ete4/coretype/tree.pyx":1183
 *         min_node = None
 *         max_dist = None
 *         max_node = None             # <<<<<<<<<<<<<<
 *         d = 0.0
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_max_node = Py_None;

  /* "ete4/coretype/tree.pyx":1184
 *         max_dist = None
 *         max_node = None
 *         d = 0.0             # <<<<<<<<<<<<<<
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):
 *             if n is self:
 */
  __Pyx_INCREF(__pyx_float_0_0);
  __pyx_v_d = __pyx_float_0_0;

  /* "ete4/coretype/tree.pyx":1185
 *         max_node = None
 *         d = 0.0
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             if n is self:
 *                 continue
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_prepostorder); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1185, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1185, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1185, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1185, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1185, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1185, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_post, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":1186
 *         d = 0.0
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):
 *             if n is self:             # <<<<<<<<<<<<<<
 *                 continue
 *             if post:
 */
    __pyx_t_1 = (__pyx_v_n == ((PyObject *)__pyx_v_self));
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "ete4/coretype/tree.pyx":1187
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):
 *             if n is self:
 *                 continue             # <<<<<<<<<<<<<<
 *             if post:
 *                 d -= n.dist if not topology_only else 1.0
 */
      goto __pyx_L7_continue;

      /* "ete4/coretype/tree.pyx":1186
 *         d = 0.0
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):
 *             if n is self:             # <<<<<<<<<<<<<<
 *                 continue
 *             if post:
 */
    }

    /* "ete4/coretype/tree.pyx":1188
 *             if n is self:
 *                 continue
 *             if post:             # <<<<<<<<<<<<<<
 *                 d -= n.dist if not topology_only else 1.0
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_post); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1188, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "ete4/coretype/tree.pyx":1189
 *                 continue
 *             if post:
 *                 d -= n.dist if not topology_only else 1.0             # <<<<<<<<<<<<<<
 *             else:
 *                 if (is_leaf_fn and is_leaf_fn(n)) or n.is_leaf():
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1189, __pyx_L1_error)
      if (((!__pyx_t_2) != 0)) {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_dist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = __pyx_t_8;
        __pyx_t_8 = 0;
      } else {
        __Pyx_INCREF(__pyx_float_1_0);
        __pyx_t_5 = __pyx_float_1_0;
      }
      __pyx_t_8 = PyNumber_InPlaceSubtract(__pyx_v_d, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_d, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":1188
 *             if n is self:
 *                 continue
 *             if post:             # <<<<<<<<<<<<<<
 *                 d -= n.dist if not topology_only else 1.0
 *             else:
 */
      goto __pyx_L12;
    }

    /* "ete4/coretype/tree.pyx":1191
 *                 d -= n.dist if not topology_only else 1.0
 *             else:
 *                 if (is_leaf_fn and is_leaf_fn(n)) or n.is_leaf():             # <<<<<<<<<<<<<<
 *                     total_d = d + n.dist if not topology_only else d
 *                     if min_dist is None or total_d < min_dist:
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_leaf_fn); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1191, __pyx_L1_error)
      if (!__pyx_t_1) {
        goto __pyx_L15_next_or;
      } else {
      }
      __Pyx_INCREF(__pyx_v_is_leaf_fn);
      __pyx_t_5 = __pyx_v_is_leaf_fn; __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_v_n) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_n);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_L15_next_or:;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1191, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = __pyx_t_1;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1192
 *             else:
 *                 if (is_leaf_fn and is_leaf_fn(n)) or n.is_leaf():
 *                     total_d = d + n.dist if not topology_only else d             # <<<<<<<<<<<<<<
 *                     if min_dist is None or total_d < min_dist:
 *                         min_dist = total_d
 */
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1192, __pyx_L1_error)
        if (((!__pyx_t_2) != 0)) {
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_dist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1192, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = PyNumber_Add(__pyx_v_d, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(__pyx_v_d);
          __pyx_t_8 = __pyx_v_d;
        }
        __Pyx_XDECREF_SET(__pyx_v_total_d, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1193
 *                 if (is_leaf_fn and is_leaf_fn(n)) or n.is_leaf():
 *                     total_d = d + n.dist if not topology_only else d
 *                     if min_dist is None or total_d < min_dist:             # <<<<<<<<<<<<<<
 *                         min_dist = total_d
 *                         min_node = n
 */
        __pyx_t_1 = (__pyx_v_min_dist == Py_None);
        __pyx_t_11 = (__pyx_t_1 != 0);
        if (!__pyx_t_11) {
        } else {
          __pyx_t_2 = __pyx_t_11;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_total_d, __pyx_v_min_dist, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1193, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1193, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_2 = __pyx_t_11;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":1194
 *                     total_d = d + n.dist if not topology_only else d
 *                     if min_dist is None or total_d < min_dist:
 *                         min_dist = total_d             # <<<<<<<<<<<<<<
 *                         min_node = n
 *                     if max_dist is None or total_d > max_dist:
 */
          __Pyx_INCREF(__pyx_v_total_d);
          __Pyx_DECREF_SET(__pyx_v_min_dist, __pyx_v_total_d);

          /* "ete4/coretype/tree.pyx":1195
 *                     if min_dist is None or total_d < min_dist:
 *                         min_dist = total_d
 *                         min_node = n             # <<<<<<<<<<<<<<
 *                     if max_dist is None or total_d > max_dist:
 *                         max_dist = total_d
 */
          __Pyx_INCREF(__pyx_v_n);
          __Pyx_DECREF_SET(__pyx_v_min_node, __pyx_v_n);

          /* "ete4/coretype/tree.pyx":1193
 *                 if (is_leaf_fn and is_leaf_fn(n)) or n.is_leaf():
 *                     total_d = d + n.dist if not topology_only else d
 *                     if min_dist is None or total_d < min_dist:             # <<<<<<<<<<<<<<
 *                         min_dist = total_d
 *                         min_node = n
 */
        }

        /* "ete4/coretype/tree.pyx":1196
 *                         min_dist = total_d
 *                         min_node = n
 *                     if max_dist is None or total_d > max_dist:             # <<<<<<<<<<<<<<
 *                         max_dist = total_d
 *                         max_node = n
 */
        __pyx_t_11 = (__pyx_v_max_dist == Py_None);
        __pyx_t_1 = (__pyx_t_11 != 0);
        if (!__pyx_t_1) {
        } else {
          __pyx_t_2 = __pyx_t_1;
          goto __pyx_L21_bool_binop_done;
        }
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_total_d, __pyx_v_max_dist, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1196, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1196, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_2 = __pyx_t_1;
        __pyx_L21_bool_binop_done:;
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":1197
 *                         min_node = n
 *                     if max_dist is None or total_d > max_dist:
 *                         max_dist = total_d             # <<<<<<<<<<<<<<
 *                         max_node = n
 *                 else:
 */
          __Pyx_INCREF(__pyx_v_total_d);
          __Pyx_DECREF_SET(__pyx_v_max_dist, __pyx_v_total_d);

          /* "ete4/coretype/tree.pyx":1198
 *                     if max_dist is None or total_d > max_dist:
 *                         max_dist = total_d
 *                         max_node = n             # <<<<<<<<<<<<<<
 *                 else:
 *                     d += n.dist if not topology_only else 1.0
 */
          __Pyx_INCREF(__pyx_v_n);
          __Pyx_DECREF_SET(__pyx_v_max_node, __pyx_v_n);

          /* "ete4/coretype/tree.pyx":1196
 *                         min_dist = total_d
 *                         min_node = n
 *                     if max_dist is None or total_d > max_dist:             # <<<<<<<<<<<<<<
 *                         max_dist = total_d
 *                         max_node = n
 */
        }

        /* "ete4/coretype/tree.pyx":1191
 *                 d -= n.dist if not topology_only else 1.0
 *             else:
 *                 if (is_leaf_fn and is_leaf_fn(n)) or n.is_leaf():             # <<<<<<<<<<<<<<
 *                     total_d = d + n.dist if not topology_only else d
 *                     if min_dist is None or total_d < min_dist:
 */
        goto __pyx_L13;
      }

      /* "ete4/coretype/tree.pyx":1200
 *                         max_node = n
 *                 else:
 *                     d += n.dist if not topology_only else 1.0             # <<<<<<<<<<<<<<
 *         return min_node, min_dist, max_node, max_dist
 * 
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_topology_only); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1200, __pyx_L1_error)
        if (((!__pyx_t_2) != 0)) {
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(__pyx_float_1_0);
          __pyx_t_8 = __pyx_float_1_0;
        }
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_d, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_d, __pyx_t_3);
        __pyx_t_3 = 0;
      }
      __pyx_L13:;
    }
    __pyx_L12:;

    /* "ete4/coretype/tree.pyx":1185
 *         max_node = None
 *         d = 0.0
 *         for post, n in self.iter_prepostorder(is_leaf_fn=is_leaf_fn):             # <<<<<<<<<<<<<<
 *             if n is self:
 *                 continue
 */
    __pyx_L7_continue:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1201
 *                 else:
 *                     d += n.dist if not topology_only else 1.0
 *         return min_node, min_dist, max_node, max_dist             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_min_node);
  __Pyx_GIVEREF(__pyx_v_min_node);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_min_node);
  __Pyx_INCREF(__pyx_v_min_dist);
  __Pyx_GIVEREF(__pyx_v_min_dist);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_min_dist);
  __Pyx_INCREF(__pyx_v_max_node);
  __Pyx_GIVEREF(__pyx_v_max_node);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_max_node);
  __Pyx_INCREF(__pyx_v_max_dist);
  __Pyx_GIVEREF(__pyx_v_max_dist);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_max_dist);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1175
 *         return farthest_node, farthest_dist
 * 
 *     def _get_farthest_and_closest_leaves(self, topology_only=False, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         # if called from a leaf node, no necessary to compute
 *         if (is_leaf_fn and is_leaf_fn(self)) or self.is_leaf():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._get_farthest_and_closest_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_min_dist);
  __Pyx_XDECREF(__pyx_v_min_node);
  __Pyx_XDECREF(__pyx_v_max_dist);
  __Pyx_XDECREF(__pyx_v_max_node);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_post);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_total_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1204
 * 
 * 
 *     def get_farthest_leaf(self, topology_only=False, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns node's farthest descendant node (which is always a leaf), and the
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_162get_farthest_leaf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_161get_farthest_leaf[] = "\n        Returns node's farthest descendant node (which is always a leaf), and the\n        distance to it.\n\n        :argument False topology_only: If set to True, distance\n          between nodes will be referred to the number of nodes\n          between them. In other words, topological distance will be\n          used instead of branch length distances.\n\n        :return: A tuple containing the farthest leaf referred to the\n          current node and the distance to it.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_162get_farthest_leaf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_topology_only = 0;
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_farthest_leaf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_topology_only,&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_topology_only);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_farthest_leaf") < 0)) __PYX_ERR(0, 1204, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_topology_only = values[0];
    __pyx_v_is_leaf_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_farthest_leaf", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1204, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_farthest_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_161get_farthest_leaf(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_topology_only, __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_161get_farthest_leaf(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only, PyObject *__pyx_v_is_leaf_fn) {
  CYTHON_UNUSED PyObject *__pyx_v_min_node = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_min_dist = NULL;
  PyObject *__pyx_v_max_node = NULL;
  PyObject *__pyx_v_max_dist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_farthest_leaf", 0);

  /* "ete4/coretype/tree.pyx":1217
 *           current node and the distance to it.
 *         """
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(             # <<<<<<<<<<<<<<
 *         topology_only=topology_only, is_leaf_fn=is_leaf_fn)
 *         return max_node, max_dist
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_farthest_and_closest_leaves); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "ete4/coretype/tree.pyx":1218
 *         """
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(
 *         topology_only=topology_only, is_leaf_fn=is_leaf_fn)             # <<<<<<<<<<<<<<
 *         return max_node, max_dist
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_topology_only, __pyx_v_topology_only) < 0) __PYX_ERR(0, 1218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 1218, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1217
 *           current node and the distance to it.
 *         """
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(             # <<<<<<<<<<<<<<
 *         topology_only=topology_only, is_leaf_fn=is_leaf_fn)
 *         return max_node, max_dist
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1217, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1217, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_min_node = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_min_dist = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_max_node = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_max_dist = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ete4/coretype/tree.pyx":1219
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(
 *         topology_only=topology_only, is_leaf_fn=is_leaf_fn)
 *         return max_node, max_dist             # <<<<<<<<<<<<<<
 * 
 *     def get_closest_leaf(self, topology_only=False, is_leaf_fn=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_max_node);
  __Pyx_GIVEREF(__pyx_v_max_node);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_max_node);
  __Pyx_INCREF(__pyx_v_max_dist);
  __Pyx_GIVEREF(__pyx_v_max_dist);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_max_dist);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1204
 * 
 * 
 *     def get_farthest_leaf(self, topology_only=False, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns node's farthest descendant node (which is always a leaf), and the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_farthest_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_min_node);
  __Pyx_XDECREF(__pyx_v_min_dist);
  __Pyx_XDECREF(__pyx_v_max_node);
  __Pyx_XDECREF(__pyx_v_max_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1221
 *         return max_node, max_dist
 * 
 *     def get_closest_leaf(self, topology_only=False, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """Returns node's closest descendant leaf and the distance to
 *         it.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_164get_closest_leaf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_163get_closest_leaf[] = "Returns node's closest descendant leaf and the distance to\n        it.\n\n        :argument False topology_only: If set to True, distance\n          between nodes will be referred to the number of nodes\n          between them. In other words, topological distance will be\n          used instead of branch length distances.\n\n        :return: A tuple containing the closest leaf referred to the\n          current node and the distance to it.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_164get_closest_leaf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_topology_only = 0;
  PyObject *__pyx_v_is_leaf_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_closest_leaf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_topology_only,&__pyx_n_s_is_leaf_fn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_topology_only);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_leaf_fn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_closest_leaf") < 0)) __PYX_ERR(0, 1221, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_topology_only = values[0];
    __pyx_v_is_leaf_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_closest_leaf", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1221, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_closest_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_163get_closest_leaf(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_topology_only, __pyx_v_is_leaf_fn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_163get_closest_leaf(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_topology_only, PyObject *__pyx_v_is_leaf_fn) {
  PyObject *__pyx_v_min_node = NULL;
  PyObject *__pyx_v_min_dist = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_max_node = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_max_dist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_closest_leaf", 0);

  /* "ete4/coretype/tree.pyx":1234
 * 
 *         """
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(             # <<<<<<<<<<<<<<
 *             topology_only=topology_only, is_leaf_fn=is_leaf_fn)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_farthest_and_closest_leaves); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "ete4/coretype/tree.pyx":1235
 *         """
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(
 *             topology_only=topology_only, is_leaf_fn=is_leaf_fn)             # <<<<<<<<<<<<<<
 * 
 *         return min_node, min_dist
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_topology_only, __pyx_v_topology_only) < 0) __PYX_ERR(0, 1235, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_leaf_fn, __pyx_v_is_leaf_fn) < 0) __PYX_ERR(0, 1235, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1234
 * 
 *         """
 *         min_node, min_dist, max_node, max_dist = self._get_farthest_and_closest_leaves(             # <<<<<<<<<<<<<<
 *             topology_only=topology_only, is_leaf_fn=is_leaf_fn)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1234, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1234, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 1234, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1234, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_min_node = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_min_dist = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_max_node = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_max_dist = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ete4/coretype/tree.pyx":1237
 *             topology_only=topology_only, is_leaf_fn=is_leaf_fn)
 * 
 *         return min_node, min_dist             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_min_node);
  __Pyx_GIVEREF(__pyx_v_min_node);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_min_node);
  __Pyx_INCREF(__pyx_v_min_dist);
  __Pyx_GIVEREF(__pyx_v_min_dist);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_min_dist);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1221
 *         return max_node, max_dist
 * 
 *     def get_closest_leaf(self, topology_only=False, is_leaf_fn=None):             # <<<<<<<<<<<<<<
 *         """Returns node's closest descendant leaf and the distance to
 *         it.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_closest_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_min_node);
  __Pyx_XDECREF(__pyx_v_min_dist);
  __Pyx_XDECREF(__pyx_v_max_node);
  __Pyx_XDECREF(__pyx_v_max_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1240
 * 
 * 
 *     def get_midpoint_outgroup(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the node that divides the current tree into two distance-balanced
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_166get_midpoint_outgroup(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_165get_midpoint_outgroup[] = "\n        Returns the node that divides the current tree into two distance-balanced\n        partitions.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_166get_midpoint_outgroup(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_midpoint_outgroup (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_165get_midpoint_outgroup(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_165get_midpoint_outgroup(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_v_nA = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_r2A_dist = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_nB = NULL;
  PyObject *__pyx_v_A2B_dist = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_outgroup = NULL;
  PyObject *__pyx_v_middist = NULL;
  PyObject *__pyx_v_cdist = NULL;
  PyObject *__pyx_v_current = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_midpoint_outgroup", 0);

  /* "ete4/coretype/tree.pyx":1246
 *         """
 *         # Gets the farthest node to the current root
 *         root = self.get_tree_root()             # <<<<<<<<<<<<<<
 *         nA, r2A_dist = root.get_farthest_leaf()
 *         nB, A2B_dist = nA.get_farthest_node()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_tree_root); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_root = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1247
 *         # Gets the farthest node to the current root
 *         root = self.get_tree_root()
 *         nA, r2A_dist = root.get_farthest_leaf()             # <<<<<<<<<<<<<<
 *         nB, A2B_dist = nA.get_farthest_node()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_root, __pyx_n_s_get_farthest_leaf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1247, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1247, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1247, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_nA = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_r2A_dist = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1248
 *         root = self.get_tree_root()
 *         nA, r2A_dist = root.get_farthest_leaf()
 *         nB, A2B_dist = nA.get_farthest_node()             # <<<<<<<<<<<<<<
 * 
 *         outgroup = nA
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_nA, __pyx_n_s_get_farthest_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1248, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1248, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1248, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_nB = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_A2B_dist = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1250
 *         nB, A2B_dist = nA.get_farthest_node()
 * 
 *         outgroup = nA             # <<<<<<<<<<<<<<
 *         middist  = A2B_dist / 2.0
 *         cdist = 0
 */
  __Pyx_INCREF(__pyx_v_nA);
  __pyx_v_outgroup = __pyx_v_nA;

  /* "ete4/coretype/tree.pyx":1251
 * 
 *         outgroup = nA
 *         middist  = A2B_dist / 2.0             # <<<<<<<<<<<<<<
 *         cdist = 0
 *         current = nA
 */
  __pyx_t_1 = __Pyx_PyFloat_DivideObjC(__pyx_v_A2B_dist, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_middist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1252
 *         outgroup = nA
 *         middist  = A2B_dist / 2.0
 *         cdist = 0             # <<<<<<<<<<<<<<
 *         current = nA
 *         while current is not None:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_cdist = __pyx_int_0;

  /* "ete4/coretype/tree.pyx":1253
 *         middist  = A2B_dist / 2.0
 *         cdist = 0
 *         current = nA             # <<<<<<<<<<<<<<
 *         while current is not None:
 *             cdist += current.dist
 */
  __Pyx_INCREF(__pyx_v_nA);
  __pyx_v_current = __pyx_v_nA;

  /* "ete4/coretype/tree.pyx":1254
 *         cdist = 0
 *         current = nA
 *         while current is not None:             # <<<<<<<<<<<<<<
 *             cdist += current.dist
 *             if cdist > (middist): # Deja de subir cuando se pasa del maximo
 */
  while (1) {
    __pyx_t_6 = (__pyx_v_current != Py_None);
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) break;

    /* "ete4/coretype/tree.pyx":1255
 *         current = nA
 *         while current is not None:
 *             cdist += current.dist             # <<<<<<<<<<<<<<
 *             if cdist > (middist): # Deja de subir cuando se pasa del maximo
 *                 break
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current, __pyx_n_s_dist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_cdist, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_cdist, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":1256
 *         while current is not None:
 *             cdist += current.dist
 *             if cdist > (middist): # Deja de subir cuando se pasa del maximo             # <<<<<<<<<<<<<<
 *                 break
 *             else:
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_cdist, __pyx_v_middist, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":1257
 *             cdist += current.dist
 *             if cdist > (middist): # Deja de subir cuando se pasa del maximo
 *                 break             # <<<<<<<<<<<<<<
 *             else:
 *                 current = current.up
 */
      goto __pyx_L8_break;

      /* "ete4/coretype/tree.pyx":1256
 *         while current is not None:
 *             cdist += current.dist
 *             if cdist > (middist): # Deja de subir cuando se pasa del maximo             # <<<<<<<<<<<<<<
 *                 break
 *             else:
 */
    }

    /* "ete4/coretype/tree.pyx":1259
 *                 break
 *             else:
 *                 current = current.up             # <<<<<<<<<<<<<<
 * 
 *         # if we reached the root, the tree is already at midpoint. Return any child as valid outgroup
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_current, __pyx_n_s_up); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_current, __pyx_t_2);
      __pyx_t_2 = 0;
    }
  }
  __pyx_L8_break:;

  /* "ete4/coretype/tree.pyx":1262
 * 
 *         # if we reached the root, the tree is already at midpoint. Return any child as valid outgroup
 *         if current is None:             # <<<<<<<<<<<<<<
 *             current = self.children[0]
 * 
 */
  __pyx_t_7 = (__pyx_v_current == Py_None);
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "ete4/coretype/tree.pyx":1263
 *         # if we reached the root, the tree is already at midpoint. Return any child as valid outgroup
 *         if current is None:
 *             current = self.children[0]             # <<<<<<<<<<<<<<
 * 
 *         return current
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_current, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1262
 * 
 *         # if we reached the root, the tree is already at midpoint. Return any child as valid outgroup
 *         if current is None:             # <<<<<<<<<<<<<<
 *             current = self.children[0]
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1265
 *             current = self.children[0]
 * 
 *         return current             # <<<<<<<<<<<<<<
 * 
 *     def populate(self, size, names_library=None, reuse_names=False,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_current);
  __pyx_r = __pyx_v_current;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1240
 * 
 * 
 *     def get_midpoint_outgroup(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the node that divides the current tree into two distance-balanced
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_midpoint_outgroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_nA);
  __Pyx_XDECREF(__pyx_v_r2A_dist);
  __Pyx_XDECREF(__pyx_v_nB);
  __Pyx_XDECREF(__pyx_v_A2B_dist);
  __Pyx_XDECREF(__pyx_v_outgroup);
  __Pyx_XDECREF(__pyx_v_middist);
  __Pyx_XDECREF(__pyx_v_cdist);
  __Pyx_XDECREF(__pyx_v_current);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1267
 *         return current
 * 
 *     def populate(self, size, names_library=None, reuse_names=False,             # <<<<<<<<<<<<<<
 *                  random_branches=False, branch_range=(0,1),
 *                  support_range=(0,1)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_168populate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_167populate[] = "\n        Generates a random topology by populating current node.\n\n        :argument None names_library: If provided, names library\n          (list, set, dict, etc.) will be used to name nodes.\n\n        :argument False reuse_names: If True, node names will not be\n          necessarily unique, which makes the process a bit more\n          efficient.\n\n        :argument False random_branches: If True, branch distances and support\n          values will be randomized.\n\n        :argument (0,1) branch_range: If random_branches is True, this\n          range of values will be used to generate random distances.\n\n        :argument (0,1) support_range: If random_branches is True,\n          this range of values will be used to generate random branch\n          support values.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_168populate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_names_library = 0;
  PyObject *__pyx_v_reuse_names = 0;
  PyObject *__pyx_v_random_branches = 0;
  PyObject *__pyx_v_branch_range = 0;
  CYTHON_UNUSED PyObject *__pyx_v_support_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("populate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_names_library,&__pyx_n_s_reuse_names,&__pyx_n_s_random_branches,&__pyx_n_s_branch_range,&__pyx_n_s_support_range,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);

    /* "ete4/coretype/tree.pyx":1268
 * 
 *     def populate(self, size, names_library=None, reuse_names=False,
 *                  random_branches=False, branch_range=(0,1),             # <<<<<<<<<<<<<<
 *                  support_range=(0,1)):
 *         """
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)__pyx_tuple__10);

    /* "ete4/coretype/tree.pyx":1269
 *     def populate(self, size, names_library=None, reuse_names=False,
 *                  random_branches=False, branch_range=(0,1),
 *                  support_range=(0,1)):             # <<<<<<<<<<<<<<
 *         """
 *         Generates a random topology by populating current node.
 */
    values[5] = ((PyObject *)__pyx_tuple__10);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_names_library);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reuse_names);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_random_branches);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_branch_range);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_support_range);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "populate") < 0)) __PYX_ERR(0, 1267, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
    __pyx_v_names_library = values[1];
    __pyx_v_reuse_names = values[2];
    __pyx_v_random_branches = values[3];
    __pyx_v_branch_range = values[4];
    __pyx_v_support_range = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("populate", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1267, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.populate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_167populate(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_size, __pyx_v_names_library, __pyx_v_reuse_names, __pyx_v_random_branches, __pyx_v_branch_range, __pyx_v_support_range);

  /* "ete4/coretype/tree.pyx":1267
 *         return current
 * 
 *     def populate(self, size, names_library=None, reuse_names=False,             # <<<<<<<<<<<<<<
 *                  random_branches=False, branch_range=(0,1),
 *                  support_range=(0,1)):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_167populate(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_names_library, PyObject *__pyx_v_reuse_names, PyObject *__pyx_v_random_branches, PyObject *__pyx_v_branch_range, CYTHON_UNUSED PyObject *__pyx_v_support_range) {
  PyObject *__pyx_v_NewNode = NULL;
  PyObject *__pyx_v_connector = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_v_next_deq = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_c1 = NULL;
  PyObject *__pyx_v_c2 = NULL;
  PyObject *__pyx_v_charset = NULL;
  PyObject *__pyx_v_avail_names = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_tname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("populate", 0);
  __Pyx_INCREF(__pyx_v_names_library);

  /* "ete4/coretype/tree.pyx":1291
 * 
 *         """
 *         NewNode = self.__class__             # <<<<<<<<<<<<<<
 * 
 *         if len(self.children) > 1:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_NewNode = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1293
 *         NewNode = self.__class__
 * 
 *         if len(self.children) > 1:             # <<<<<<<<<<<<<<
 *             connector = NewNode()
 *             for ch in self.get_children():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 > 1) != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":1294
 * 
 *         if len(self.children) > 1:
 *             connector = NewNode()             # <<<<<<<<<<<<<<
 *             for ch in self.get_children():
 *                 ch.detach()
 */
    __Pyx_INCREF(__pyx_v_NewNode);
    __pyx_t_4 = __pyx_v_NewNode; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_connector = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1295
 *         if len(self.children) > 1:
 *             connector = NewNode()
 *             for ch in self.get_children():             # <<<<<<<<<<<<<<
 *                 ch.detach()
 *                 connector.add_child(child = ch)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1295, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1295, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":1296
 *             connector = NewNode()
 *             for ch in self.get_children():
 *                 ch.detach()             # <<<<<<<<<<<<<<
 *                 connector.add_child(child = ch)
 *             root = NewNode()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ch, __pyx_n_s_detach); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":1297
 *             for ch in self.get_children():
 *                 ch.detach()
 *                 connector.add_child(child = ch)             # <<<<<<<<<<<<<<
 *             root = NewNode()
 *             self.add_child(child = connector)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_connector, __pyx_n_s_add_child); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_child, __pyx_v_ch) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1295
 *         if len(self.children) > 1:
 *             connector = NewNode()
 *             for ch in self.get_children():             # <<<<<<<<<<<<<<
 *                 ch.detach()
 *                 connector.add_child(child = ch)
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1298
 *                 ch.detach()
 *                 connector.add_child(child = ch)
 *             root = NewNode()             # <<<<<<<<<<<<<<
 *             self.add_child(child = connector)
 *             self.add_child(child = root)
 */
    __Pyx_INCREF(__pyx_v_NewNode);
    __pyx_t_7 = __pyx_v_NewNode; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_root = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1299
 *                 connector.add_child(child = ch)
 *             root = NewNode()
 *             self.add_child(child = connector)             # <<<<<<<<<<<<<<
 *             self.add_child(child = root)
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_child); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_child, __pyx_v_connector) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ete4/coretype/tree.pyx":1300
 *             root = NewNode()
 *             self.add_child(child = connector)
 *             self.add_child(child = root)             # <<<<<<<<<<<<<<
 *         else:
 *             root = self
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_child, __pyx_v_root) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1293
 *         NewNode = self.__class__
 * 
 *         if len(self.children) > 1:             # <<<<<<<<<<<<<<
 *             connector = NewNode()
 *             for ch in self.get_children():
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1302
 *             self.add_child(child = root)
 *         else:
 *             root = self             # <<<<<<<<<<<<<<
 * 
 *         next_deq = deque([root])
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_v_root = ((PyObject *)__pyx_v_self);
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":1304
 *             root = self
 * 
 *         next_deq = deque([root])             # <<<<<<<<<<<<<<
 *         for i in range(size-1):
 *             if random.randint(0, 1):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_deque); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_root);
  __Pyx_GIVEREF(__pyx_v_root);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_root);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_next_deq = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1305
 * 
 *         next_deq = deque([root])
 *         for i in range(size-1):             # <<<<<<<<<<<<<<
 *             if random.randint(0, 1):
 *                 p = next_deq.pop()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_range); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_size, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1305, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1305, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1305, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_7);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1305, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1306
 *         next_deq = deque([root])
 *         for i in range(size-1):
 *             if random.randint(0, 1):             # <<<<<<<<<<<<<<
 *                 p = next_deq.pop()
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_randint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_3) {

      /* "ete4/coretype/tree.pyx":1307
 *         for i in range(size-1):
 *             if random.randint(0, 1):
 *                 p = next_deq.pop()             # <<<<<<<<<<<<<<
 *             else:
 *                 p = next_deq.popleft()
 */
      __pyx_t_4 = __Pyx_PyObject_Pop(__pyx_v_next_deq); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1306
 *         next_deq = deque([root])
 *         for i in range(size-1):
 *             if random.randint(0, 1):             # <<<<<<<<<<<<<<
 *                 p = next_deq.pop()
 *             else:
 */
      goto __pyx_L8;
    }

    /* "ete4/coretype/tree.pyx":1309
 *                 p = next_deq.pop()
 *             else:
 *                 p = next_deq.popleft()             # <<<<<<<<<<<<<<
 * 
 *             c1 = p.add_child()
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_next_deq, __pyx_n_s_popleft); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
    }
    __pyx_L8:;

    /* "ete4/coretype/tree.pyx":1311
 *                 p = next_deq.popleft()
 * 
 *             c1 = p.add_child()             # <<<<<<<<<<<<<<
 *             c2 = p.add_child()
 *             next_deq.extend([c1, c2])
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_add_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_c1, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1312
 * 
 *             c1 = p.add_child()
 *             c2 = p.add_child()             # <<<<<<<<<<<<<<
 *             next_deq.extend([c1, c2])
 *             if random_branches:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_add_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_c2, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1313
 *             c1 = p.add_child()
 *             c2 = p.add_child()
 *             next_deq.extend([c1, c2])             # <<<<<<<<<<<<<<
 *             if random_branches:
 *                 c1.dist = random.uniform(*branch_range)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_next_deq, __pyx_n_s_extend); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_c1);
    __Pyx_GIVEREF(__pyx_v_c1);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_c1);
    __Pyx_INCREF(__pyx_v_c2);
    __Pyx_GIVEREF(__pyx_v_c2);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_c2);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1314
 *             c2 = p.add_child()
 *             next_deq.extend([c1, c2])
 *             if random_branches:             # <<<<<<<<<<<<<<
 *                 c1.dist = random.uniform(*branch_range)
 *                 c2.dist = random.uniform(*branch_range)
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_random_branches); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1314, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "ete4/coretype/tree.pyx":1315
 *             next_deq.extend([c1, c2])
 *             if random_branches:
 *                 c1.dist = random.uniform(*branch_range)             # <<<<<<<<<<<<<<
 *                 c2.dist = random.uniform(*branch_range)
 *                 c1.support = random.uniform(*branch_range)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uniform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_branch_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c1, __pyx_n_s_dist, __pyx_t_1) < 0) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":1316
 *             if random_branches:
 *                 c1.dist = random.uniform(*branch_range)
 *                 c2.dist = random.uniform(*branch_range)             # <<<<<<<<<<<<<<
 *                 c1.support = random.uniform(*branch_range)
 *                 c2.support = random.uniform(*branch_range)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uniform); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_branch_range); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c2, __pyx_n_s_dist, __pyx_t_5) < 0) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":1317
 *                 c1.dist = random.uniform(*branch_range)
 *                 c2.dist = random.uniform(*branch_range)
 *                 c1.support = random.uniform(*branch_range)             # <<<<<<<<<<<<<<
 *                 c2.support = random.uniform(*branch_range)
 *             else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uniform); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PySequence_Tuple(__pyx_v_branch_range); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c1, __pyx_n_s_support, __pyx_t_4) < 0) __PYX_ERR(0, 1317, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1318
 *                 c2.dist = random.uniform(*branch_range)
 *                 c1.support = random.uniform(*branch_range)
 *                 c2.support = random.uniform(*branch_range)             # <<<<<<<<<<<<<<
 *             else:
 *                 c1.dist = 1.0
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uniform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_branch_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c2, __pyx_n_s_support, __pyx_t_1) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":1314
 *             c2 = p.add_child()
 *             next_deq.extend([c1, c2])
 *             if random_branches:             # <<<<<<<<<<<<<<
 *                 c1.dist = random.uniform(*branch_range)
 *                 c2.dist = random.uniform(*branch_range)
 */
      goto __pyx_L9;
    }

    /* "ete4/coretype/tree.pyx":1320
 *                 c2.support = random.uniform(*branch_range)
 *             else:
 *                 c1.dist = 1.0             # <<<<<<<<<<<<<<
 *                 c2.dist = 1.0
 *                 c1.support = 1.0
 */
    /*else*/ {
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c1, __pyx_n_s_dist, __pyx_float_1_0) < 0) __PYX_ERR(0, 1320, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1321
 *             else:
 *                 c1.dist = 1.0
 *                 c2.dist = 1.0             # <<<<<<<<<<<<<<
 *                 c1.support = 1.0
 *                 c2.support = 1.0
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c2, __pyx_n_s_dist, __pyx_float_1_0) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1322
 *                 c1.dist = 1.0
 *                 c2.dist = 1.0
 *                 c1.support = 1.0             # <<<<<<<<<<<<<<
 *                 c2.support = 1.0
 * 
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c1, __pyx_n_s_support, __pyx_float_1_0) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1323
 *                 c2.dist = 1.0
 *                 c1.support = 1.0
 *                 c2.support = 1.0             # <<<<<<<<<<<<<<
 * 
 *         # next contains leaf nodes
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_c2, __pyx_n_s_support, __pyx_float_1_0) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
    }
    __pyx_L9:;

    /* "ete4/coretype/tree.pyx":1305
 * 
 *         next_deq = deque([root])
 *         for i in range(size-1):             # <<<<<<<<<<<<<<
 *             if random.randint(0, 1):
 *                 p = next_deq.pop()
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":1326
 * 
 *         # next contains leaf nodes
 *         charset =  "abcdefghijklmnopqrstuvwxyz"             # <<<<<<<<<<<<<<
 *         if names_library:
 *             names_library = deque(names_library)
 */
  __Pyx_INCREF(__pyx_n_s_abcdefghijklmnopqrstuvwxyz);
  __pyx_v_charset = __pyx_n_s_abcdefghijklmnopqrstuvwxyz;

  /* "ete4/coretype/tree.pyx":1327
 *         # next contains leaf nodes
 *         charset =  "abcdefghijklmnopqrstuvwxyz"
 *         if names_library:             # <<<<<<<<<<<<<<
 *             names_library = deque(names_library)
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_names_library); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1327, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":1328
 *         charset =  "abcdefghijklmnopqrstuvwxyz"
 *         if names_library:
 *             names_library = deque(names_library)             # <<<<<<<<<<<<<<
 *         else:
 *             avail_names = itertools.combinations_with_replacement(charset, 10)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_names_library) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_names_library);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_names_library, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1327
 *         # next contains leaf nodes
 *         charset =  "abcdefghijklmnopqrstuvwxyz"
 *         if names_library:             # <<<<<<<<<<<<<<
 *             names_library = deque(names_library)
 *         else:
 */
    goto __pyx_L10;
  }

  /* "ete4/coretype/tree.pyx":1330
 *             names_library = deque(names_library)
 *         else:
 *             avail_names = itertools.combinations_with_replacement(charset, 10)             # <<<<<<<<<<<<<<
 *         for n in next_deq:
 *             if names_library:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_itertools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_combinations_with_replacement); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_charset, __pyx_int_10};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_charset, __pyx_int_10};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_charset);
      __Pyx_GIVEREF(__pyx_v_charset);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_v_charset);
      __Pyx_INCREF(__pyx_int_10);
      __Pyx_GIVEREF(__pyx_int_10);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_int_10);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_avail_names = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_L10:;

  /* "ete4/coretype/tree.pyx":1331
 *         else:
 *             avail_names = itertools.combinations_with_replacement(charset, 10)
 *         for n in next_deq:             # <<<<<<<<<<<<<<
 *             if names_library:
 *                 if reuse_names:
 */
  if (likely(PyList_CheckExact(__pyx_v_next_deq)) || PyTuple_CheckExact(__pyx_v_next_deq)) {
    __pyx_t_7 = __pyx_v_next_deq; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_next_deq); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1331, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1331, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1331, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_7);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1331, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1332
 *             avail_names = itertools.combinations_with_replacement(charset, 10)
 *         for n in next_deq:
 *             if names_library:             # <<<<<<<<<<<<<<
 *                 if reuse_names:
 *                     tname = random.sample(names_library, 1)[0]
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_names_library); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1332, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "ete4/coretype/tree.pyx":1333
 *         for n in next_deq:
 *             if names_library:
 *                 if reuse_names:             # <<<<<<<<<<<<<<
 *                     tname = random.sample(names_library, 1)[0]
 *                 else:
 */
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_reuse_names); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1333, __pyx_L1_error)
      if (__pyx_t_3) {

        /* "ete4/coretype/tree.pyx":1334
 *             if names_library:
 *                 if reuse_names:
 *                     tname = random.sample(names_library, 1)[0]             # <<<<<<<<<<<<<<
 *                 else:
 *                     tname = names_library.pop()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_9 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_names_library, __pyx_int_1};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_names_library, __pyx_int_1};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1334, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(__pyx_v_names_library);
          __Pyx_GIVEREF(__pyx_v_names_library);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_v_names_library);
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_int_1);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_tname, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "ete4/coretype/tree.pyx":1333
 *         for n in next_deq:
 *             if names_library:
 *                 if reuse_names:             # <<<<<<<<<<<<<<
 *                     tname = random.sample(names_library, 1)[0]
 *                 else:
 */
        goto __pyx_L14;
      }

      /* "ete4/coretype/tree.pyx":1336
 *                     tname = random.sample(names_library, 1)[0]
 *                 else:
 *                     tname = names_library.pop()             # <<<<<<<<<<<<<<
 *             else:
 *                 tname = ''.join(next(avail_names))
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_Pop(__pyx_v_names_library); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_tname, __pyx_t_1);
        __pyx_t_1 = 0;
      }
      __pyx_L14:;

      /* "ete4/coretype/tree.pyx":1332
 *             avail_names = itertools.combinations_with_replacement(charset, 10)
 *         for n in next_deq:
 *             if names_library:             # <<<<<<<<<<<<<<
 *                 if reuse_names:
 *                     tname = random.sample(names_library, 1)[0]
 */
      goto __pyx_L13;
    }

    /* "ete4/coretype/tree.pyx":1338
 *                     tname = names_library.pop()
 *             else:
 *                 tname = ''.join(next(avail_names))             # <<<<<<<<<<<<<<
 *             n.name = tname
 * 
 */
    /*else*/ {
      if (unlikely(!__pyx_v_avail_names)) { __Pyx_RaiseUnboundLocalError("avail_names"); __PYX_ERR(0, 1338, __pyx_L1_error) }
      __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_avail_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tname, __pyx_t_4);
      __pyx_t_4 = 0;
    }
    __pyx_L13:;

    /* "ete4/coretype/tree.pyx":1339
 *             else:
 *                 tname = ''.join(next(avail_names))
 *             n.name = tname             # <<<<<<<<<<<<<<
 * 
 *     def set_outgroup(self, outgroup, branch_properties=None):
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_n, __pyx_n_s_name, __pyx_v_tname) < 0) __PYX_ERR(0, 1339, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1331
 *         else:
 *             avail_names = itertools.combinations_with_replacement(charset, 10)
 *         for n in next_deq:             # <<<<<<<<<<<<<<
 *             if names_library:
 *                 if reuse_names:
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":1267
 *         return current
 * 
 *     def populate(self, size, names_library=None, reuse_names=False,             # <<<<<<<<<<<<<<
 *                  random_branches=False, branch_range=(0,1),
 *                  support_range=(0,1)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.populate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_NewNode);
  __Pyx_XDECREF(__pyx_v_connector);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_next_deq);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_c1);
  __Pyx_XDECREF(__pyx_v_c2);
  __Pyx_XDECREF(__pyx_v_charset);
  __Pyx_XDECREF(__pyx_v_avail_names);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_tname);
  __Pyx_XDECREF(__pyx_v_names_library);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1341
 *             n.name = tname
 * 
 *     def set_outgroup(self, outgroup, branch_properties=None):             # <<<<<<<<<<<<<<
 *         """
 *         Sets a descendant node as the outgroup of a tree.  This function
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_170set_outgroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_169set_outgroup[] = "\n        Sets a descendant node as the outgroup of a tree.  This function\n        can be used to root a tree or even an internal node.\n\n        :outgroup: a node instance within the same tree\n          structure that will be used as a basal node.\n        :branch_properties: list of branch properties (other than \"support\").\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_170set_outgroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_outgroup = 0;
  PyObject *__pyx_v_branch_properties = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_outgroup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_outgroup,&__pyx_n_s_branch_properties,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outgroup)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_branch_properties);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_outgroup") < 0)) __PYX_ERR(0, 1341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_outgroup = values[0];
    __pyx_v_branch_properties = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_outgroup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.set_outgroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_169set_outgroup(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_outgroup, __pyx_v_branch_properties);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_169set_outgroup(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_outgroup, PyObject *__pyx_v_branch_properties) {
  PyObject *__pyx_v_root_at = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_outgroup", 0);

  /* "ete4/coretype/tree.pyx":1350
 *         :branch_properties: list of branch properties (other than "support").
 *         """
 *         from ete4.smartview.ete.gardening import root_at             # <<<<<<<<<<<<<<
 *         return root_at(outgroup, branch_properties)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_root_at);
  __Pyx_GIVEREF(__pyx_n_s_root_at);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_root_at);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ete4_smartview_ete_gardening, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_root_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_root_at = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1351
 *         """
 *         from ete4.smartview.ete.gardening import root_at
 *         return root_at(outgroup, branch_properties)             # <<<<<<<<<<<<<<
 * 
 *     def unroot(self, mode='legacy'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_root_at);
  __pyx_t_1 = __pyx_v_root_at; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_outgroup, __pyx_v_branch_properties};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_outgroup, __pyx_v_branch_properties};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_outgroup);
    __Pyx_GIVEREF(__pyx_v_outgroup);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_outgroup);
    __Pyx_INCREF(__pyx_v_branch_properties);
    __Pyx_GIVEREF(__pyx_v_branch_properties);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_branch_properties);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1341
 *             n.name = tname
 * 
 *     def set_outgroup(self, outgroup, branch_properties=None):             # <<<<<<<<<<<<<<
 *         """
 *         Sets a descendant node as the outgroup of a tree.  This function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.set_outgroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_root_at);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1353
 *         return root_at(outgroup, branch_properties)
 * 
 *     def unroot(self, mode='legacy'):             # <<<<<<<<<<<<<<
 *         """
 *         Unroots current node. This function is expected to be used on
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_172unroot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_171unroot[] = "\n        Unroots current node. This function is expected to be used on\n        the absolute tree root node, but it can be also be applied to\n        any other internal node. It will convert a split into a\n        multifurcation.\n\n        :argument \"legacy\" mode: The value can be \"legacy\" or \"keep\".\n        If value is \"keep\", then function keeps the distance between\n        the leaves by adding the distance associated to the deleted\n        edge to the remaining edge. In the other case the distance\n        value of the deleted edge is dropped\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_172unroot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unroot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_legacy);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unroot") < 0)) __PYX_ERR(0, 1353, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mode = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unroot", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1353, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.unroot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_171unroot(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_171unroot(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unroot", 0);

  /* "ete4/coretype/tree.pyx":1367
 * 
 *         """
 *         if not (mode == 'legacy' or mode == 'keep'):             # <<<<<<<<<<<<<<
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")
 *         if len(self.children)==2:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_legacy, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1367, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_keep, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "ete4/coretype/tree.pyx":1368
 *         """
 *         if not (mode == 'legacy' or mode == 'keep'):
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")             # <<<<<<<<<<<<<<
 *         if len(self.children)==2:
 *             if not self.children[0].is_leaf():
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1368, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1367
 * 
 *         """
 *         if not (mode == 'legacy' or mode == 'keep'):             # <<<<<<<<<<<<<<
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")
 *         if len(self.children)==2:
 */
  }

  /* "ete4/coretype/tree.pyx":1369
 *         if not (mode == 'legacy' or mode == 'keep'):
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")
 *         if len(self.children)==2:             # <<<<<<<<<<<<<<
 *             if not self.children[0].is_leaf():
 *                 if mode == "keep":
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((__pyx_t_4 == 2) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1370
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")
 *         if len(self.children)==2:
 *             if not self.children[0].is_leaf():             # <<<<<<<<<<<<<<
 *                 if mode == "keep":
 *                     self.children[1].dist+=self.children[0].dist
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((!__pyx_t_2) != 0);
    if (__pyx_t_1) {

      /* "ete4/coretype/tree.pyx":1371
 *         if len(self.children)==2:
 *             if not self.children[0].is_leaf():
 *                 if mode == "keep":             # <<<<<<<<<<<<<<
 *                     self.children[1].dist+=self.children[0].dist
 *                 self.children[0].delete()
 */
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_keep, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1371, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1372
 *             if not self.children[0].is_leaf():
 *                 if mode == "keep":
 *                     self.children[1].dist+=self.children[0].dist             # <<<<<<<<<<<<<<
 *                 self.children[0].delete()
 *             elif not self.children[1].is_leaf():
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_dist); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_t_5, __pyx_n_s_dist, __pyx_t_7) < 0) __PYX_ERR(0, 1372, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ete4/coretype/tree.pyx":1371
 *         if len(self.children)==2:
 *             if not self.children[0].is_leaf():
 *                 if mode == "keep":             # <<<<<<<<<<<<<<
 *                     self.children[1].dist+=self.children[0].dist
 *                 self.children[0].delete()
 */
      }

      /* "ete4/coretype/tree.pyx":1373
 *                 if mode == "keep":
 *                     self.children[1].dist+=self.children[0].dist
 *                 self.children[0].delete()             # <<<<<<<<<<<<<<
 *             elif not self.children[1].is_leaf():
 *                 if mode == "keep":
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_delete); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":1370
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")
 *         if len(self.children)==2:
 *             if not self.children[0].is_leaf():             # <<<<<<<<<<<<<<
 *                 if mode == "keep":
 *                     self.children[1].dist+=self.children[0].dist
 */
      goto __pyx_L7;
    }

    /* "ete4/coretype/tree.pyx":1374
 *                     self.children[1].dist+=self.children[0].dist
 *                 self.children[0].delete()
 *             elif not self.children[1].is_leaf():             # <<<<<<<<<<<<<<
 *                 if mode == "keep":
 *                     self.children[0].dist+=self.children[1].dist
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (likely(__pyx_t_2)) {

      /* "ete4/coretype/tree.pyx":1375
 *                 self.children[0].delete()
 *             elif not self.children[1].is_leaf():
 *                 if mode == "keep":             # <<<<<<<<<<<<<<
 *                     self.children[0].dist+=self.children[1].dist
 *                 self.children[1].delete()
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_keep, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1375, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1376
 *             elif not self.children[1].is_leaf():
 *                 if mode == "keep":
 *                     self.children[0].dist+=self.children[1].dist             # <<<<<<<<<<<<<<
 *                 self.children[1].delete()
 *             else:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_dist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dist); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_t_7, __pyx_n_s_dist, __pyx_t_3) < 0) __PYX_ERR(0, 1376, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "ete4/coretype/tree.pyx":1375
 *                 self.children[0].delete()
 *             elif not self.children[1].is_leaf():
 *                 if mode == "keep":             # <<<<<<<<<<<<<<
 *                     self.children[0].dist+=self.children[1].dist
 *                 self.children[1].delete()
 */
      }

      /* "ete4/coretype/tree.pyx":1377
 *                 if mode == "keep":
 *                     self.children[0].dist+=self.children[1].dist
 *                 self.children[1].delete()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TreeError("Cannot unroot a tree with only two leaves")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_delete); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1374
 *                     self.children[1].dist+=self.children[0].dist
 *                 self.children[0].delete()
 *             elif not self.children[1].is_leaf():             # <<<<<<<<<<<<<<
 *                 if mode == "keep":
 *                     self.children[0].dist+=self.children[1].dist
 */
      goto __pyx_L7;
    }

    /* "ete4/coretype/tree.pyx":1379
 *                 self.children[1].delete()
 *             else:
 *                 raise TreeError("Cannot unroot a tree with only two leaves")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_kp_s_Cannot_unroot_a_tree_with_only_t) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_Cannot_unroot_a_tree_with_only_t);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 1379, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "ete4/coretype/tree.pyx":1369
 *         if not (mode == 'legacy' or mode == 'keep'):
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")
 *         if len(self.children)==2:             # <<<<<<<<<<<<<<
 *             if not self.children[0].is_leaf():
 *                 if mode == "keep":
 */
  }

  /* "ete4/coretype/tree.pyx":1353
 *         return root_at(outgroup, branch_properties)
 * 
 *     def unroot(self, mode='legacy'):             # <<<<<<<<<<<<<<
 *         """
 *         Unroots current node. This function is expected to be used on
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.unroot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1382
 * 
 * 
 *     def show(self, layout=None, tree_style=None, name="ETE"):             # <<<<<<<<<<<<<<
 *         """
 *         Starts an interactive session to visualize current node
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_174show(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_173show[] = "\n        Starts an interactive session to visualize current node\n        structure using provided layout and TreeStyle.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_174show(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_layout = 0;
  PyObject *__pyx_v_tree_style = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_layout,&__pyx_n_s_tree_style,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_n_s_ETE);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_layout);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_style);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show") < 0)) __PYX_ERR(0, 1382, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_layout = values[0];
    __pyx_v_tree_style = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_173show(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_layout, __pyx_v_tree_style, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_173show(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_layout, PyObject *__pyx_v_tree_style, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_drawer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "ete4/coretype/tree.pyx":1388
 * 
 *         """
 *         from ..treeview import drawer             # <<<<<<<<<<<<<<
 *         drawer.show_tree(self, layout=layout,
 *                          tree_style=tree_style, win_name=name)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_drawer);
  __Pyx_GIVEREF(__pyx_n_s_drawer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_drawer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_treeview, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_drawer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_drawer = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1389
 *         """
 *         from ..treeview import drawer
 *         drawer.show_tree(self, layout=layout,             # <<<<<<<<<<<<<<
 *                          tree_style=tree_style, win_name=name)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_drawer, __pyx_n_s_show_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_layout, __pyx_v_layout) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1390
 *         from ..treeview import drawer
 *         drawer.show_tree(self, layout=layout,
 *                          tree_style=tree_style, win_name=name)             # <<<<<<<<<<<<<<
 * 
 *     def render(self, file_name, layout=None, w=None, h=None, \
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_tree_style, __pyx_v_tree_style) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_win_name, __pyx_v_name) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1389
 *         """
 *         from ..treeview import drawer
 *         drawer.show_tree(self, layout=layout,             # <<<<<<<<<<<<<<
 *                          tree_style=tree_style, win_name=name)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1382
 * 
 * 
 *     def show(self, layout=None, tree_style=None, name="ETE"):             # <<<<<<<<<<<<<<
 *         """
 *         Starts an interactive session to visualize current node
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_drawer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1392
 *                          tree_style=tree_style, win_name=name)
 * 
 *     def render(self, file_name, layout=None, w=None, h=None, \             # <<<<<<<<<<<<<<
 *                        tree_style=None, units="px", dpi=90):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_176render(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_175render[] = "\n        Renders the node structure as an image.\n\n        :var file_name: path to the output image file. valid\n          extensions are .SVG, .PDF, .PNG\n\n        :var layout: a layout function or a valid layout function name\n\n        :var tree_style: a `TreeStyle` instance containing the image\n          properties\n\n        :var px units: \"px\": pixels, \"mm\": millimeters, \"in\": inches\n        :var None h: height of the image in :attr:`units`\n        :var None w: width of the image in :attr:`units`\n        :var 90 dpi: dots per inches.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_176render(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_name = 0;
  PyObject *__pyx_v_layout = 0;
  PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_h = 0;
  PyObject *__pyx_v_tree_style = 0;
  PyObject *__pyx_v_units = 0;
  PyObject *__pyx_v_dpi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_name,&__pyx_n_s_layout,&__pyx_n_s_w,&__pyx_n_s_h,&__pyx_n_s_tree_style,&__pyx_n_s_units,&__pyx_n_s_dpi,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);

    /* "ete4/coretype/tree.pyx":1393
 * 
 *     def render(self, file_name, layout=None, w=None, h=None, \
 *                        tree_style=None, units="px", dpi=90):             # <<<<<<<<<<<<<<
 *         """
 *         Renders the node structure as an image.
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)__pyx_n_s_px);
    values[6] = ((PyObject *)__pyx_int_90);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_layout);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_h);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_style);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_units);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpi);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "render") < 0)) __PYX_ERR(0, 1392, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file_name = values[0];
    __pyx_v_layout = values[1];
    __pyx_v_w = values[2];
    __pyx_v_h = values[3];
    __pyx_v_tree_style = values[4];
    __pyx_v_units = values[5];
    __pyx_v_dpi = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("render", 0, 1, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_175render(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_file_name, __pyx_v_layout, __pyx_v_w, __pyx_v_h, __pyx_v_tree_style, __pyx_v_units, __pyx_v_dpi);

  /* "ete4/coretype/tree.pyx":1392
 *                          tree_style=tree_style, win_name=name)
 * 
 *     def render(self, file_name, layout=None, w=None, h=None, \             # <<<<<<<<<<<<<<
 *                        tree_style=None, units="px", dpi=90):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_175render(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_layout, PyObject *__pyx_v_w, PyObject *__pyx_v_h, PyObject *__pyx_v_tree_style, PyObject *__pyx_v_units, PyObject *__pyx_v_dpi) {
  PyObject *__pyx_v_drawer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("render", 0);

  /* "ete4/coretype/tree.pyx":1412
 *         """
 * 
 *         from ..treeview import drawer             # <<<<<<<<<<<<<<
 *         if file_name.startswith('%%return'):
 *             return drawer.get_img(self, w=w, h=h,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_drawer);
  __Pyx_GIVEREF(__pyx_n_s_drawer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_drawer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_treeview, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_drawer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_drawer = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1413
 * 
 *         from ..treeview import drawer
 *         if file_name.startswith('%%return'):             # <<<<<<<<<<<<<<
 *             return drawer.get_img(self, w=w, h=h,
 *                                   layout=layout, tree_style=tree_style,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file_name, __pyx_n_s_startswith); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_kp_s_return) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_return);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":1414
 *         from ..treeview import drawer
 *         if file_name.startswith('%%return'):
 *             return drawer.get_img(self, w=w, h=h,             # <<<<<<<<<<<<<<
 *                                   layout=layout, tree_style=tree_style,
 *                                   units=units, dpi=dpi, return_format=file_name)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_drawer, __pyx_n_s_get_img); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
    __pyx_t_3 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_w, __pyx_v_w) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_h, __pyx_v_h) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1415
 *         if file_name.startswith('%%return'):
 *             return drawer.get_img(self, w=w, h=h,
 *                                   layout=layout, tree_style=tree_style,             # <<<<<<<<<<<<<<
 *                                   units=units, dpi=dpi, return_format=file_name)
 *         else:
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_layout, __pyx_v_layout) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_tree_style, __pyx_v_tree_style) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1416
 *             return drawer.get_img(self, w=w, h=h,
 *                                   layout=layout, tree_style=tree_style,
 *                                   units=units, dpi=dpi, return_format=file_name)             # <<<<<<<<<<<<<<
 *         else:
 *             return drawer.render_tree(self, file_name, w=w, h=h,
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_units, __pyx_v_units) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dpi, __pyx_v_dpi) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return_format, __pyx_v_file_name) < 0) __PYX_ERR(0, 1414, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1414
 *         from ..treeview import drawer
 *         if file_name.startswith('%%return'):
 *             return drawer.get_img(self, w=w, h=h,             # <<<<<<<<<<<<<<
 *                                   layout=layout, tree_style=tree_style,
 *                                   units=units, dpi=dpi, return_format=file_name)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":1413
 * 
 *         from ..treeview import drawer
 *         if file_name.startswith('%%return'):             # <<<<<<<<<<<<<<
 *             return drawer.get_img(self, w=w, h=h,
 *                                   layout=layout, tree_style=tree_style,
 */
  }

  /* "ete4/coretype/tree.pyx":1418
 *                                   units=units, dpi=dpi, return_format=file_name)
 *         else:
 *             return drawer.render_tree(self, file_name, w=w, h=h,             # <<<<<<<<<<<<<<
 *                                     layout=layout, tree_style=tree_style,
 *                                       units=units, dpi=dpi)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_drawer, __pyx_n_s_render_tree); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_file_name);
    __Pyx_GIVEREF(__pyx_v_file_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_file_name);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_w, __pyx_v_w) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_h, __pyx_v_h) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1419
 *         else:
 *             return drawer.render_tree(self, file_name, w=w, h=h,
 *                                     layout=layout, tree_style=tree_style,             # <<<<<<<<<<<<<<
 *                                       units=units, dpi=dpi)
 * 
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_layout, __pyx_v_layout) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tree_style, __pyx_v_tree_style) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1420
 *             return drawer.render_tree(self, file_name, w=w, h=h,
 *                                     layout=layout, tree_style=tree_style,
 *                                       units=units, dpi=dpi)             # <<<<<<<<<<<<<<
 * 
 *     def explore(self, tree_name=None, tree_style=None, layouts=[], port=5000):
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_units, __pyx_v_units) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dpi, __pyx_v_dpi) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1418
 *                                   units=units, dpi=dpi, return_format=file_name)
 *         else:
 *             return drawer.render_tree(self, file_name, w=w, h=h,             # <<<<<<<<<<<<<<
 *                                     layout=layout, tree_style=tree_style,
 *                                       units=units, dpi=dpi)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":1392
 *                          tree_style=tree_style, win_name=name)
 * 
 *     def render(self, file_name, layout=None, w=None, h=None, \             # <<<<<<<<<<<<<<
 *                        tree_style=None, units="px", dpi=90):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_drawer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1422
 *                                       units=units, dpi=dpi)
 * 
 *     def explore(self, tree_name=None, tree_style=None, layouts=[], port=5000):             # <<<<<<<<<<<<<<
 *         """
 *         Starts an interactive smartview session to visualize current node
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_178explore(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_177explore[] = "\n        Starts an interactive smartview session to visualize current node\n        structure using provided TreeStyle.\n\n        :tree_name string: name used to store tree in local database.\n        Automatically generated if not provided.\n\n        :tree_style TreeStyle: default TreeStyle if not provided.\n\n        :layouts: list of layout functions that will be available from the\n        front end. It is important to name functions (__name__), as they will\n        be adressed by such in the explorer.\n        By default it includes: outline, leaf_name, branch_length \n        and branch_support.\n\n        :port: port used to run the local server (127.0.0.1). Default 5000\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_178explore(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree_name = 0;
  PyObject *__pyx_v_tree_style = 0;
  PyObject *__pyx_v_layouts = 0;
  PyObject *__pyx_v_port = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("explore (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree_name,&__pyx_n_s_tree_style,&__pyx_n_s_layouts,&__pyx_n_s_port,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = __pyx_k__12;
    values[3] = ((PyObject *)__pyx_int_5000);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_name);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_style);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_layouts);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_port);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "explore") < 0)) __PYX_ERR(0, 1422, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tree_name = values[0];
    __pyx_v_tree_style = values[1];
    __pyx_v_layouts = values[2];
    __pyx_v_port = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("explore", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.explore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_177explore(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_tree_name, __pyx_v_tree_style, __pyx_v_layouts, __pyx_v_port);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_177explore(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_tree_name, PyObject *__pyx_v_tree_style, PyObject *__pyx_v_layouts, PyObject *__pyx_v_port) {
  PyObject *__pyx_v_run_smartview = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("explore", 0);

  /* "ete4/coretype/tree.pyx":1440
 *         :port: port used to run the local server (127.0.0.1). Default 5000
 *         """
 *         from ete4.smartview.gui.server import run_smartview             # <<<<<<<<<<<<<<
 * 
 *         run_smartview(newick=self.write(format=1),
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_run_smartview);
  __Pyx_GIVEREF(__pyx_n_s_run_smartview);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_run_smartview);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ete4_smartview_gui_server, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_run_smartview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_run_smartview = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1442
 *         from ete4.smartview.gui.server import run_smartview
 * 
 *         run_smartview(newick=self.write(format=1),             # <<<<<<<<<<<<<<
 *                 tree_name=tree_name, tree_style=tree_style, layouts=layouts,
 *                 port=port)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_format, __pyx_int_1) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_newick, __pyx_t_4) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1443
 * 
 *         run_smartview(newick=self.write(format=1),
 *                 tree_name=tree_name, tree_style=tree_style, layouts=layouts,             # <<<<<<<<<<<<<<
 *                 port=port)
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_tree_name, __pyx_v_tree_name) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_tree_style, __pyx_v_tree_style) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_layouts, __pyx_v_layouts) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1444
 *         run_smartview(newick=self.write(format=1),
 *                 tree_name=tree_name, tree_style=tree_style, layouts=layouts,
 *                 port=port)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self, method="cpickle"):
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_port, __pyx_v_port) < 0) __PYX_ERR(0, 1442, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1442
 *         from ete4.smartview.gui.server import run_smartview
 * 
 *         run_smartview(newick=self.write(format=1),             # <<<<<<<<<<<<<<
 *                 tree_name=tree_name, tree_style=tree_style, layouts=layouts,
 *                 port=port)
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_v_run_smartview, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1422
 *                                       units=units, dpi=dpi)
 * 
 *     def explore(self, tree_name=None, tree_style=None, layouts=[], port=5000):             # <<<<<<<<<<<<<<
 *         """
 *         Starts an interactive smartview session to visualize current node
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.explore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_run_smartview);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1446
 *                 port=port)
 * 
 *     def copy(self, method="cpickle"):             # <<<<<<<<<<<<<<
 *         """.. versionadded: 2.1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_180copy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_179copy[] = ".. versionadded: 2.1\n\n        Returns a copy of the current node.\n\n        :var cpickle method: Protocol used to copy the node\n        structure. The following values are accepted:\n\n           - \"newick\": Tree topology, node names, branch lengths and\n             branch support values will be copied by as represented in\n             the newick string (copy by newick string serialisation).\n\n           - \"newick-extended\": Tree topology and all node properties\n             will be copied based on the extended newick format\n             representation. Only node properties will be copied, thus\n             excluding other node attributes. As this method is also\n             based on newick serialisation, properties will be converted\n             into text strings when making the copy.\n\n           - \"cpickle\": The whole node structure and its content is\n             cloned based on cPickle object serialisation (slower, but\n             recommended for full tree copying)\n\n           - \"deepcopy\": The whole node structure and its content is\n             copied based on the standard \"copy\" Python functionality\n             (this is the slowest method but it allows to copy complex\n             objects even if attributes point to lambda functions,\n             etc.)\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_180copy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_method = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_method,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_cpickle);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_method);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy") < 0)) __PYX_ERR(0, 1446, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_method = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1446, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_179copy(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_method);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_179copy(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_method) {
  PyObject *__pyx_v_new_node = NULL;
  PyObject *__pyx_v_parent = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_INCREF(__pyx_v_method);

  /* "ete4/coretype/tree.pyx":1476
 * 
 *         """
 *         method = method.lower()             # <<<<<<<<<<<<<<
 *         if method=="newick":
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_method, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_method, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1477
 *         """
 *         method = method.lower()
 *         if method=="newick":             # <<<<<<<<<<<<<<
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))
 *         elif method=="newick-extended":
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_method, __pyx_n_s_newick, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1477, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":1478
 *         method = method.lower()
 *         if method=="newick":
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))             # <<<<<<<<<<<<<<
 *         elif method=="newick-extended":
 *             new_node = self.__class__(self.write(properties=[], format=1))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_name);
    __Pyx_GIVEREF(__pyx_n_s_name);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_name);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_properties, __pyx_t_6) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_format, __pyx_int_1) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_node = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1477
 *         """
 *         method = method.lower()
 *         if method=="newick":             # <<<<<<<<<<<<<<
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))
 *         elif method=="newick-extended":
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1479
 *         if method=="newick":
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))
 *         elif method=="newick-extended":             # <<<<<<<<<<<<<<
 *             new_node = self.__class__(self.write(properties=[], format=1))
 *         elif method == "deepcopy":
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_method, __pyx_kp_s_newick_extended, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1479, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":1480
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))
 *         elif method=="newick-extended":
 *             new_node = self.__class__(self.write(properties=[], format=1))             # <<<<<<<<<<<<<<
 *         elif method == "deepcopy":
 *             parent = self.up
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_properties, __pyx_t_3) < 0) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_format, __pyx_int_1) < 0) __PYX_ERR(0, 1480, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_node = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1479
 *         if method=="newick":
 *             new_node = self.__class__(self.write(properties=["name"], format=1)) #, format_root_node=True))
 *         elif method=="newick-extended":             # <<<<<<<<<<<<<<
 *             new_node = self.__class__(self.write(properties=[], format=1))
 *         elif method == "deepcopy":
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1481
 *         elif method=="newick-extended":
 *             new_node = self.__class__(self.write(properties=[], format=1))
 *         elif method == "deepcopy":             # <<<<<<<<<<<<<<
 *             parent = self.up
 *             self.up = None
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_method, __pyx_n_s_deepcopy, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1481, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":1482
 *             new_node = self.__class__(self.write(properties=[], format=1))
 *         elif method == "deepcopy":
 *             parent = self.up             # <<<<<<<<<<<<<<
 *             self.up = None
 *             new_node = copy.deepcopy(self)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_parent = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1483
 *         elif method == "deepcopy":
 *             parent = self.up
 *             self.up = None             # <<<<<<<<<<<<<<
 *             new_node = copy.deepcopy(self)
 *             self.up = parent
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up, Py_None) < 0) __PYX_ERR(0, 1483, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1484
 *             parent = self.up
 *             self.up = None
 *             new_node = copy.deepcopy(self)             # <<<<<<<<<<<<<<
 *             self.up = parent
 *         elif method == "cpickle":
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_new_node = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1485
 *             self.up = None
 *             new_node = copy.deepcopy(self)
 *             self.up = parent             # <<<<<<<<<<<<<<
 *         elif method == "cpickle":
 *             parent = self.up
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up, __pyx_v_parent) < 0) __PYX_ERR(0, 1485, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1481
 *         elif method=="newick-extended":
 *             new_node = self.__class__(self.write(properties=[], format=1))
 *         elif method == "deepcopy":             # <<<<<<<<<<<<<<
 *             parent = self.up
 *             self.up = None
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1486
 *             new_node = copy.deepcopy(self)
 *             self.up = parent
 *         elif method == "cpickle":             # <<<<<<<<<<<<<<
 *             parent = self.up
 *             self.up = None
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_method, __pyx_n_s_cpickle, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1486, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "ete4/coretype/tree.pyx":1487
 *             self.up = parent
 *         elif method == "cpickle":
 *             parent = self.up             # <<<<<<<<<<<<<<
 *             self.up = None
 *             new_node = cPickle.loads(cPickle.dumps(self, 2))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_parent = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1488
 *         elif method == "cpickle":
 *             parent = self.up
 *             self.up = None             # <<<<<<<<<<<<<<
 *             new_node = cPickle.loads(cPickle.dumps(self, 2))
 *             self.up = parent
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up, Py_None) < 0) __PYX_ERR(0, 1488, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1489
 *             parent = self.up
 *             self.up = None
 *             new_node = cPickle.loads(cPickle.dumps(self, 2))             # <<<<<<<<<<<<<<
 *             self.up = parent
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cPickle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_loads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_cPickle); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dumps); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_int_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_int_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_int_2);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_new_node = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1490
 *             self.up = None
 *             new_node = cPickle.loads(cPickle.dumps(self, 2))
 *             self.up = parent             # <<<<<<<<<<<<<<
 *         else:
 *             raise TreeError("Invalid copy method")
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_up, __pyx_v_parent) < 0) __PYX_ERR(0, 1490, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1486
 *             new_node = copy.deepcopy(self)
 *             self.up = parent
 *         elif method == "cpickle":             # <<<<<<<<<<<<<<
 *             parent = self.up
 *             self.up = None
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1492
 *             self.up = parent
 *         else:
 *             raise TreeError("Invalid copy method")             # <<<<<<<<<<<<<<
 * 
 *         return new_node
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_Invalid_copy_method) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_Invalid_copy_method);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1492, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":1494
 *             raise TreeError("Invalid copy method")
 * 
 *         return new_node             # <<<<<<<<<<<<<<
 * 
 *     def _asciiArt(self, char1='-', show_internal=True, compact=False, attributes=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_new_node);
  __pyx_r = __pyx_v_new_node;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1446
 *                 port=port)
 * 
 *     def copy(self, method="cpickle"):             # <<<<<<<<<<<<<<
 *         """.. versionadded: 2.1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_node);
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XDECREF(__pyx_v_method);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1496
 *         return new_node
 * 
 *     def _asciiArt(self, char1='-', show_internal=True, compact=False, attributes=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the ASCII representation of the tree.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_182_asciiArt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_181_asciiArt[] = "\n        Returns the ASCII representation of the tree.\n\n        Code based on the PyCogent GPL project.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_182_asciiArt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_char1 = 0;
  PyObject *__pyx_v_show_internal = 0;
  PyObject *__pyx_v_compact = 0;
  PyObject *__pyx_v_attributes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_asciiArt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_char1,&__pyx_n_s_show_internal,&__pyx_n_s_compact,&__pyx_n_s_attributes,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)__pyx_kp_s__13);
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_char1);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_show_internal);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compact);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attributes);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_asciiArt") < 0)) __PYX_ERR(0, 1496, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_char1 = values[0];
    __pyx_v_show_internal = values[1];
    __pyx_v_compact = values[2];
    __pyx_v_attributes = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_asciiArt", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1496, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._asciiArt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_181_asciiArt(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_char1, __pyx_v_show_internal, __pyx_v_compact, __pyx_v_attributes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_181_asciiArt(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_char1, PyObject *__pyx_v_show_internal, PyObject *__pyx_v_compact, PyObject *__pyx_v_attributes) {
  PyObject *__pyx_v_node_name = NULL;
  PyObject *__pyx_v_LEN = NULL;
  PyObject *__pyx_v_PAD = NULL;
  PyObject *__pyx_v_PA = NULL;
  PyObject *__pyx_v_mids = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_char2 = NULL;
  PyObject *__pyx_v_clines = NULL;
  PyObject *__pyx_v_mid = NULL;
  PyObject *__pyx_v_lo = NULL;
  PyObject *__pyx_v_hi = NULL;
  PyObject *__pyx_v_end = NULL;
  PyObject *__pyx_v_prefixes = NULL;
  PyObject *__pyx_v_stem = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  long __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_asciiArt", 0);
  __Pyx_INCREF(__pyx_v_attributes);

  /* "ete4/coretype/tree.pyx":1502
 *         Code based on the PyCogent GPL project.
 *         """
 *         if not attributes:             # <<<<<<<<<<<<<<
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_attributes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1503
 *         """
 *         if not attributes:
 *             attributes = ["name"]             # <<<<<<<<<<<<<<
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes
 *                                         if self.props.get(v)]))
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_name);
    __Pyx_GIVEREF(__pyx_n_s_name);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_name);
    __Pyx_DECREF_SET(__pyx_v_attributes, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1502
 *         Code based on the PyCogent GPL project.
 *         """
 *         if not attributes:             # <<<<<<<<<<<<<<
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes
 */
  }

  /* "ete4/coretype/tree.pyx":1504
 *         if not attributes:
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes             # <<<<<<<<<<<<<<
 *                                         if self.props.get(v)]))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_map); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_v_attributes)) || PyTuple_CheckExact(__pyx_v_attributes)) {
    __pyx_t_6 = __pyx_v_attributes; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_attributes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1504, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1504, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1504, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1504, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "ete4/coretype/tree.pyx":1505
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes
 *                                         if self.props.get(v)]))             # <<<<<<<<<<<<<<
 * 
 *         LEN = max(3, len(node_name) if not self.children or show_internal else 3)
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_props); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_get); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_v_v) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_v);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1505, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_2) {

      /* "ete4/coretype/tree.pyx":1504
 *         if not attributes:
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes             # <<<<<<<<<<<<<<
 *                                         if self.props.get(v)]))
 * 
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_props); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_get); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_v_v) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_v);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ete4/coretype/tree.pyx":1505
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes
 *                                         if self.props.get(v)]))             # <<<<<<<<<<<<<<
 * 
 *         LEN = max(3, len(node_name) if not self.children or show_internal else 3)
 */
    }

    /* "ete4/coretype/tree.pyx":1504
 *         if not attributes:
 *             attributes = ["name"]
 *         node_name = ', '.join(map(str, [self.props.get(v) for v in attributes             # <<<<<<<<<<<<<<
 *                                         if self.props.get(v)]))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_12 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_12 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)(&PyString_Type)), __pyx_t_5};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, ((PyObject *)(&PyString_Type)), __pyx_t_5};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)(&PyString_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyString_Type)));
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_12, ((PyObject *)(&PyString_Type)));
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_12, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__14, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_node_name = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1507
 *                                         if self.props.get(v)]))
 * 
 *         LEN = max(3, len(node_name) if not self.children or show_internal else 3)             # <<<<<<<<<<<<<<
 *         PAD = ' ' * LEN
 *         PA = ' ' * (LEN-1)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = ((!__pyx_t_1) != 0);
  if (!__pyx_t_13) {
  } else {
    __pyx_t_2 = __pyx_t_13;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_show_internal); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_13;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {
    __pyx_t_14 = PyObject_Length(__pyx_v_node_name); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1507, __pyx_L1_error)
    __pyx_t_7 = __pyx_t_14;
  } else {
    __pyx_t_7 = 3;
  }
  __pyx_t_15 = 3;
  if (((__pyx_t_7 > __pyx_t_15) != 0)) {
    __pyx_t_14 = __pyx_t_7;
  } else {
    __pyx_t_14 = __pyx_t_15;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_LEN = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1508
 * 
 *         LEN = max(3, len(node_name) if not self.children or show_internal else 3)
 *         PAD = ' ' * LEN             # <<<<<<<<<<<<<<
 *         PA = ' ' * (LEN-1)
 *         if not self.is_leaf():
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_kp_s__15, __pyx_v_LEN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_PAD = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1509
 *         LEN = max(3, len(node_name) if not self.children or show_internal else 3)
 *         PAD = ' ' * LEN
 *         PA = ' ' * (LEN-1)             # <<<<<<<<<<<<<<
 *         if not self.is_leaf():
 *             mids = []
 */
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_v_LEN, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_kp_s__15, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_PA = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1510
 *         PAD = ' ' * LEN
 *         PA = ' ' * (LEN-1)
 *         if not self.is_leaf():             # <<<<<<<<<<<<<<
 *             mids = []
 *             result = []
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = ((!__pyx_t_2) != 0);
  if (__pyx_t_13) {

    /* "ete4/coretype/tree.pyx":1511
 *         PA = ' ' * (LEN-1)
 *         if not self.is_leaf():
 *             mids = []             # <<<<<<<<<<<<<<
 *             result = []
 *             for c in self.children:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_mids = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1512
 *         if not self.is_leaf():
 *             mids = []
 *             result = []             # <<<<<<<<<<<<<<
 *             for c in self.children:
 *                 if len(self.children) == 1:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1513
 *             mids = []
 *             result = []
 *             for c in self.children:             # <<<<<<<<<<<<<<
 *                 if len(self.children) == 1:
 *                     char2 = '/'
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1513, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1513, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1513, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1513, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "ete4/coretype/tree.pyx":1514
 *             result = []
 *             for c in self.children:
 *                 if len(self.children) == 1:             # <<<<<<<<<<<<<<
 *                     char2 = '/'
 *                 elif c is self.children[0]:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1514, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = ((__pyx_t_7 == 1) != 0);
      if (__pyx_t_13) {

        /* "ete4/coretype/tree.pyx":1515
 *             for c in self.children:
 *                 if len(self.children) == 1:
 *                     char2 = '/'             # <<<<<<<<<<<<<<
 *                 elif c is self.children[0]:
 *                     char2 = '/'
 */
        __Pyx_INCREF(__pyx_kp_s__16);
        __Pyx_XDECREF_SET(__pyx_v_char2, __pyx_kp_s__16);

        /* "ete4/coretype/tree.pyx":1514
 *             result = []
 *             for c in self.children:
 *                 if len(self.children) == 1:             # <<<<<<<<<<<<<<
 *                     char2 = '/'
 *                 elif c is self.children[0]:
 */
        goto __pyx_L12;
      }

      /* "ete4/coretype/tree.pyx":1516
 *                 if len(self.children) == 1:
 *                     char2 = '/'
 *                 elif c is self.children[0]:             # <<<<<<<<<<<<<<
 *                     char2 = '/'
 *                 elif c is self.children[-1]:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__pyx_v_c == __pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_2 = (__pyx_t_13 != 0);
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1517
 *                     char2 = '/'
 *                 elif c is self.children[0]:
 *                     char2 = '/'             # <<<<<<<<<<<<<<
 *                 elif c is self.children[-1]:
 *                     char2 = '\\'
 */
        __Pyx_INCREF(__pyx_kp_s__16);
        __Pyx_XDECREF_SET(__pyx_v_char2, __pyx_kp_s__16);

        /* "ete4/coretype/tree.pyx":1516
 *                 if len(self.children) == 1:
 *                     char2 = '/'
 *                 elif c is self.children[0]:             # <<<<<<<<<<<<<<
 *                     char2 = '/'
 *                 elif c is self.children[-1]:
 */
        goto __pyx_L12;
      }

      /* "ete4/coretype/tree.pyx":1518
 *                 elif c is self.children[0]:
 *                     char2 = '/'
 *                 elif c is self.children[-1]:             # <<<<<<<<<<<<<<
 *                     char2 = '\\'
 *                 else:
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1518, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_9, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_2 = (__pyx_v_c == __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__pyx_t_2 != 0);
      if (__pyx_t_13) {

        /* "ete4/coretype/tree.pyx":1519
 *                     char2 = '/'
 *                 elif c is self.children[-1]:
 *                     char2 = '\\'             # <<<<<<<<<<<<<<
 *                 else:
 *                     char2 = '-'
 */
        __Pyx_INCREF(__pyx_kp_s__17);
        __Pyx_XDECREF_SET(__pyx_v_char2, __pyx_kp_s__17);

        /* "ete4/coretype/tree.pyx":1518
 *                 elif c is self.children[0]:
 *                     char2 = '/'
 *                 elif c is self.children[-1]:             # <<<<<<<<<<<<<<
 *                     char2 = '\\'
 *                 else:
 */
        goto __pyx_L12;
      }

      /* "ete4/coretype/tree.pyx":1521
 *                     char2 = '\\'
 *                 else:
 *                     char2 = '-'             # <<<<<<<<<<<<<<
 *                 (clines, mid) = c._asciiArt(char2, show_internal, compact, attributes)
 *                 mids.append(mid+len(result))
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_kp_s__13);
        __Pyx_XDECREF_SET(__pyx_v_char2, __pyx_kp_s__13);
      }
      __pyx_L12:;

      /* "ete4/coretype/tree.pyx":1522
 *                 else:
 *                     char2 = '-'
 *                 (clines, mid) = c._asciiArt(char2, show_internal, compact, attributes)             # <<<<<<<<<<<<<<
 *                 mids.append(mid+len(result))
 *                 result.extend(clines)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_asciiArt); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_char2, __pyx_v_show_internal, __pyx_v_compact, __pyx_v_attributes};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 4+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_char2, __pyx_v_show_internal, __pyx_v_compact, __pyx_v_attributes};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 4+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(4+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_char2);
        __Pyx_GIVEREF(__pyx_v_char2);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_12, __pyx_v_char2);
        __Pyx_INCREF(__pyx_v_show_internal);
        __Pyx_GIVEREF(__pyx_v_show_internal);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_12, __pyx_v_show_internal);
        __Pyx_INCREF(__pyx_v_compact);
        __Pyx_GIVEREF(__pyx_v_compact);
        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_12, __pyx_v_compact);
        __Pyx_INCREF(__pyx_v_attributes);
        __Pyx_GIVEREF(__pyx_v_attributes);
        PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_12, __pyx_v_attributes);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1522, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_16 = Py_TYPE(__pyx_t_5)->tp_iternext;
        index = 0; __pyx_t_9 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_9)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 1; __pyx_t_6 = __pyx_t_16(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L13_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1522, __pyx_L1_error)
        __pyx_t_16 = NULL;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L14_unpacking_done;
        __pyx_L13_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_16 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1522, __pyx_L1_error)
        __pyx_L14_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_clines, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_mid, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1523
 *                     char2 = '-'
 *                 (clines, mid) = c._asciiArt(char2, show_internal, compact, attributes)
 *                 mids.append(mid+len(result))             # <<<<<<<<<<<<<<
 *                 result.extend(clines)
 *                 if not compact:
 */
      __pyx_t_7 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1523, __pyx_L1_error)
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyNumber_Add(__pyx_v_mid, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_mids, __pyx_t_6); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1523, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1524
 *                 (clines, mid) = c._asciiArt(char2, show_internal, compact, attributes)
 *                 mids.append(mid+len(result))
 *                 result.extend(clines)             # <<<<<<<<<<<<<<
 *                 if not compact:
 *                     result.append('')
 */
      __pyx_t_17 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_v_clines); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1524, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1525
 *                 mids.append(mid+len(result))
 *                 result.extend(clines)
 *                 if not compact:             # <<<<<<<<<<<<<<
 *                     result.append('')
 *             if not compact:
 */
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_compact); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1525, __pyx_L1_error)
      __pyx_t_2 = ((!__pyx_t_13) != 0);
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1526
 *                 result.extend(clines)
 *                 if not compact:
 *                     result.append('')             # <<<<<<<<<<<<<<
 *             if not compact:
 *                 result.pop()
 */
        __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_result, __pyx_kp_s_); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1526, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1525
 *                 mids.append(mid+len(result))
 *                 result.extend(clines)
 *                 if not compact:             # <<<<<<<<<<<<<<
 *                     result.append('')
 *             if not compact:
 */
      }

      /* "ete4/coretype/tree.pyx":1513
 *             mids = []
 *             result = []
 *             for c in self.children:             # <<<<<<<<<<<<<<
 *                 if len(self.children) == 1:
 *                     char2 = '/'
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1527
 *                 if not compact:
 *                     result.append('')
 *             if not compact:             # <<<<<<<<<<<<<<
 *                 result.pop()
 *             (lo, hi, end) = (mids[0], mids[-1], len(result))
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_compact); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __pyx_t_13 = ((!__pyx_t_2) != 0);
    if (__pyx_t_13) {

      /* "ete4/coretype/tree.pyx":1528
 *                     result.append('')
 *             if not compact:
 *                 result.pop()             # <<<<<<<<<<<<<<
 *             (lo, hi, end) = (mids[0], mids[-1], len(result))
 *             prefixes = [PAD] * (lo+1) + [PA+'|'] * (hi-lo-1) + [PAD] * (end-hi)
 */
      __pyx_t_4 = __Pyx_PyList_Pop(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1527
 *                 if not compact:
 *                     result.append('')
 *             if not compact:             # <<<<<<<<<<<<<<
 *                 result.pop()
 *             (lo, hi, end) = (mids[0], mids[-1], len(result))
 */
    }

    /* "ete4/coretype/tree.pyx":1529
 *             if not compact:
 *                 result.pop()
 *             (lo, hi, end) = (mids[0], mids[-1], len(result))             # <<<<<<<<<<<<<<
 *             prefixes = [PAD] * (lo+1) + [PA+'|'] * (hi-lo-1) + [PAD] * (end-hi)
 *             mid = int((lo + hi) / 2)
 */
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_mids, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_mids, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_14 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1529, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_lo = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_hi = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_v_end = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1530
 *                 result.pop()
 *             (lo, hi, end) = (mids[0], mids[-1], len(result))
 *             prefixes = [PAD] * (lo+1) + [PA+'|'] * (hi-lo-1) + [PAD] * (end-hi)             # <<<<<<<<<<<<<<
 *             mid = int((lo + hi) / 2)
 *             prefixes[mid] = char1 + '-'*(LEN-2) + prefixes[mid][-1]
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_lo, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_PAD);
    __Pyx_GIVEREF(__pyx_v_PAD);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_PAD);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = __pyx_temp;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_v_PA, __pyx_kp_s__18); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_hi, __pyx_v_lo); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_temp;
    }
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_end, __pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_PAD);
    __Pyx_GIVEREF(__pyx_v_PAD);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_PAD);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = __pyx_temp;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_9, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_prefixes = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1531
 *             (lo, hi, end) = (mids[0], mids[-1], len(result))
 *             prefixes = [PAD] * (lo+1) + [PA+'|'] * (hi-lo-1) + [PAD] * (end-hi)
 *             mid = int((lo + hi) / 2)             # <<<<<<<<<<<<<<
 *             prefixes[mid] = char1 + '-'*(LEN-2) + prefixes[mid][-1]
 *             result = [p+l for (p,l) in zip(prefixes, result)]
 */
    __pyx_t_4 = PyNumber_Add(__pyx_v_lo, __pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_int_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_mid, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1532
 *             prefixes = [PAD] * (lo+1) + [PA+'|'] * (hi-lo-1) + [PAD] * (end-hi)
 *             mid = int((lo + hi) / 2)
 *             prefixes[mid] = char1 + '-'*(LEN-2) + prefixes[mid][-1]             # <<<<<<<<<<<<<<
 *             result = [p+l for (p,l) in zip(prefixes, result)]
 *             if show_internal:
 */
    __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_v_LEN, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Multiply(__pyx_kp_s__13, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_v_char1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_prefixes, __pyx_v_mid); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_6, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_prefixes, __pyx_v_mid, __pyx_t_6) < 0)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":1533
 *             mid = int((lo + hi) / 2)
 *             prefixes[mid] = char1 + '-'*(LEN-2) + prefixes[mid][-1]
 *             result = [p+l for (p,l) in zip(prefixes, result)]             # <<<<<<<<<<<<<<
 *             if show_internal:
 *                 stem = result[mid]
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_zip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_prefixes, __pyx_v_result};
      __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_prefixes, __pyx_v_result};
      __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_9);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_prefixes);
      __Pyx_GIVEREF(__pyx_v_prefixes);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_12, __pyx_v_prefixes);
      __Pyx_INCREF(__pyx_v_result);
      __Pyx_GIVEREF(__pyx_v_result);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_12, __pyx_v_result);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_4 = __pyx_t_9; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1533, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_9); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1533, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_9); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1533, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_8(__pyx_t_4);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1533, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1533, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_16 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_16(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L19_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_3 = __pyx_t_16(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L19_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1533, __pyx_L1_error)
        __pyx_t_16 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L20_unpacking_done;
        __pyx_L19_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_16 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1533, __pyx_L1_error)
        __pyx_L20_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_9 = PyNumber_Add(__pyx_v_p, __pyx_v_l); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":1534
 *             prefixes[mid] = char1 + '-'*(LEN-2) + prefixes[mid][-1]
 *             result = [p+l for (p,l) in zip(prefixes, result)]
 *             if show_internal:             # <<<<<<<<<<<<<<
 *                 stem = result[mid]
 *                 result[mid] = stem[0] + node_name + stem[len(node_name)+1:]
 */
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_show_internal); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1534, __pyx_L1_error)
    if (__pyx_t_13) {

      /* "ete4/coretype/tree.pyx":1535
 *             result = [p+l for (p,l) in zip(prefixes, result)]
 *             if show_internal:
 *                 stem = result[mid]             # <<<<<<<<<<<<<<
 *                 result[mid] = stem[0] + node_name + stem[len(node_name)+1:]
 *             return (result, mid)
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_result, __pyx_v_mid); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_stem = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1536
 *             if show_internal:
 *                 stem = result[mid]
 *                 result[mid] = stem[0] + node_name + stem[len(node_name)+1:]             # <<<<<<<<<<<<<<
 *             return (result, mid)
 *         else:
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_stem, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_v_node_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = PyObject_Length(__pyx_v_node_name); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1536, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_stem, (__pyx_t_14 + 1), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyNumber_Add(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_result, __pyx_v_mid, __pyx_t_9) < 0)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "ete4/coretype/tree.pyx":1534
 *             prefixes[mid] = char1 + '-'*(LEN-2) + prefixes[mid][-1]
 *             result = [p+l for (p,l) in zip(prefixes, result)]
 *             if show_internal:             # <<<<<<<<<<<<<<
 *                 stem = result[mid]
 *                 result[mid] = stem[0] + node_name + stem[len(node_name)+1:]
 */
    }

    /* "ete4/coretype/tree.pyx":1537
 *                 stem = result[mid]
 *                 result[mid] = stem[0] + node_name + stem[len(node_name)+1:]
 *             return (result, mid)             # <<<<<<<<<<<<<<
 *         else:
 *             return ([char1 + '-' + node_name], 0)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_result);
    __Pyx_INCREF(__pyx_v_mid);
    __Pyx_GIVEREF(__pyx_v_mid);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_mid);
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":1510
 *         PAD = ' ' * LEN
 *         PA = ' ' * (LEN-1)
 *         if not self.is_leaf():             # <<<<<<<<<<<<<<
 *             mids = []
 *             result = []
 */
  }

  /* "ete4/coretype/tree.pyx":1539
 *             return (result, mid)
 *         else:
 *             return ([char1 + '-' + node_name], 0)             # <<<<<<<<<<<<<<
 * 
 *     def get_ascii(self, show_internal=True, compact=False, attributes=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = PyNumber_Add(__pyx_v_char1, __pyx_kp_s__13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = PyNumber_Add(__pyx_t_9, __pyx_v_node_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_0);
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":1496
 *         return new_node
 * 
 *     def _asciiArt(self, char1='-', show_internal=True, compact=False, attributes=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the ASCII representation of the tree.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._asciiArt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_name);
  __Pyx_XDECREF(__pyx_v_LEN);
  __Pyx_XDECREF(__pyx_v_PAD);
  __Pyx_XDECREF(__pyx_v_PA);
  __Pyx_XDECREF(__pyx_v_mids);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_char2);
  __Pyx_XDECREF(__pyx_v_clines);
  __Pyx_XDECREF(__pyx_v_mid);
  __Pyx_XDECREF(__pyx_v_lo);
  __Pyx_XDECREF(__pyx_v_hi);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XDECREF(__pyx_v_prefixes);
  __Pyx_XDECREF(__pyx_v_stem);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_attributes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1541
 *             return ([char1 + '-' + node_name], 0)
 * 
 *     def get_ascii(self, show_internal=True, compact=False, attributes=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a string containing an ascii drawing of the tree.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_184get_ascii(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_183get_ascii[] = "\n        Returns a string containing an ascii drawing of the tree.\n\n        :argument show_internal: includes internal edge names.\n        :argument compact: use exactly one line per tip.\n\n        :param attributes: A list of node attributes to shown in the\n            ASCII representation.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_184get_ascii(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_show_internal = 0;
  PyObject *__pyx_v_compact = 0;
  PyObject *__pyx_v_attributes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ascii (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_show_internal,&__pyx_n_s_compact,&__pyx_n_s_attributes,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_True);
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_show_internal);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compact);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attributes);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_ascii") < 0)) __PYX_ERR(0, 1541, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_show_internal = values[0];
    __pyx_v_compact = values[1];
    __pyx_v_attributes = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_ascii", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1541, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_ascii", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_183get_ascii(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_show_internal, __pyx_v_compact, __pyx_v_attributes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_183get_ascii(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_show_internal, PyObject *__pyx_v_compact, PyObject *__pyx_v_attributes) {
  PyObject *__pyx_v_lines = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_mid = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ascii", 0);

  /* "ete4/coretype/tree.pyx":1552
 * 
 *         """
 *         (lines, mid) = self._asciiArt(show_internal=show_internal,             # <<<<<<<<<<<<<<
 *                                       compact=compact, attributes=attributes)
 *         return '\n'+'\n'.join(lines)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_asciiArt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_show_internal, __pyx_v_show_internal) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1553
 *         """
 *         (lines, mid) = self._asciiArt(show_internal=show_internal,
 *                                       compact=compact, attributes=attributes)             # <<<<<<<<<<<<<<
 *         return '\n'+'\n'.join(lines)
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_compact, __pyx_v_compact) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_attributes, __pyx_v_attributes) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1552
 * 
 *         """
 *         (lines, mid) = self._asciiArt(show_internal=show_internal,             # <<<<<<<<<<<<<<
 *                                       compact=compact, attributes=attributes)
 *         return '\n'+'\n'.join(lines)
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1552, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1552, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_lines = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_mid = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1554
 *         (lines, mid) = self._asciiArt(show_internal=show_internal,
 *                                       compact=compact, attributes=attributes)
 *         return '\n'+'\n'.join(lines)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__19, __pyx_v_lines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s__19, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1541
 *             return ([char1 + '-' + node_name], 0)
 * 
 *     def get_ascii(self, show_internal=True, compact=False, attributes=None):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a string containing an ascii drawing of the tree.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_ascii", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_mid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1557
 * 
 * 
 *     def ladderize(self, direction=0):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_186ladderize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_185ladderize[] = "\n        .. versionadded: 2.1\n\n        Sort the branches of a given tree (swapping children nodes)\n        according to the size of each partition.\n\n        ::\n\n           t =  Tree(\"(f,((d, ((a,b),c)),e));\")\n\n           print t\n\n           #\n           #      /-f\n           #     |\n           #     |          /-d\n           # ----|         |\n           #     |     /---|          /-a\n           #     |    |    |     /---|\n           #     |    |     \\---|     \\-b\n           #      \\---|         |\n           #          |          \\-c\n           #          |\n           #           \\-e\n\n           t.ladderize()\n           print t\n\n           #      /-f\n           # ----|\n           #     |     /-e\n           #      \\---|\n           #          |     /-d\n           #           \\---|\n           #               |     /-c\n           #                \\---|\n           #                    |     /-a\n           #                     \\---|\n           #                          \\-b\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_186ladderize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_direction = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ladderize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_direction,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ladderize") < 0)) __PYX_ERR(0, 1557, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_direction = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ladderize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1557, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.ladderize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_185ladderize(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_direction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1606
 *                 n2s[n] = s
 * 
 *             self.children.sort(key=lambda x: n2s[x])             # <<<<<<<<<<<<<<
 *             if direction == 1:
 *                 self.children.reverse()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9ladderize_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_9ladderize_lambda = {"lambda", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9ladderize_lambda, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9ladderize_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_n2s)) { __Pyx_RaiseClosureNameError("n2s"); __PYX_ERR(0, 1606, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_n2s == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1606, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_n2s, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.ladderize.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1557
 * 
 * 
 *     def ladderize(self, direction=0):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_185ladderize(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_direction) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *__pyx_cur_scope;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ladderize", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1557, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "ete4/coretype/tree.pyx":1600
 *         """
 * 
 *         if not self.is_leaf():             # <<<<<<<<<<<<<<
 *             n2s = {}
 *             for n in self.get_children():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":1601
 * 
 *         if not self.is_leaf():
 *             n2s = {}             # <<<<<<<<<<<<<<
 *             for n in self.get_children():
 *                 s = n.ladderize(direction=direction)
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_n2s = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":1602
 *         if not self.is_leaf():
 *             n2s = {}
 *             for n in self.get_children():             # <<<<<<<<<<<<<<
 *                 s = n.ladderize(direction=direction)
 *                 n2s[n] = s
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1602, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1602, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1602, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1602, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":1603
 *             n2s = {}
 *             for n in self.get_children():
 *                 s = n.ladderize(direction=direction)             # <<<<<<<<<<<<<<
 *                 n2s[n] = s
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_ladderize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_direction, __pyx_v_direction) < 0) __PYX_ERR(0, 1603, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":1604
 *             for n in self.get_children():
 *                 s = n.ladderize(direction=direction)
 *                 n2s[n] = s             # <<<<<<<<<<<<<<
 * 
 *             self.children.sort(key=lambda x: n2s[x])
 */
      if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_n2s, __pyx_v_n, __pyx_v_s) < 0)) __PYX_ERR(0, 1604, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1602
 *         if not self.is_leaf():
 *             n2s = {}
 *             for n in self.get_children():             # <<<<<<<<<<<<<<
 *                 s = n.ladderize(direction=direction)
 *                 n2s[n] = s
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":1606
 *                 n2s[n] = s
 * 
 *             self.children.sort(key=lambda x: n2s[x])             # <<<<<<<<<<<<<<
 *             if direction == 1:
 *                 self.children.reverse()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sort); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_9ladderize_lambda, 0, __pyx_n_s_ladderize_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1607
 * 
 *             self.children.sort(key=lambda x: n2s[x])
 *             if direction == 1:             # <<<<<<<<<<<<<<
 *                 self.children.reverse()
 *             size = sum(n2s.values())
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_direction, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_5) {

      /* "ete4/coretype/tree.pyx":1608
 *             self.children.sort(key=lambda x: n2s[x])
 *             if direction == 1:
 *                 self.children.reverse()             # <<<<<<<<<<<<<<
 *             size = sum(n2s.values())
 *         else:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_reverse); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ete4/coretype/tree.pyx":1607
 * 
 *             self.children.sort(key=lambda x: n2s[x])
 *             if direction == 1:             # <<<<<<<<<<<<<<
 *                 self.children.reverse()
 *             size = sum(n2s.values())
 */
    }

    /* "ete4/coretype/tree.pyx":1609
 *             if direction == 1:
 *                 self.children.reverse()
 *             size = sum(n2s.values())             # <<<<<<<<<<<<<<
 *         else:
 *             size = 1
 */
    __pyx_t_3 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_v_n2s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_size = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":1600
 *         """
 * 
 *         if not self.is_leaf():             # <<<<<<<<<<<<<<
 *             n2s = {}
 *             for n in self.get_children():
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1611
 *             size = sum(n2s.values())
 *         else:
 *             size = 1             # <<<<<<<<<<<<<<
 * 
 *         return size
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_size = __pyx_int_1;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":1613
 *             size = 1
 * 
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def sort_descendants(self, attr="name"):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_size);
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1557
 * 
 * 
 *     def ladderize(self, direction=0):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.ladderize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1615
 *         return size
 * 
 *     def sort_descendants(self, attr="name"):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_188sort_descendants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_187sort_descendants[] = "\n        .. versionadded: 2.1\n\n        Sort the branches of a given tree by node names. After the\n        tree is sorted. Note that if duplicated names are present,\n        extra criteria should be added to sort nodes.\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_188sort_descendants(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort_descendants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_name);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sort_descendants") < 0)) __PYX_ERR(0, 1615, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sort_descendants", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1615, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.sort_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_187sort_descendants(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_attr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1629
 *         for n in self.traverse():
 *             if not n.is_leaf():
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))             # <<<<<<<<<<<<<<
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16sort_descendants_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_16sort_descendants_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16sort_descendants_lambda1, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16sort_descendants_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_node2content)) { __Pyx_RaiseClosureNameError("node2content"); __PYX_ERR(0, 1629, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_node2content, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_4 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1629, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.sort_descendants.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1615
 *         return size
 * 
 *     def sort_descendants(self, attr="name"):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_187sort_descendants(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_attr) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *__pyx_cur_scope;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sort_descendants", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1615, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "ete4/coretype/tree.pyx":1625
 *         """
 * 
 *         node2content = self.get_cached_content(store_attr=attr, container_type=list)             # <<<<<<<<<<<<<<
 * 
 *         for n in self.traverse():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_store_attr, __pyx_v_attr) < 0) __PYX_ERR(0, 1625, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_container_type, ((PyObject *)(&PyList_Type))) < 0) __PYX_ERR(0, 1625, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_node2content = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1627
 *         node2content = self.get_cached_content(store_attr=attr, container_type=list)
 * 
 *         for n in self.traverse():             # <<<<<<<<<<<<<<
 *             if not n.is_leaf():
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1627, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1627, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1627, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1627, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1628
 * 
 *         for n in self.traverse():
 *             if not n.is_leaf():             # <<<<<<<<<<<<<<
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1628, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = ((!__pyx_t_7) != 0);
    if (__pyx_t_8) {

      /* "ete4/coretype/tree.pyx":1629
 *         for n in self.traverse():
 *             if not n.is_leaf():
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))             # <<<<<<<<<<<<<<
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_16sort_descendants_lambda1, 0, __pyx_n_s_sort_descendants_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_key, __pyx_t_6) < 0) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1628
 * 
 *         for n in self.traverse():
 *             if not n.is_leaf():             # <<<<<<<<<<<<<<
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 */
    }

    /* "ete4/coretype/tree.pyx":1627
 *         node2content = self.get_cached_content(store_attr=attr, container_type=list)
 * 
 *         for n in self.traverse():             # <<<<<<<<<<<<<<
 *             if not n.is_leaf():
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1615
 *         return size
 * 
 *     def sort_descendants(self, attr="name"):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.sort_descendants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1631
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_190get_cached_content(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_189get_cached_content[] = "\n        .. versionadded: 2.2\n\n        Returns a dictionary pointing to the preloaded content of each\n        internal node under this tree. Such a dictionary is intended\n        to work as a cache for operations that require many traversal\n        operations.\n\n        :param None store_attr: Specifies the node attribute that\n            should be cached (i.e. name, distance, etc.). When none,\n            the whole node instance is cached.\n\n        :param _store: (internal use)\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_190get_cached_content(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_store_attr = 0;
  PyObject *__pyx_v_container_type = 0;
  PyObject *__pyx_v_leaves_only = 0;
  PyObject *__pyx_v__store = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cached_content (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_store_attr,&__pyx_n_s_container_type,&__pyx_n_s_leaves_only,&__pyx_n_s_store,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = __pyx_k__20;
    values[2] = ((PyObject *)Py_True);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_store_attr);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_container_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaves_only);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_store);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_cached_content") < 0)) __PYX_ERR(0, 1631, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_store_attr = values[0];
    __pyx_v_container_type = values[1];
    __pyx_v_leaves_only = values[2];
    __pyx_v__store = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_cached_content", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1631, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_cached_content", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_189get_cached_content(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_store_attr, __pyx_v_container_type, __pyx_v_leaves_only, __pyx_v__store);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1651
 *             _store = {}
 * 
 *         def get_value(_n):             # <<<<<<<<<<<<<<
 *             if store_attr is None:
 *                 _val = [_n]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_1get_value(PyObject *__pyx_self, PyObject *__pyx_v__n); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_1get_value = {"get_value", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_1get_value, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_1get_value(PyObject *__pyx_self, PyObject *__pyx_v__n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_value (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(__pyx_self, ((PyObject *)__pyx_v__n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_9get_value_2generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":1656
 *             else:
 *                 if not isinstance(store_attr, six.string_types):
 *                     _val = [tuple(_n.props.get(attr) for attr in store_attr)]             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_9get_value_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1656, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_9get_value_2generator11, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_cached_content_locals_get_va, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_cached_content.get_value.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_9get_value_2generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1656, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_store_attr)) { __Pyx_RaiseClosureNameError("store_attr"); __PYX_ERR(0, 1656, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_store_attr)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_store_attr)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_store_attr; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_store_attr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1656, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1656, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1656, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1656, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1656, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_attr);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_attr, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v__n)) { __Pyx_RaiseClosureNameError("_n"); __PYX_ERR(0, 1656, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v__n, __pyx_n_s_props); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_cur_scope->__pyx_v_attr) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_cur_scope->__pyx_v_attr);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1656, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1651
 *             _store = {}
 * 
 *         def get_value(_n):             # <<<<<<<<<<<<<<
 *             if store_attr is None:
 *                 _val = [_n]
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(PyObject *__pyx_self, PyObject *__pyx_v__n) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *__pyx_cur_scope;
  PyObject *__pyx_v__val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1651, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v__n = __pyx_v__n;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v__n);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v__n);

  /* "ete4/coretype/tree.pyx":1652
 * 
 *         def get_value(_n):
 *             if store_attr is None:             # <<<<<<<<<<<<<<
 *                 _val = [_n]
 *             else:
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr)) { __Pyx_RaiseClosureNameError("store_attr"); __PYX_ERR(0, 1652, __pyx_L1_error) }
  __pyx_t_1 = (__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1653
 *         def get_value(_n):
 *             if store_attr is None:
 *                 _val = [_n]             # <<<<<<<<<<<<<<
 *             else:
 *                 if not isinstance(store_attr, six.string_types):
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v__n);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v__n);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v__n);
    __pyx_v__val = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1652
 * 
 *         def get_value(_n):
 *             if store_attr is None:             # <<<<<<<<<<<<<<
 *                 _val = [_n]
 *             else:
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":1655
 *                 _val = [_n]
 *             else:
 *                 if not isinstance(store_attr, six.string_types):             # <<<<<<<<<<<<<<
 *                     _val = [tuple(_n.props.get(attr) for attr in store_attr)]
 * 
 */
  /*else*/ {
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr)) { __Pyx_RaiseClosureNameError("store_attr"); __PYX_ERR(0, 1655, __pyx_L1_error) }
    __pyx_t_3 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_six); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_string_types); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = PyObject_IsInstance(__pyx_t_3, __pyx_t_5); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "ete4/coretype/tree.pyx":1656
 *             else:
 *                 if not isinstance(store_attr, six.string_types):
 *                     _val = [tuple(_n.props.get(attr) for attr in store_attr)]             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
      __pyx_t_5 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_9get_value_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_v__val = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":1655
 *                 _val = [_n]
 *             else:
 *                 if not isinstance(store_attr, six.string_types):             # <<<<<<<<<<<<<<
 *                     _val = [tuple(_n.props.get(attr) for attr in store_attr)]
 * 
 */
      goto __pyx_L4;
    }

    /* "ete4/coretype/tree.pyx":1659
 * 
 *                 else:
 *                     _val = [_n.props.get(store_attr)]             # <<<<<<<<<<<<<<
 * 
 *             return _val
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v__n, __pyx_n_s_props); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr)) { __Pyx_RaiseClosureNameError("store_attr"); __PYX_ERR(0, 1659, __pyx_L1_error) }
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_store_attr);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_v__val = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":1661
 *                     _val = [_n.props.get(store_attr)]
 * 
 *             return _val             # <<<<<<<<<<<<<<
 * 
 *         for ch in self.children:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__val);
  __pyx_r = __pyx_v__val;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1651
 *             _store = {}
 * 
 *         def get_value(_n):             # <<<<<<<<<<<<<<
 *             if store_attr is None:
 *                 _val = [_n]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_cached_content.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__val);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1631
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_189get_cached_content(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_store_attr, PyObject *__pyx_v_container_type, PyObject *__pyx_v_leaves_only, PyObject *__pyx_v__store) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *__pyx_cur_scope;
  PyObject *__pyx_v_get_value = 0;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_cached_content", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1631, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_store_attr = __pyx_v_store_attr;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_store_attr);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_store_attr);
  __Pyx_INCREF(__pyx_v__store);

  /* "ete4/coretype/tree.pyx":1648
 *         """
 * 
 *         if _store is None:             # <<<<<<<<<<<<<<
 *             _store = {}
 * 
 */
  __pyx_t_1 = (__pyx_v__store == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1649
 * 
 *         if _store is None:
 *             _store = {}             # <<<<<<<<<<<<<<
 * 
 *         def get_value(_n):
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v__store, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1648
 *         """
 * 
 *         if _store is None:             # <<<<<<<<<<<<<<
 *             _store = {}
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1651
 *             _store = {}
 * 
 *         def get_value(_n):             # <<<<<<<<<<<<<<
 *             if store_attr is None:
 *                 _val = [_n]
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_1get_value, 0, __pyx_n_s_get_cached_content_locals_get_va_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_get_value = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":1663
 *             return _val
 * 
 *         for ch in self.children:             # <<<<<<<<<<<<<<
 *             ch.get_cached_content(store_attr=store_attr,
 *                                   container_type=container_type,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1663, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1663, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1663, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1663, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":1664
 * 
 *         for ch in self.children:
 *             ch.get_cached_content(store_attr=store_attr,             # <<<<<<<<<<<<<<
 *                                   container_type=container_type,
 *                                   leaves_only=leaves_only,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ch, __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_store_attr, __pyx_cur_scope->__pyx_v_store_attr) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1665
 *         for ch in self.children:
 *             ch.get_cached_content(store_attr=store_attr,
 *                                   container_type=container_type,             # <<<<<<<<<<<<<<
 *                                   leaves_only=leaves_only,
 *                                   _store=_store)
 */
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_container_type, __pyx_v_container_type) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1666
 *             ch.get_cached_content(store_attr=store_attr,
 *                                   container_type=container_type,
 *                                   leaves_only=leaves_only,             # <<<<<<<<<<<<<<
 *                                   _store=_store)
 * 
 */
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_leaves_only, __pyx_v_leaves_only) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1667
 *                                   container_type=container_type,
 *                                   leaves_only=leaves_only,
 *                                   _store=_store)             # <<<<<<<<<<<<<<
 * 
 *         if self.children:
 */
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_store, __pyx_v__store) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1664
 * 
 *         for ch in self.children:
 *             ch.get_cached_content(store_attr=store_attr,             # <<<<<<<<<<<<<<
 *                                   container_type=container_type,
 *                                   leaves_only=leaves_only,
 */
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":1663
 *             return _val
 * 
 *         for ch in self.children:             # <<<<<<<<<<<<<<
 *             ch.get_cached_content(store_attr=store_attr,
 *                                   container_type=container_type,
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1669
 *                                   _store=_store)
 * 
 *         if self.children:             # <<<<<<<<<<<<<<
 *             if not leaves_only:
 *                 val = container_type(get_value(self))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1670
 * 
 *         if self.children:
 *             if not leaves_only:             # <<<<<<<<<<<<<<
 *                 val = container_type(get_value(self))
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_leaves_only); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __pyx_t_1 = ((!__pyx_t_2) != 0);
    if (__pyx_t_1) {

      /* "ete4/coretype/tree.pyx":1671
 *         if self.children:
 *             if not leaves_only:
 *                 val = container_type(get_value(self))             # <<<<<<<<<<<<<<
 *             else:
 *                 val = container_type()
 */
      __pyx_t_8 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(__pyx_v_get_value, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_container_type);
      __pyx_t_7 = __pyx_v_container_type; __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_val = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1670
 * 
 *         if self.children:
 *             if not leaves_only:             # <<<<<<<<<<<<<<
 *                 val = container_type(get_value(self))
 *             else:
 */
      goto __pyx_L7;
    }

    /* "ete4/coretype/tree.pyx":1673
 *                 val = container_type(get_value(self))
 *             else:
 *                 val = container_type()             # <<<<<<<<<<<<<<
 *             for ch in self.children:
 *                 if type(val) == list:
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_container_type);
      __pyx_t_7 = __pyx_v_container_type; __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_val = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __pyx_L7:;

    /* "ete4/coretype/tree.pyx":1674
 *             else:
 *                 val = container_type()
 *             for ch in self.children:             # <<<<<<<<<<<<<<
 *                 if type(val) == list:
 *                     val.extend(_store[ch])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_7 = __pyx_t_4; __Pyx_INCREF(__pyx_t_7); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1674, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1674, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1674, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_7);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1674, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1675
 *                 val = container_type()
 *             for ch in self.children:
 *                 if type(val) == list:             # <<<<<<<<<<<<<<
 *                     val.extend(_store[ch])
 *                 if type(val) == set:
 */
      __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_val)), ((PyObject *)(&PyList_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1676
 *             for ch in self.children:
 *                 if type(val) == list:
 *                     val.extend(_store[ch])             # <<<<<<<<<<<<<<
 *                 if type(val) == set:
 *                     val.update(_store[ch])
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_extend); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v__store, __pyx_v_ch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":1675
 *                 val = container_type()
 *             for ch in self.children:
 *                 if type(val) == list:             # <<<<<<<<<<<<<<
 *                     val.extend(_store[ch])
 *                 if type(val) == set:
 */
      }

      /* "ete4/coretype/tree.pyx":1677
 *                 if type(val) == list:
 *                     val.extend(_store[ch])
 *                 if type(val) == set:             # <<<<<<<<<<<<<<
 *                     val.update(_store[ch])
 * 
 */
      __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_val)), ((PyObject *)(&PySet_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1678
 *                     val.extend(_store[ch])
 *                 if type(val) == set:
 *                     val.update(_store[ch])             # <<<<<<<<<<<<<<
 * 
 *                 if not leaves_only:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v__store, __pyx_v_ch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":1677
 *                 if type(val) == list:
 *                     val.extend(_store[ch])
 *                 if type(val) == set:             # <<<<<<<<<<<<<<
 *                     val.update(_store[ch])
 * 
 */
      }

      /* "ete4/coretype/tree.pyx":1680
 *                     val.update(_store[ch])
 * 
 *                 if not leaves_only:             # <<<<<<<<<<<<<<
 *                     if type(val) == list:
 *                         val.extend(get_value(ch))
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_leaves_only); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1680, __pyx_L1_error)
      __pyx_t_2 = ((!__pyx_t_1) != 0);
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":1681
 * 
 *                 if not leaves_only:
 *                     if type(val) == list:             # <<<<<<<<<<<<<<
 *                         val.extend(get_value(ch))
 *                     if type(val) == set:
 */
        __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_val)), ((PyObject *)(&PyList_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1681, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":1682
 *                 if not leaves_only:
 *                     if type(val) == list:
 *                         val.extend(get_value(ch))             # <<<<<<<<<<<<<<
 *                     if type(val) == set:
 *                         val.update(get_value(ch))
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_extend); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1682, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(__pyx_v_get_value, __pyx_v_ch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1682, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1682, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "ete4/coretype/tree.pyx":1681
 * 
 *                 if not leaves_only:
 *                     if type(val) == list:             # <<<<<<<<<<<<<<
 *                         val.extend(get_value(ch))
 *                     if type(val) == set:
 */
        }

        /* "ete4/coretype/tree.pyx":1683
 *                     if type(val) == list:
 *                         val.extend(get_value(ch))
 *                     if type(val) == set:             # <<<<<<<<<<<<<<
 *                         val.update(get_value(ch))
 * 
 */
        __pyx_t_4 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_val)), ((PyObject *)(&PySet_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1683, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_2) {

          /* "ete4/coretype/tree.pyx":1684
 *                         val.extend(get_value(ch))
 *                     if type(val) == set:
 *                         val.update(get_value(ch))             # <<<<<<<<<<<<<<
 * 
 *             _store[self] = val
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1684, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(__pyx_v_get_value, __pyx_v_ch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1684, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "ete4/coretype/tree.pyx":1683
 *                     if type(val) == list:
 *                         val.extend(get_value(ch))
 *                     if type(val) == set:             # <<<<<<<<<<<<<<
 *                         val.update(get_value(ch))
 * 
 */
        }

        /* "ete4/coretype/tree.pyx":1680
 *                     val.update(_store[ch])
 * 
 *                 if not leaves_only:             # <<<<<<<<<<<<<<
 *                     if type(val) == list:
 *                         val.extend(get_value(ch))
 */
      }

      /* "ete4/coretype/tree.pyx":1674
 *             else:
 *                 val = container_type()
 *             for ch in self.children:             # <<<<<<<<<<<<<<
 *                 if type(val) == list:
 *                     val.extend(_store[ch])
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1686
 *                         val.update(get_value(ch))
 * 
 *             _store[self] = val             # <<<<<<<<<<<<<<
 *         else:
 *             _store[self] = container_type(get_value(self))
 */
    if (unlikely(PyObject_SetItem(__pyx_v__store, ((PyObject *)__pyx_v_self), __pyx_v_val) < 0)) __PYX_ERR(0, 1686, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1669
 *                                   _store=_store)
 * 
 *         if self.children:             # <<<<<<<<<<<<<<
 *             if not leaves_only:
 *                 val = container_type(get_value(self))
 */
    goto __pyx_L6;
  }

  /* "ete4/coretype/tree.pyx":1688
 *             _store[self] = val
 *         else:
 *             _store[self] = container_type(get_value(self))             # <<<<<<<<<<<<<<
 * 
 *         return _store
 */
  /*else*/ {
    __pyx_t_4 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_18get_cached_content_get_value(__pyx_v_get_value, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_container_type);
    __pyx_t_8 = __pyx_v_container_type; __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v__store, ((PyObject *)__pyx_v_self), __pyx_t_7) < 0)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_L6:;

  /* "ete4/coretype/tree.pyx":1690
 *             _store[self] = container_type(get_value(self))
 * 
 *         return _store             # <<<<<<<<<<<<<<
 * 
 *     def robinson_foulds(self, t2, attr_t1="name", attr_t2="name",
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__store);
  __pyx_r = __pyx_v__store;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1631
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_cached_content", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_get_value);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v__store);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1692
 *         return _store
 * 
 *     def robinson_foulds(self, t2, attr_t1="name", attr_t2="name",             # <<<<<<<<<<<<<<
 *                         unrooted_trees=False, expand_polytomies=False,
 *                         polytomy_size_limit=5, skip_large_polytomies=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_192robinson_foulds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_191robinson_foulds[] = "\n        .. versionadded: 2.2\n\n        Returns the Robinson-Foulds symmetric distance between current\n        tree and a different tree instance.\n\n        :param t2: reference tree\n\n        :param name attr_t1: Compare trees using a custom node\n                              attribute as a node name.\n\n        :param name attr_t2: Compare trees using a custom node\n                              attribute as a node name in target tree.\n\n        :param False attr_t2: If True, consider trees as unrooted.\n\n        :param False expand_polytomies: If True, all polytomies in the reference\n           and target tree will be expanded into all possible binary\n           trees. Robinson-foulds distance will be calculated between all\n           tree combinations and the minimum value will be returned.\n           See also, :func:`NodeTree.expand_polytomy`.\n\n        :returns: (rf, rf_max, common_attrs, names, edges_t1, edges_t2,  discarded_edges_t1, discarded_edges_t2)\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_192robinson_foulds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t2 = 0;
  PyObject *__pyx_v_attr_t1 = 0;
  PyObject *__pyx_v_attr_t2 = 0;
  PyObject *__pyx_v_unrooted_trees = 0;
  PyObject *__pyx_v_expand_polytomies = 0;
  PyObject *__pyx_v_polytomy_size_limit = 0;
  PyObject *__pyx_v_skip_large_polytomies = 0;
  PyObject *__pyx_v_correct_by_polytomy_size = 0;
  PyObject *__pyx_v_min_support_t1 = 0;
  PyObject *__pyx_v_min_support_t2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("robinson_foulds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t2,&__pyx_n_s_attr_t1,&__pyx_n_s_attr_t2,&__pyx_n_s_unrooted_trees,&__pyx_n_s_expand_polytomies,&__pyx_n_s_polytomy_size_limit,&__pyx_n_s_skip_large_polytomies,&__pyx_n_s_correct_by_polytomy_size,&__pyx_n_s_min_support_t1,&__pyx_n_s_min_support_t2,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_s_name);
    values[2] = ((PyObject *)__pyx_n_s_name);

    /* "ete4/coretype/tree.pyx":1693
 * 
 *     def robinson_foulds(self, t2, attr_t1="name", attr_t2="name",
 *                         unrooted_trees=False, expand_polytomies=False,             # <<<<<<<<<<<<<<
 *                         polytomy_size_limit=5, skip_large_polytomies=False,
 *                         correct_by_polytomy_size=False, min_support_t1=0.0,
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)__pyx_int_5);

    /* "ete4/coretype/tree.pyx":1694
 *     def robinson_foulds(self, t2, attr_t1="name", attr_t2="name",
 *                         unrooted_trees=False, expand_polytomies=False,
 *                         polytomy_size_limit=5, skip_large_polytomies=False,             # <<<<<<<<<<<<<<
 *                         correct_by_polytomy_size=False, min_support_t1=0.0,
 *                         min_support_t2=0.0):
 */
    values[6] = ((PyObject *)Py_False);

    /* "ete4/coretype/tree.pyx":1695
 *                         unrooted_trees=False, expand_polytomies=False,
 *                         polytomy_size_limit=5, skip_large_polytomies=False,
 *                         correct_by_polytomy_size=False, min_support_t1=0.0,             # <<<<<<<<<<<<<<
 *                         min_support_t2=0.0):
 *         """
 */
    values[7] = ((PyObject *)Py_False);
    values[8] = ((PyObject *)__pyx_float_0_0);
    values[9] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr_t1);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr_t2);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unrooted_trees);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_expand_polytomies);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polytomy_size_limit);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_skip_large_polytomies);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_correct_by_polytomy_size);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_support_t1);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_support_t2);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "robinson_foulds") < 0)) __PYX_ERR(0, 1692, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t2 = values[0];
    __pyx_v_attr_t1 = values[1];
    __pyx_v_attr_t2 = values[2];
    __pyx_v_unrooted_trees = values[3];
    __pyx_v_expand_polytomies = values[4];
    __pyx_v_polytomy_size_limit = values[5];
    __pyx_v_skip_large_polytomies = values[6];
    __pyx_v_correct_by_polytomy_size = values[7];
    __pyx_v_min_support_t1 = values[8];
    __pyx_v_min_support_t2 = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("robinson_foulds", 0, 1, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1692, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.robinson_foulds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_191robinson_foulds(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_t2, __pyx_v_attr_t1, __pyx_v_attr_t2, __pyx_v_unrooted_trees, __pyx_v_expand_polytomies, __pyx_v_polytomy_size_limit, __pyx_v_skip_large_polytomies, __pyx_v_correct_by_polytomy_size, __pyx_v_min_support_t1, __pyx_v_min_support_t2);

  /* "ete4/coretype/tree.pyx":1692
 *         return _store
 * 
 *     def robinson_foulds(self, t2, attr_t1="name", attr_t2="name",             # <<<<<<<<<<<<<<
 *                         unrooted_trees=False, expand_polytomies=False,
 *                         polytomy_size_limit=5, skip_large_polytomies=False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_191robinson_foulds(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_t2, PyObject *__pyx_v_attr_t1, PyObject *__pyx_v_attr_t2, PyObject *__pyx_v_unrooted_trees, PyObject *__pyx_v_expand_polytomies, PyObject *__pyx_v_polytomy_size_limit, PyObject *__pyx_v_skip_large_polytomies, PyObject *__pyx_v_correct_by_polytomy_size, PyObject *__pyx_v_min_support_t1, PyObject *__pyx_v_min_support_t2) {
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_ref_t = NULL;
  PyObject *__pyx_v_target_t = NULL;
  PyObject *__pyx_v_attrs_t1 = NULL;
  PyObject *__pyx_v_attrs_t2 = NULL;
  PyObject *__pyx_v_common_attrs = NULL;
  Py_ssize_t __pyx_v_size1;
  Py_ssize_t __pyx_v_size2;
  PyObject *__pyx_v_ref_trees = NULL;
  PyObject *__pyx_v_target_trees = NULL;
  PyObject *__pyx_v_polytomy_correction = NULL;
  PyObject *__pyx_v_corr1 = NULL;
  PyObject *__pyx_v_corr2 = NULL;
  PyObject *__pyx_v_min_comparison = NULL;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_v_t1_content = NULL;
  PyObject *__pyx_v_t1_leaves = NULL;
  PyObject *__pyx_v_edges1 = NULL;
  PyObject *__pyx_v_support_t1 = NULL;
  PyObject *__pyx_v_t2_content = NULL;
  PyObject *__pyx_v_t2_leaves = NULL;
  PyObject *__pyx_v_edges2 = NULL;
  PyObject *__pyx_v_support_t2 = NULL;
  PyObject *__pyx_v_discard_t1 = NULL;
  PyObject *__pyx_v_discard_t2 = NULL;
  PyObject *__pyx_v_rf = NULL;
  Py_ssize_t __pyx_v_max_parts;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_nw = NULL;
  PyObject *__pyx_v_content = NULL;
  PyObject *__pyx_v_branch = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *(*__pyx_t_19)(PyObject *);
  Py_ssize_t __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  int __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("robinson_foulds", 0);
  __Pyx_INCREF(__pyx_v_t2);
  __Pyx_INCREF(__pyx_v_attr_t1);
  __Pyx_INCREF(__pyx_v_attr_t2);

  /* "ete4/coretype/tree.pyx":1722
 * 
 *         """
 *         ref_t = self             # <<<<<<<<<<<<<<
 *         target_t = t2
 *         if not unrooted_trees and (len(ref_t.children) > 2 or len(target_t.children) > 2):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_v_ref_t = __pyx_v_self;

  /* "ete4/coretype/tree.pyx":1723
 *         """
 *         ref_t = self
 *         target_t = t2             # <<<<<<<<<<<<<<
 *         if not unrooted_trees and (len(ref_t.children) > 2 or len(target_t.children) > 2):
 *             raise TreeError("Unrooted tree found! You may want to activate the unrooted_trees flag.")
 */
  __Pyx_INCREF(__pyx_v_t2);
  __pyx_v_target_t = __pyx_v_t2;

  /* "ete4/coretype/tree.pyx":1724
 *         ref_t = self
 *         target_t = t2
 *         if not unrooted_trees and (len(ref_t.children) > 2 or len(target_t.children) > 2):             # <<<<<<<<<<<<<<
 *             raise TreeError("Unrooted tree found! You may want to activate the unrooted_trees flag.")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ref_t), __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = ((__pyx_t_5 > 2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_t, __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = ((__pyx_t_5 > 2) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":1725
 *         target_t = t2
 *         if not unrooted_trees and (len(ref_t.children) > 2 or len(target_t.children) > 2):
 *             raise TreeError("Unrooted tree found! You may want to activate the unrooted_trees flag.")             # <<<<<<<<<<<<<<
 * 
 *         if expand_polytomies and correct_by_polytomy_size:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_Unrooted_tree_found_You_may_want) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_Unrooted_tree_found_You_may_want);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1725, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1724
 *         ref_t = self
 *         target_t = t2
 *         if not unrooted_trees and (len(ref_t.children) > 2 or len(target_t.children) > 2):             # <<<<<<<<<<<<<<
 *             raise TreeError("Unrooted tree found! You may want to activate the unrooted_trees flag.")
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1727
 *             raise TreeError("Unrooted tree found! You may want to activate the unrooted_trees flag.")
 * 
 *         if expand_polytomies and correct_by_polytomy_size:             # <<<<<<<<<<<<<<
 *             raise TreeError("expand_polytomies and correct_by_polytomy_size are mutually exclusive.")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_expand_polytomies); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1727, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_correct_by_polytomy_size); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":1728
 * 
 *         if expand_polytomies and correct_by_polytomy_size:
 *             raise TreeError("expand_polytomies and correct_by_polytomy_size are mutually exclusive.")             # <<<<<<<<<<<<<<
 * 
 *         if expand_polytomies and unrooted_trees:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_expand_polytomies_and_correct_by) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_expand_polytomies_and_correct_by);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1728, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1727
 *             raise TreeError("Unrooted tree found! You may want to activate the unrooted_trees flag.")
 * 
 *         if expand_polytomies and correct_by_polytomy_size:             # <<<<<<<<<<<<<<
 *             raise TreeError("expand_polytomies and correct_by_polytomy_size are mutually exclusive.")
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1730
 *             raise TreeError("expand_polytomies and correct_by_polytomy_size are mutually exclusive.")
 * 
 *         if expand_polytomies and unrooted_trees:             # <<<<<<<<<<<<<<
 *             raise TreeError("expand_polytomies and unrooted_trees arguments cannot be enabled at the same time")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_expand_polytomies); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1730, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1730, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":1731
 * 
 *         if expand_polytomies and unrooted_trees:
 *             raise TreeError("expand_polytomies and unrooted_trees arguments cannot be enabled at the same time")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_expand_polytomies_and_unrooted_t) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_expand_polytomies_and_unrooted_t);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1731, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1730
 *             raise TreeError("expand_polytomies and correct_by_polytomy_size are mutually exclusive.")
 * 
 *         if expand_polytomies and unrooted_trees:             # <<<<<<<<<<<<<<
 *             raise TreeError("expand_polytomies and unrooted_trees arguments cannot be enabled at the same time")
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1734
 * 
 * 
 *         attrs_t1 = set([getattr(n, attr_t1) for n in ref_t.iter_leaves() if hasattr(n, attr_t1)])             # <<<<<<<<<<<<<<
 *         attrs_t2 = set([getattr(n, attr_t2) for n in target_t.iter_leaves() if hasattr(n, attr_t2)])
 *         common_attrs = attrs_t1 & attrs_t2
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ref_t), __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_7 = __pyx_t_6; __Pyx_INCREF(__pyx_t_7); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1734, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1734, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1734, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_9(__pyx_t_7);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1734, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1734, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {
      __pyx_t_6 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_attrs_t1 = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":1735
 * 
 *         attrs_t1 = set([getattr(n, attr_t1) for n in ref_t.iter_leaves() if hasattr(n, attr_t1)])
 *         attrs_t2 = set([getattr(n, attr_t2) for n in target_t.iter_leaves() if hasattr(n, attr_t2)])             # <<<<<<<<<<<<<<
 *         common_attrs = attrs_t1 & attrs_t2
 *         # release mem
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_t, __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1735, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1735, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1735, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1735, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1735, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1735, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1735, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (__pyx_t_1) {
      __pyx_t_4 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PySet_New(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_attrs_t2 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ete4/coretype/tree.pyx":1736
 *         attrs_t1 = set([getattr(n, attr_t1) for n in ref_t.iter_leaves() if hasattr(n, attr_t1)])
 *         attrs_t2 = set([getattr(n, attr_t2) for n in target_t.iter_leaves() if hasattr(n, attr_t2)])
 *         common_attrs = attrs_t1 & attrs_t2             # <<<<<<<<<<<<<<
 *         # release mem
 *         attrs_t1, attrs_t2 = None, None
 */
  __pyx_t_6 = PyNumber_And(__pyx_v_attrs_t1, __pyx_v_attrs_t2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_common_attrs = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "ete4/coretype/tree.pyx":1738
 *         common_attrs = attrs_t1 & attrs_t2
 *         # release mem
 *         attrs_t1, attrs_t2 = None, None             # <<<<<<<<<<<<<<
 * 
 *         # Check for duplicated items (is it necessary? can we optimize? what's the impact in performance?')
 */
  __pyx_t_6 = Py_None;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_7 = Py_None;
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF_SET(__pyx_v_attrs_t1, ((PyObject*)__pyx_t_6));
  __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_attrs_t2, ((PyObject*)__pyx_t_7));
  __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":1741
 * 
 *         # Check for duplicated items (is it necessary? can we optimize? what's the impact in performance?')
 *         size1 = len([True for n in ref_t.iter_leaves() if getattr(n, attr_t1, None) in common_attrs])             # <<<<<<<<<<<<<<
 *         size2 = len([True for n in target_t.iter_leaves() if getattr(n, attr_t2, None) in common_attrs])
 *         if size1 > len(common_attrs):
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ref_t), __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_4 = __pyx_t_6; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1741, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1741, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1741, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1741, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetAttr3(__pyx_v_n, __pyx_v_attr_t1, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = (__Pyx_PySet_ContainsTF(__pyx_t_6, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)Py_True))) __PYX_ERR(0, 1741, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_size1 = __pyx_t_5;

  /* "ete4/coretype/tree.pyx":1742
 *         # Check for duplicated items (is it necessary? can we optimize? what's the impact in performance?')
 *         size1 = len([True for n in ref_t.iter_leaves() if getattr(n, attr_t1, None) in common_attrs])
 *         size2 = len([True for n in target_t.iter_leaves() if getattr(n, attr_t2, None) in common_attrs])             # <<<<<<<<<<<<<<
 *         if size1 > len(common_attrs):
 *             raise TreeError('Duplicated items found in source tree')
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_t, __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1742, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1742, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1742, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1742, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetAttr3(__pyx_v_n, __pyx_v_attr_t2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = (__Pyx_PySet_ContainsTF(__pyx_t_4, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (__pyx_t_1) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)Py_True))) __PYX_ERR(0, 1742, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_size2 = __pyx_t_5;

  /* "ete4/coretype/tree.pyx":1743
 *         size1 = len([True for n in ref_t.iter_leaves() if getattr(n, attr_t1, None) in common_attrs])
 *         size2 = len([True for n in target_t.iter_leaves() if getattr(n, attr_t2, None) in common_attrs])
 *         if size1 > len(common_attrs):             # <<<<<<<<<<<<<<
 *             raise TreeError('Duplicated items found in source tree')
 *         if size2 > len(common_attrs):
 */
  __pyx_t_5 = PySet_GET_SIZE(__pyx_v_common_attrs); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1743, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_v_size1 > __pyx_t_5) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":1744
 *         size2 = len([True for n in target_t.iter_leaves() if getattr(n, attr_t2, None) in common_attrs])
 *         if size1 > len(common_attrs):
 *             raise TreeError('Duplicated items found in source tree')             # <<<<<<<<<<<<<<
 *         if size2 > len(common_attrs):
 *             raise TreeError('Duplicated items found in reference tree')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_kp_s_Duplicated_items_found_in_source) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_Duplicated_items_found_in_source);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 1744, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1743
 *         size1 = len([True for n in ref_t.iter_leaves() if getattr(n, attr_t1, None) in common_attrs])
 *         size2 = len([True for n in target_t.iter_leaves() if getattr(n, attr_t2, None) in common_attrs])
 *         if size1 > len(common_attrs):             # <<<<<<<<<<<<<<
 *             raise TreeError('Duplicated items found in source tree')
 *         if size2 > len(common_attrs):
 */
  }

  /* "ete4/coretype/tree.pyx":1745
 *         if size1 > len(common_attrs):
 *             raise TreeError('Duplicated items found in source tree')
 *         if size2 > len(common_attrs):             # <<<<<<<<<<<<<<
 *             raise TreeError('Duplicated items found in reference tree')
 * 
 */
  __pyx_t_5 = PySet_GET_SIZE(__pyx_v_common_attrs); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1745, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_v_size2 > __pyx_t_5) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "ete4/coretype/tree.pyx":1746
 *             raise TreeError('Duplicated items found in source tree')
 *         if size2 > len(common_attrs):
 *             raise TreeError('Duplicated items found in reference tree')             # <<<<<<<<<<<<<<
 * 
 *         if expand_polytomies:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_kp_s_Duplicated_items_found_in_refere) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_Duplicated_items_found_in_refere);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 1746, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1745
 *         if size1 > len(common_attrs):
 *             raise TreeError('Duplicated items found in source tree')
 *         if size2 > len(common_attrs):             # <<<<<<<<<<<<<<
 *             raise TreeError('Duplicated items found in reference tree')
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":1748
 *             raise TreeError('Duplicated items found in reference tree')
 * 
 *         if expand_polytomies:             # <<<<<<<<<<<<<<
 *             ref_trees = [Tree(nw) for nw in
 *                          ref_t.expand_polytomies(map_attr=attr_t1,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_expand_polytomies); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1748, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":1749
 * 
 *         if expand_polytomies:
 *             ref_trees = [Tree(nw) for nw in             # <<<<<<<<<<<<<<
 *                          ref_t.expand_polytomies(map_attr=attr_t1,
 *                                                  polytomy_size_limit=polytomy_size_limit,
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "ete4/coretype/tree.pyx":1750
 *         if expand_polytomies:
 *             ref_trees = [Tree(nw) for nw in
 *                          ref_t.expand_polytomies(map_attr=attr_t1,             # <<<<<<<<<<<<<<
 *                                                  polytomy_size_limit=polytomy_size_limit,
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ref_t), __pyx_n_s_expand_polytomies); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_map_attr, __pyx_v_attr_t1) < 0) __PYX_ERR(0, 1750, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1751
 *             ref_trees = [Tree(nw) for nw in
 *                          ref_t.expand_polytomies(map_attr=attr_t1,
 *                                                  polytomy_size_limit=polytomy_size_limit,             # <<<<<<<<<<<<<<
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 *             target_trees = [Tree(nw) for nw in
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_polytomy_size_limit, __pyx_v_polytomy_size_limit) < 0) __PYX_ERR(0, 1750, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1752
 *                          ref_t.expand_polytomies(map_attr=attr_t1,
 *                                                  polytomy_size_limit=polytomy_size_limit,
 *                                                  skip_large_polytomies=skip_large_polytomies)]             # <<<<<<<<<<<<<<
 *             target_trees = [Tree(nw) for nw in
 *                             target_t.expand_polytomies(map_attr=attr_t2,
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_skip_large_polytomies, __pyx_v_skip_large_polytomies) < 0) __PYX_ERR(0, 1750, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1750
 *         if expand_polytomies:
 *             ref_trees = [Tree(nw) for nw in
 *                          ref_t.expand_polytomies(map_attr=attr_t1,             # <<<<<<<<<<<<<<
 *                                                  polytomy_size_limit=polytomy_size_limit,
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 */
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
      __pyx_t_4 = __pyx_t_8; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1750, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1750, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1750, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1750, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1750, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1750, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_XDECREF_SET(__pyx_v_nw, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":1749
 * 
 *         if expand_polytomies:
 *             ref_trees = [Tree(nw) for nw in             # <<<<<<<<<<<<<<
 *                          ref_t.expand_polytomies(map_attr=attr_t1,
 *                                                  polytomy_size_limit=polytomy_size_limit,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Tree); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_v_nw) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_nw);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1749, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1749, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_ref_trees = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1753
 *                                                  polytomy_size_limit=polytomy_size_limit,
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 *             target_trees = [Tree(nw) for nw in             # <<<<<<<<<<<<<<
 *                             target_t.expand_polytomies(map_attr=attr_t2,
 *                                                        polytomy_size_limit=polytomy_size_limit,
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "ete4/coretype/tree.pyx":1754
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 *             target_trees = [Tree(nw) for nw in
 *                             target_t.expand_polytomies(map_attr=attr_t2,             # <<<<<<<<<<<<<<
 *                                                        polytomy_size_limit=polytomy_size_limit,
 *                                                        skip_large_polytomies=skip_large_polytomies)]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_t, __pyx_n_s_expand_polytomies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_map_attr, __pyx_v_attr_t2) < 0) __PYX_ERR(0, 1754, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1755
 *             target_trees = [Tree(nw) for nw in
 *                             target_t.expand_polytomies(map_attr=attr_t2,
 *                                                        polytomy_size_limit=polytomy_size_limit,             # <<<<<<<<<<<<<<
 *                                                        skip_large_polytomies=skip_large_polytomies)]
 *             attr_t1, attr_t2 = "name", "name"
 */
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_polytomy_size_limit, __pyx_v_polytomy_size_limit) < 0) __PYX_ERR(0, 1754, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1756
 *                             target_t.expand_polytomies(map_attr=attr_t2,
 *                                                        polytomy_size_limit=polytomy_size_limit,
 *                                                        skip_large_polytomies=skip_large_polytomies)]             # <<<<<<<<<<<<<<
 *             attr_t1, attr_t2 = "name", "name"
 *         else:
 */
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_skip_large_polytomies, __pyx_v_skip_large_polytomies) < 0) __PYX_ERR(0, 1754, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1754
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 *             target_trees = [Tree(nw) for nw in
 *                             target_t.expand_polytomies(map_attr=attr_t2,             # <<<<<<<<<<<<<<
 *                                                        polytomy_size_limit=polytomy_size_limit,
 *                                                        skip_large_polytomies=skip_large_polytomies)]
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_8 = __pyx_t_6; __Pyx_INCREF(__pyx_t_8); __pyx_t_5 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1754, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1754, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1754, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1754, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1754, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_9(__pyx_t_8);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1754, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_nw, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1753
 *                                                  polytomy_size_limit=polytomy_size_limit,
 *                                                  skip_large_polytomies=skip_large_polytomies)]
 *             target_trees = [Tree(nw) for nw in             # <<<<<<<<<<<<<<
 *                             target_t.expand_polytomies(map_attr=attr_t2,
 *                                                        polytomy_size_limit=polytomy_size_limit,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Tree); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_10, __pyx_v_nw) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_nw);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_target_trees = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1757
 *                                                        polytomy_size_limit=polytomy_size_limit,
 *                                                        skip_large_polytomies=skip_large_polytomies)]
 *             attr_t1, attr_t2 = "name", "name"             # <<<<<<<<<<<<<<
 *         else:
 *             ref_trees = [ref_t]
 */
    __pyx_t_7 = __pyx_n_s_name;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_8 = __pyx_n_s_name;
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_attr_t1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_attr_t2, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":1748
 *             raise TreeError('Duplicated items found in reference tree')
 * 
 *         if expand_polytomies:             # <<<<<<<<<<<<<<
 *             ref_trees = [Tree(nw) for nw in
 *                          ref_t.expand_polytomies(map_attr=attr_t1,
 */
    goto __pyx_L27;
  }

  /* "ete4/coretype/tree.pyx":1759
 *             attr_t1, attr_t2 = "name", "name"
 *         else:
 *             ref_trees = [ref_t]             # <<<<<<<<<<<<<<
 *             target_trees = [target_t]
 * 
 */
  /*else*/ {
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)__pyx_v_ref_t));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ref_t));
    PyList_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_ref_t));
    __pyx_v_ref_trees = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":1760
 *         else:
 *             ref_trees = [ref_t]
 *             target_trees = [target_t]             # <<<<<<<<<<<<<<
 * 
 *         polytomy_correction = 0
 */
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_target_t);
    __Pyx_GIVEREF(__pyx_v_target_t);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_target_t);
    __pyx_v_target_trees = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;
  }
  __pyx_L27:;

  /* "ete4/coretype/tree.pyx":1762
 *             target_trees = [target_t]
 * 
 *         polytomy_correction = 0             # <<<<<<<<<<<<<<
 *         if correct_by_polytomy_size:
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_polytomy_correction = __pyx_int_0;

  /* "ete4/coretype/tree.pyx":1763
 * 
 *         polytomy_correction = 0
 *         if correct_by_polytomy_size:             # <<<<<<<<<<<<<<
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_correct_by_polytomy_size); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1763, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":1764
 *         polytomy_correction = 0
 *         if correct_by_polytomy_size:
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])             # <<<<<<<<<<<<<<
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])
 *             if corr1 and corr2:
 */
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ref_t), __pyx_n_s_traverse); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_4 = __pyx_t_6; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1764, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1764, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1764, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1764, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1764, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = ((__pyx_t_11 > 2) != 0);
      if (__pyx_t_1) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1764, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_11 - 2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1764, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_corr1 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1765
 *         if correct_by_polytomy_size:
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])             # <<<<<<<<<<<<<<
 *             if corr1 and corr2:
 *                 raise TreeError("Both trees contain polytomies! Try expand_polytomies=True instead")
 */
    __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_target_t, __pyx_n_s_traverse); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
      __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1765, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1765, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1765, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_9(__pyx_t_6);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1765, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_1 = ((__pyx_t_11 > 2) != 0);
      if (__pyx_t_1) {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1765, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyInt_FromSsize_t((__pyx_t_11 - 2)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1765, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_corr2 = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1766
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])
 *             if corr1 and corr2:             # <<<<<<<<<<<<<<
 *                 raise TreeError("Both trees contain polytomies! Try expand_polytomies=True instead")
 *             else:
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_corr1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1766, __pyx_L1_error)
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L40_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_corr2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_3;
    __pyx_L40_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "ete4/coretype/tree.pyx":1767
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])
 *             if corr1 and corr2:
 *                 raise TreeError("Both trees contain polytomies! Try expand_polytomies=True instead")             # <<<<<<<<<<<<<<
 *             else:
 *                 polytomy_correction = max([corr1, corr2])
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_Both_trees_contain_polytomies_Tr) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_Both_trees_contain_polytomies_Tr);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 1767, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1766
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])
 *             if corr1 and corr2:             # <<<<<<<<<<<<<<
 *                 raise TreeError("Both trees contain polytomies! Try expand_polytomies=True instead")
 *             else:
 */
    }

    /* "ete4/coretype/tree.pyx":1769
 *                 raise TreeError("Both trees contain polytomies! Try expand_polytomies=True instead")
 *             else:
 *                 polytomy_correction = max([corr1, corr2])             # <<<<<<<<<<<<<<
 * 
 *         min_comparison = None
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_corr2);
      __pyx_t_4 = __pyx_v_corr2;
      __Pyx_INCREF(__pyx_v_corr1);
      __pyx_t_6 = __pyx_v_corr1;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1769, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1769, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_1) {
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = __pyx_t_4;
      } else {
        __Pyx_INCREF(__pyx_t_6);
        __pyx_t_7 = __pyx_t_6;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_t_7;
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_polytomy_correction, __pyx_t_4);
      __pyx_t_4 = 0;
    }

    /* "ete4/coretype/tree.pyx":1763
 * 
 *         polytomy_correction = 0
 *         if correct_by_polytomy_size:             # <<<<<<<<<<<<<<
 *             corr1 = sum([0]+[len(n.children) - 2 for n in ref_t.traverse() if len(n.children) > 2])
 *             corr2 = sum([0]+[len(n.children) - 2 for n in target_t.traverse() if len(n.children) > 2])
 */
  }

  /* "ete4/coretype/tree.pyx":1771
 *                 polytomy_correction = max([corr1, corr2])
 * 
 *         min_comparison = None             # <<<<<<<<<<<<<<
 *         for t1 in ref_trees:
 *             t1_content = t1.get_cached_content()
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_min_comparison = ((PyObject*)Py_None);

  /* "ete4/coretype/tree.pyx":1772
 * 
 *         min_comparison = None
 *         for t1 in ref_trees:             # <<<<<<<<<<<<<<
 *             t1_content = t1.get_cached_content()
 *             t1_leaves = t1_content[t1]
 */
  __pyx_t_4 = __pyx_v_ref_trees; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1772, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_t1, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1773
 *         min_comparison = None
 *         for t1 in ref_trees:
 *             t1_content = t1.get_cached_content()             # <<<<<<<<<<<<<<
 *             t1_leaves = t1_content[t1]
 *             if unrooted_trees:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_t1, __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t1_content, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1774
 *         for t1 in ref_trees:
 *             t1_content = t1.get_cached_content()
 *             t1_leaves = t1_content[t1]             # <<<<<<<<<<<<<<
 *             if unrooted_trees:
 *                 edges1 = set([
 */
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_t1_content, __pyx_v_t1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_t1_leaves, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1775
 *             t1_content = t1.get_cached_content()
 *             t1_leaves = t1_content[t1]
 *             if unrooted_trees:             # <<<<<<<<<<<<<<
 *                 edges1 = set([
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1775, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "ete4/coretype/tree.pyx":1776
 *             t1_leaves = t1_content[t1]
 *             if unrooted_trees:
 *                 edges1 = set([             # <<<<<<<<<<<<<<
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 */
      __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "ete4/coretype/tree.pyx":1779
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 *                         for content in six.itervalues(t1_content)])             # <<<<<<<<<<<<<<
 *                 edges1.discard(((),()))
 *             else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_six); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_itervalues); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_8, __pyx_v_t1_content) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_t1_content);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_10 = __pyx_t_6; __Pyx_INCREF(__pyx_t_10); __pyx_t_11 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1779, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1779, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1779, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1779, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1779, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1779, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_9(__pyx_t_10);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1779, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_content, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1777
 *             if unrooted_trees:
 *                 edges1 = set([
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),             # <<<<<<<<<<<<<<
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 *                         for content in six.itervalues(t1_content)])
 */
        __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (likely(PyList_CheckExact(__pyx_v_content)) || PyTuple_CheckExact(__pyx_v_content)) {
          __pyx_t_13 = __pyx_v_content; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_v_content); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1777, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1777, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_13))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1777, __pyx_L1_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1777, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1777, __pyx_L1_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1777, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            }
          } else {
            __pyx_t_16 = __pyx_t_15(__pyx_t_13);
            if (unlikely(!__pyx_t_16)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1777, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_16);
          }
          __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_16);
          __pyx_t_16 = 0;
          __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1777, __pyx_L1_error)
          __pyx_t_2 = (__pyx_t_3 != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L50_bool_binop_done;
          }
          __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1777, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_16, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1777, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_3 = (__pyx_t_2 != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L50_bool_binop_done:;
          if (__pyx_t_1) {
            __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1777, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 1777, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_8 = ((PyObject*)__pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_17 = PyList_Sort(__pyx_t_8); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1777, __pyx_L1_error)
        if (unlikely(__pyx_t_8 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1777, __pyx_L1_error)
        }
        __pyx_t_12 = PyList_AsTuple(__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1778
 *                 edges1 = set([
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))             # <<<<<<<<<<<<<<
 *                         for content in six.itervalues(t1_content)])
 *                 edges1.discard(((),()))
 */
        __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_16 = PyNumber_Subtract(__pyx_v_t1_leaves, __pyx_v_content); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
          __pyx_t_18 = __pyx_t_16; __Pyx_INCREF(__pyx_t_18); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1778, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_15 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1778, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_18))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_18)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1778, __pyx_L1_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_18, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1778, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_14); __Pyx_INCREF(__pyx_t_16); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1778, __pyx_L1_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_18, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1778, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            }
          } else {
            __pyx_t_16 = __pyx_t_15(__pyx_t_18);
            if (unlikely(!__pyx_t_16)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1778, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_16);
          }
          __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_16);
          __pyx_t_16 = 0;
          __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1778, __pyx_L1_error)
          __pyx_t_2 = (__pyx_t_3 != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L55_bool_binop_done;
          }
          __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1778, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_16, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1778, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_3 = (__pyx_t_2 != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L55_bool_binop_done:;
          if (__pyx_t_1) {
            __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1778, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 1778, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_8 = ((PyObject*)__pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_17 = PyList_Sort(__pyx_t_8); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1778, __pyx_L1_error)
        if (unlikely(__pyx_t_8 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1778, __pyx_L1_error)
        }
        __pyx_t_13 = PyList_AsTuple(__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1777
 *             if unrooted_trees:
 *                 edges1 = set([
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),             # <<<<<<<<<<<<<<
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 *                         for content in six.itervalues(t1_content)])
 */
        __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_12);
        PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_13);
        PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_13);
        __pyx_t_12 = 0;
        __pyx_t_13 = 0;
        __pyx_t_6 = ((PyObject*)__pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_17 = PyList_Sort(__pyx_t_6); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1777, __pyx_L1_error)
        if (unlikely(__pyx_t_6 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1777, __pyx_L1_error)
        }
        __pyx_t_8 = PyList_AsTuple(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1776, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1779
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 *                         for content in six.itervalues(t1_content)])             # <<<<<<<<<<<<<<
 *                 edges1.discard(((),()))
 *             else:
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "ete4/coretype/tree.pyx":1776
 *             t1_leaves = t1_content[t1]
 *             if unrooted_trees:
 *                 edges1 = set([             # <<<<<<<<<<<<<<
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 */
      __pyx_t_10 = PySet_New(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_edges1, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "ete4/coretype/tree.pyx":1780
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 *                         for content in six.itervalues(t1_content)])
 *                 edges1.discard(((),()))             # <<<<<<<<<<<<<<
 *             else:
 *                 edges1 = set([
 */
      __pyx_t_17 = __Pyx_PySet_Discard(__pyx_v_edges1, __pyx_tuple__23); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1780, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":1775
 *             t1_content = t1.get_cached_content()
 *             t1_leaves = t1_content[t1]
 *             if unrooted_trees:             # <<<<<<<<<<<<<<
 *                 edges1 = set([
 *                         tuple(sorted([tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])),
 */
      goto __pyx_L44;
    }

    /* "ete4/coretype/tree.pyx":1782
 *                 edges1.discard(((),()))
 *             else:
 *                 edges1 = set([             # <<<<<<<<<<<<<<
 *                         tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))
 *                         for content in six.itervalues(t1_content)])
 */
    /*else*/ {
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);

      /* "ete4/coretype/tree.pyx":1784
 *                 edges1 = set([
 *                         tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))
 *                         for content in six.itervalues(t1_content)])             # <<<<<<<<<<<<<<
 *                 edges1.discard(())
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_six); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_itervalues); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_v_t1_content) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_t1_content);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_11 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1784, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1784, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1784, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1784, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1784, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1784, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_content, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "ete4/coretype/tree.pyx":1783
 *             else:
 *                 edges1 = set([
 *                         tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))             # <<<<<<<<<<<<<<
 *                         for content in six.itervalues(t1_content)])
 *                 edges1.discard(())
 */
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (likely(PyList_CheckExact(__pyx_v_content)) || PyTuple_CheckExact(__pyx_v_content)) {
          __pyx_t_13 = __pyx_v_content; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_v_content); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1783, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1783, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_13))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_12 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_12); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1783, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1783, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_12); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1783, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1783, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            }
          } else {
            __pyx_t_12 = __pyx_t_15(__pyx_t_13);
            if (unlikely(!__pyx_t_12)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1783, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_12);
          }
          __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1783, __pyx_L1_error)
          __pyx_t_2 = (__pyx_t_3 != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L62_bool_binop_done;
          }
          __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1783, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_12, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1783, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_3 = (__pyx_t_2 != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L62_bool_binop_done:;
          if (__pyx_t_1) {
            __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1783, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 1783, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_7 = ((PyObject*)__pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_17 = PyList_Sort(__pyx_t_7); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1783, __pyx_L1_error)
        if (unlikely(__pyx_t_7 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1783, __pyx_L1_error)
        }
        __pyx_t_8 = PyList_AsTuple(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1782, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1784
 *                 edges1 = set([
 *                         tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))
 *                         for content in six.itervalues(t1_content)])             # <<<<<<<<<<<<<<
 *                 edges1.discard(())
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1782
 *                 edges1.discard(((),()))
 *             else:
 *                 edges1 = set([             # <<<<<<<<<<<<<<
 *                         tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))
 *                         for content in six.itervalues(t1_content)])
 */
      __pyx_t_6 = PySet_New(__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_edges1, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1785
 *                         tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))
 *                         for content in six.itervalues(t1_content)])
 *                 edges1.discard(())             # <<<<<<<<<<<<<<
 * 
 *             if min_support_t1:
 */
      __pyx_t_17 = __Pyx_PySet_Discard(__pyx_v_edges1, __pyx_empty_tuple); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1785, __pyx_L1_error)
    }
    __pyx_L44:;

    /* "ete4/coretype/tree.pyx":1787
 *                 edges1.discard(())
 * 
 *             if min_support_t1:             # <<<<<<<<<<<<<<
 *                 support_t1 = dict([
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_min_support_t1); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1787, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "ete4/coretype/tree.pyx":1788
 * 
 *             if min_support_t1:
 *                 support_t1 = dict([             # <<<<<<<<<<<<<<
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)
 *                         for branch, content in six.iteritems(t1_content)])
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "ete4/coretype/tree.pyx":1790
 *                 support_t1 = dict([
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)
 *                         for branch, content in six.iteritems(t1_content)])             # <<<<<<<<<<<<<<
 * 
 *             for t2 in target_trees:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_six); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_10 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_t1_content) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_t1_content);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_7 = __pyx_t_10; __Pyx_INCREF(__pyx_t_7); __pyx_t_11 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1790, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1790, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_10); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1790, __pyx_L1_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1790, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_10); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1790, __pyx_L1_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1790, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_7);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1790, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
          PyObject* sequence = __pyx_t_10;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1790, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_13);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1790, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1790, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_12 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1790, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_19 = Py_TYPE(__pyx_t_12)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_19(__pyx_t_12); if (unlikely(!__pyx_t_8)) goto __pyx_L67_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_13 = __pyx_t_19(__pyx_t_12); if (unlikely(!__pyx_t_13)) goto __pyx_L67_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_13);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_12), 2) < 0) __PYX_ERR(0, 1790, __pyx_L1_error)
          __pyx_t_19 = NULL;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L68_unpacking_done;
          __pyx_L67_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_19 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1790, __pyx_L1_error)
          __pyx_L68_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_branch, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_content, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "ete4/coretype/tree.pyx":1789
 *             if min_support_t1:
 *                 support_t1 = dict([
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)             # <<<<<<<<<<<<<<
 *                         for branch, content in six.iteritems(t1_content)])
 * 
 */
        __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (likely(PyList_CheckExact(__pyx_v_content)) || PyTuple_CheckExact(__pyx_v_content)) {
          __pyx_t_8 = __pyx_v_content; __Pyx_INCREF(__pyx_t_8); __pyx_t_14 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_content); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1789, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_15 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1789, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_12 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_12); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1789, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1789, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_12); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1789, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1789, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            }
          } else {
            __pyx_t_12 = __pyx_t_15(__pyx_t_8);
            if (unlikely(!__pyx_t_12)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1789, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_12);
          }
          __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1789, __pyx_L1_error)
          __pyx_t_2 = (__pyx_t_3 != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L72_bool_binop_done;
          }
          __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1789, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_12, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1789, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_3 = (__pyx_t_2 != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L72_bool_binop_done:;
          if (__pyx_t_1) {
            __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1789, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 1789, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = ((PyObject*)__pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_17 = PyList_Sort(__pyx_t_10); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1789, __pyx_L1_error)
        if (unlikely(__pyx_t_10 == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1789, __pyx_L1_error)
        }
        __pyx_t_13 = PyList_AsTuple(__pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_support); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
        __pyx_t_13 = 0;
        __pyx_t_10 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1788, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1790
 *                 support_t1 = dict([
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)
 *                         for branch, content in six.iteritems(t1_content)])             # <<<<<<<<<<<<<<
 * 
 *             for t2 in target_trees:
 */
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1788
 * 
 *             if min_support_t1:
 *                 support_t1 = dict([             # <<<<<<<<<<<<<<
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)
 *                         for branch, content in six.iteritems(t1_content)])
 */
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_support_t1, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1787
 *                 edges1.discard(())
 * 
 *             if min_support_t1:             # <<<<<<<<<<<<<<
 *                 support_t1 = dict([
 *                         (tuple(sorted([getattr(n, attr_t1) for n in content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs])), branch.support)
 */
    }

    /* "ete4/coretype/tree.pyx":1792
 *                         for branch, content in six.iteritems(t1_content)])
 * 
 *             for t2 in target_trees:             # <<<<<<<<<<<<<<
 *                 t2_content = t2.get_cached_content()
 *                 t2_leaves = t2_content[t2]
 */
    __pyx_t_7 = __pyx_v_target_trees; __Pyx_INCREF(__pyx_t_7); __pyx_t_11 = 0;
    for (;;) {
      if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_7)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1792, __pyx_L1_error)
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1792, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF_SET(__pyx_v_t2, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1793
 * 
 *             for t2 in target_trees:
 *                 t2_content = t2.get_cached_content()             # <<<<<<<<<<<<<<
 *                 t2_leaves = t2_content[t2]
 *                 if unrooted_trees:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_t2, __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t2_content, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1794
 *             for t2 in target_trees:
 *                 t2_content = t2.get_cached_content()
 *                 t2_leaves = t2_content[t2]             # <<<<<<<<<<<<<<
 *                 if unrooted_trees:
 *                     edges2 = set([
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_t2_content, __pyx_v_t2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1794, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_t2_leaves, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1795
 *                 t2_content = t2.get_cached_content()
 *                 t2_leaves = t2_content[t2]
 *                 if unrooted_trees:             # <<<<<<<<<<<<<<
 *                     edges2 = set([
 *                             tuple(sorted([
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1795, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1796
 *                 t2_leaves = t2_content[t2]
 *                 if unrooted_trees:
 *                     edges2 = set([             # <<<<<<<<<<<<<<
 *                             tuple(sorted([
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1796, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "ete4/coretype/tree.pyx":1800
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),
 *                                         tuple(sorted([getattr(n, attr_t2) for n in t2_leaves-content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))]))
 *                             for content in six.itervalues(t2_content)])             # <<<<<<<<<<<<<<
 *                     edges2.discard(((),()))
 *                 else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_six); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_itervalues); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_10, __pyx_v_t2_content) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_t2_content);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_13 = __pyx_t_8; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_9 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1800, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_13))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1800, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1800, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1800, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1800, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_9(__pyx_t_13);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1800, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF_SET(__pyx_v_content, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "ete4/coretype/tree.pyx":1798
 *                     edges2 = set([
 *                             tuple(sorted([
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),             # <<<<<<<<<<<<<<
 *                                         tuple(sorted([getattr(n, attr_t2) for n in t2_leaves-content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))]))
 *                             for content in six.itervalues(t2_content)])
 */
          __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1798, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (likely(PyList_CheckExact(__pyx_v_content)) || PyTuple_CheckExact(__pyx_v_content)) {
            __pyx_t_18 = __pyx_v_content; __Pyx_INCREF(__pyx_t_18); __pyx_t_20 = 0;
            __pyx_t_15 = NULL;
          } else {
            __pyx_t_20 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_v_content); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1798, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_15 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1798, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_15)) {
              if (likely(PyList_CheckExact(__pyx_t_18))) {
                if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_18)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_20); __Pyx_INCREF(__pyx_t_16); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1798, __pyx_L1_error)
                #else
                __pyx_t_16 = PySequence_ITEM(__pyx_t_18, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1798, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              } else {
                if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_20); __Pyx_INCREF(__pyx_t_16); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1798, __pyx_L1_error)
                #else
                __pyx_t_16 = PySequence_ITEM(__pyx_t_18, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1798, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              }
            } else {
              __pyx_t_16 = __pyx_t_15(__pyx_t_18);
              if (unlikely(!__pyx_t_16)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1798, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_16);
            }
            __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_16);
            __pyx_t_16 = 0;
            __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1798, __pyx_L1_error)
            __pyx_t_2 = (__pyx_t_3 != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L82_bool_binop_done;
            }
            __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1798, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_16, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1798, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_3 = (__pyx_t_2 != 0);
            __pyx_t_1 = __pyx_t_3;
            __pyx_L82_bool_binop_done:;
            if (__pyx_t_1) {
              __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1798, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 1798, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_10 = ((PyObject*)__pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_17 = PyList_Sort(__pyx_t_10); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1798, __pyx_L1_error)
          if (unlikely(__pyx_t_10 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
            __PYX_ERR(0, 1798, __pyx_L1_error)
          }
          __pyx_t_12 = PyList_AsTuple(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1798, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ete4/coretype/tree.pyx":1799
 *                             tuple(sorted([
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),
 *                                         tuple(sorted([getattr(n, attr_t2) for n in t2_leaves-content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))]))             # <<<<<<<<<<<<<<
 *                             for content in six.itervalues(t2_content)])
 *                     edges2.discard(((),()))
 */
          __pyx_t_18 = PyList_New(0); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_16 = PyNumber_Subtract(__pyx_v_t2_leaves, __pyx_v_content); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
            __pyx_t_21 = __pyx_t_16; __Pyx_INCREF(__pyx_t_21); __pyx_t_20 = 0;
            __pyx_t_15 = NULL;
          } else {
            __pyx_t_20 = -1; __pyx_t_21 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1799, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_15 = Py_TYPE(__pyx_t_21)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1799, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          for (;;) {
            if (likely(!__pyx_t_15)) {
              if (likely(PyList_CheckExact(__pyx_t_21))) {
                if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_21)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyList_GET_ITEM(__pyx_t_21, __pyx_t_20); __Pyx_INCREF(__pyx_t_16); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1799, __pyx_L1_error)
                #else
                __pyx_t_16 = PySequence_ITEM(__pyx_t_21, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1799, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              } else {
                if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_21)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_21, __pyx_t_20); __Pyx_INCREF(__pyx_t_16); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1799, __pyx_L1_error)
                #else
                __pyx_t_16 = PySequence_ITEM(__pyx_t_21, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1799, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_16);
                #endif
              }
            } else {
              __pyx_t_16 = __pyx_t_15(__pyx_t_21);
              if (unlikely(!__pyx_t_16)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1799, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_16);
            }
            __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_16);
            __pyx_t_16 = 0;
            __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1799, __pyx_L1_error)
            __pyx_t_2 = (__pyx_t_3 != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L87_bool_binop_done;
            }
            __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1799, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_16, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1799, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_3 = (__pyx_t_2 != 0);
            __pyx_t_1 = __pyx_t_3;
            __pyx_L87_bool_binop_done:;
            if (__pyx_t_1) {
              __pyx_t_16 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1799, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_18, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 1799, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_10 = ((PyObject*)__pyx_t_18);
          __pyx_t_18 = 0;
          __pyx_t_17 = PyList_Sort(__pyx_t_10); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1799, __pyx_L1_error)
          if (unlikely(__pyx_t_10 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
            __PYX_ERR(0, 1799, __pyx_L1_error)
          }
          __pyx_t_18 = PyList_AsTuple(__pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1799, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ete4/coretype/tree.pyx":1797
 *                 if unrooted_trees:
 *                     edges2 = set([
 *                             tuple(sorted([             # <<<<<<<<<<<<<<
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),
 *                                         tuple(sorted([getattr(n, attr_t2) for n in t2_leaves-content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))]))
 */
          __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1797, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_12);
          PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_18);
          PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_18);
          __pyx_t_12 = 0;
          __pyx_t_18 = 0;
          __pyx_t_8 = ((PyObject*)__pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_17 = PyList_Sort(__pyx_t_8); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1797, __pyx_L1_error)
          if (unlikely(__pyx_t_8 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
            __PYX_ERR(0, 1797, __pyx_L1_error)
          }
          __pyx_t_10 = PyList_AsTuple(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1797, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1796, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ete4/coretype/tree.pyx":1800
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),
 *                                         tuple(sorted([getattr(n, attr_t2) for n in t2_leaves-content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))]))
 *                             for content in six.itervalues(t2_content)])             # <<<<<<<<<<<<<<
 *                     edges2.discard(((),()))
 *                 else:
 */
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "ete4/coretype/tree.pyx":1796
 *                 t2_leaves = t2_content[t2]
 *                 if unrooted_trees:
 *                     edges2 = set([             # <<<<<<<<<<<<<<
 *                             tuple(sorted([
 *                                         tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs])),
 */
        __pyx_t_13 = PySet_New(__pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1796, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_edges2, ((PyObject*)__pyx_t_13));
        __pyx_t_13 = 0;

        /* "ete4/coretype/tree.pyx":1801
 *                                         tuple(sorted([getattr(n, attr_t2) for n in t2_leaves-content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))]))
 *                             for content in six.itervalues(t2_content)])
 *                     edges2.discard(((),()))             # <<<<<<<<<<<<<<
 *                 else:
 *                     edges2 = set([
 */
        __pyx_t_17 = __Pyx_PySet_Discard(__pyx_v_edges2, __pyx_tuple__23); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1801, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1795
 *                 t2_content = t2.get_cached_content()
 *                 t2_leaves = t2_content[t2]
 *                 if unrooted_trees:             # <<<<<<<<<<<<<<
 *                     edges2 = set([
 *                             tuple(sorted([
 */
        goto __pyx_L76;
      }

      /* "ete4/coretype/tree.pyx":1803
 *                     edges2.discard(((),()))
 *                 else:
 *                     edges2 = set([             # <<<<<<<<<<<<<<
 *                             tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))
 *                             for content in six.itervalues(t2_content)])
 */
      /*else*/ {
        __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1803, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);

        /* "ete4/coretype/tree.pyx":1805
 *                     edges2 = set([
 *                             tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))
 *                             for content in six.itervalues(t2_content)])             # <<<<<<<<<<<<<<
 *                     edges2.discard(())
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_six); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_itervalues); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_10, __pyx_v_t2_content) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_t2_content);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
          __pyx_t_8 = __pyx_t_6; __Pyx_INCREF(__pyx_t_8); __pyx_t_14 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1805, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1805, __pyx_L1_error)
              #else
              __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1805, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1805, __pyx_L1_error)
              #else
              __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1805, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              #endif
            }
          } else {
            __pyx_t_6 = __pyx_t_9(__pyx_t_8);
            if (unlikely(!__pyx_t_6)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1805, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_6);
          }
          __Pyx_XDECREF_SET(__pyx_v_content, __pyx_t_6);
          __pyx_t_6 = 0;

          /* "ete4/coretype/tree.pyx":1804
 *                 else:
 *                     edges2 = set([
 *                             tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))             # <<<<<<<<<<<<<<
 *                             for content in six.itervalues(t2_content)])
 *                     edges2.discard(())
 */
          __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1804, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (likely(PyList_CheckExact(__pyx_v_content)) || PyTuple_CheckExact(__pyx_v_content)) {
            __pyx_t_18 = __pyx_v_content; __Pyx_INCREF(__pyx_t_18); __pyx_t_20 = 0;
            __pyx_t_15 = NULL;
          } else {
            __pyx_t_20 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_v_content); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1804, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_15 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1804, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_15)) {
              if (likely(PyList_CheckExact(__pyx_t_18))) {
                if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_18)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_12 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_20); __Pyx_INCREF(__pyx_t_12); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1804, __pyx_L1_error)
                #else
                __pyx_t_12 = PySequence_ITEM(__pyx_t_18, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1804, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_12);
                #endif
              } else {
                if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_20); __Pyx_INCREF(__pyx_t_12); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1804, __pyx_L1_error)
                #else
                __pyx_t_12 = PySequence_ITEM(__pyx_t_18, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1804, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_12);
                #endif
              }
            } else {
              __pyx_t_12 = __pyx_t_15(__pyx_t_18);
              if (unlikely(!__pyx_t_12)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1804, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_12);
            }
            __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1804, __pyx_L1_error)
            __pyx_t_2 = (__pyx_t_3 != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L94_bool_binop_done;
            }
            __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1804, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_12, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1804, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_3 = (__pyx_t_2 != 0);
            __pyx_t_1 = __pyx_t_3;
            __pyx_L94_bool_binop_done:;
            if (__pyx_t_1) {
              __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1804, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 1804, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_6 = ((PyObject*)__pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_17 = PyList_Sort(__pyx_t_6); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1804, __pyx_L1_error)
          if (unlikely(__pyx_t_6 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
            __PYX_ERR(0, 1804, __pyx_L1_error)
          }
          __pyx_t_10 = PyList_AsTuple(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1804, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1803, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ete4/coretype/tree.pyx":1805
 *                     edges2 = set([
 *                             tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))
 *                             for content in six.itervalues(t2_content)])             # <<<<<<<<<<<<<<
 *                     edges2.discard(())
 * 
 */
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1803
 *                     edges2.discard(((),()))
 *                 else:
 *                     edges2 = set([             # <<<<<<<<<<<<<<
 *                             tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))
 *                             for content in six.itervalues(t2_content)])
 */
        __pyx_t_8 = PySet_New(__pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1803, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_edges2, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1806
 *                             tuple(sorted([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))
 *                             for content in six.itervalues(t2_content)])
 *                     edges2.discard(())             # <<<<<<<<<<<<<<
 * 
 *                 if min_support_t2:
 */
        __pyx_t_17 = __Pyx_PySet_Discard(__pyx_v_edges2, __pyx_empty_tuple); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1806, __pyx_L1_error)
      }
      __pyx_L76:;

      /* "ete4/coretype/tree.pyx":1808
 *                     edges2.discard(())
 * 
 *                 if min_support_t2:             # <<<<<<<<<<<<<<
 *                     support_t2 = dict([
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_min_support_t2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1808, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1809
 * 
 *                 if min_support_t2:
 *                     support_t2 = dict([             # <<<<<<<<<<<<<<
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)
 *                         for branch, content in six.iteritems(t2_content)])
 */
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "ete4/coretype/tree.pyx":1811
 *                     support_t2 = dict([
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)
 *                         for branch, content in six.iteritems(t2_content)])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_six); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_13 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_v_t2_content) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_t2_content);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1811, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
          __pyx_t_6 = __pyx_t_13; __Pyx_INCREF(__pyx_t_6); __pyx_t_14 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1811, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1811, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_13 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_14); __Pyx_INCREF(__pyx_t_13); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1811, __pyx_L1_error)
              #else
              __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1811, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_14); __Pyx_INCREF(__pyx_t_13); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1811, __pyx_L1_error)
              #else
              __pyx_t_13 = PySequence_ITEM(__pyx_t_6, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1811, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              #endif
            }
          } else {
            __pyx_t_13 = __pyx_t_9(__pyx_t_6);
            if (unlikely(!__pyx_t_13)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1811, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_13);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {
            PyObject* sequence = __pyx_t_13;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 1811, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_18 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_18 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_18);
            #else
            __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1811, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_18 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1811, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            #endif
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_12 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1811, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_19 = Py_TYPE(__pyx_t_12)->tp_iternext;
            index = 0; __pyx_t_10 = __pyx_t_19(__pyx_t_12); if (unlikely(!__pyx_t_10)) goto __pyx_L99_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            index = 1; __pyx_t_18 = __pyx_t_19(__pyx_t_12); if (unlikely(!__pyx_t_18)) goto __pyx_L99_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_18);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_12), 2) < 0) __PYX_ERR(0, 1811, __pyx_L1_error)
            __pyx_t_19 = NULL;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L100_unpacking_done;
            __pyx_L99_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_19 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 1811, __pyx_L1_error)
            __pyx_L100_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_branch, __pyx_t_10);
          __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_content, __pyx_t_18);
          __pyx_t_18 = 0;

          /* "ete4/coretype/tree.pyx":1810
 *                 if min_support_t2:
 *                     support_t2 = dict([
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)             # <<<<<<<<<<<<<<
 *                         for branch, content in six.iteritems(t2_content)])
 * 
 */
          __pyx_t_18 = PyList_New(0); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1810, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          if (likely(PyList_CheckExact(__pyx_v_content)) || PyTuple_CheckExact(__pyx_v_content)) {
            __pyx_t_10 = __pyx_v_content; __Pyx_INCREF(__pyx_t_10); __pyx_t_20 = 0;
            __pyx_t_15 = NULL;
          } else {
            __pyx_t_20 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_content); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1810, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_15 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1810, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_15)) {
              if (likely(PyList_CheckExact(__pyx_t_10))) {
                if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_10)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_12 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_20); __Pyx_INCREF(__pyx_t_12); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1810, __pyx_L1_error)
                #else
                __pyx_t_12 = PySequence_ITEM(__pyx_t_10, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1810, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_12);
                #endif
              } else {
                if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_20); __Pyx_INCREF(__pyx_t_12); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1810, __pyx_L1_error)
                #else
                __pyx_t_12 = PySequence_ITEM(__pyx_t_10, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1810, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_12);
                #endif
              }
            } else {
              __pyx_t_12 = __pyx_t_15(__pyx_t_10);
              if (unlikely(!__pyx_t_12)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1810, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_12);
            }
            __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_3 = __Pyx_HasAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1810, __pyx_L1_error)
            __pyx_t_2 = (__pyx_t_3 != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L104_bool_binop_done;
            }
            __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1810, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_t_12, __pyx_v_common_attrs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1810, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_3 = (__pyx_t_2 != 0);
            __pyx_t_1 = __pyx_t_3;
            __pyx_L104_bool_binop_done:;
            if (__pyx_t_1) {
              __pyx_t_12 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_attr_t2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1810, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_18, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 1810, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_13 = ((PyObject*)__pyx_t_18);
          __pyx_t_18 = 0;
          __pyx_t_17 = PyList_Sort(__pyx_t_13); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1810, __pyx_L1_error)
          if (unlikely(__pyx_t_13 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
            __PYX_ERR(0, 1810, __pyx_L1_error)
          }
          __pyx_t_18 = PyList_AsTuple(__pyx_t_13); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1810, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_support); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1810, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1810, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_18);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_18);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_13);
          __pyx_t_18 = 0;
          __pyx_t_13 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1809, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "ete4/coretype/tree.pyx":1811
 *                     support_t2 = dict([
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)
 *                         for branch, content in six.iteritems(t2_content)])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1809
 * 
 *                 if min_support_t2:
 *                     support_t2 = dict([             # <<<<<<<<<<<<<<
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)
 *                         for branch, content in six.iteritems(t2_content)])
 */
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_support_t2, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1808
 *                     edges2.discard(())
 * 
 *                 if min_support_t2:             # <<<<<<<<<<<<<<
 *                     support_t2 = dict([
 *                         (tuple(sorted(([getattr(n, attr_t2) for n in content if hasattr(n, attr_t2) and getattr(n, attr_t2) in common_attrs]))), branch.support)
 */
      }

      /* "ete4/coretype/tree.pyx":1815
 * 
 *                 # if a support value is passed as a constraint, discard lowly supported branches from the analysis
 *                 discard_t1, discard_t2 = set(), set()             # <<<<<<<<<<<<<<
 *                 if min_support_t1 and unrooted_trees:
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])
 */
      __pyx_t_6 = PySet_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1815, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PySet_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1815, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_discard_t1, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_discard_t2, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":1816
 *                 # if a support value is passed as a constraint, discard lowly supported branches from the analysis
 *                 discard_t1, discard_t2 = set(), set()
 *                 if min_support_t1 and unrooted_trees:             # <<<<<<<<<<<<<<
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])
 *                 elif min_support_t1:
 */
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_min_support_t1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1816, __pyx_L1_error)
      if (__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L107_bool_binop_done;
      }
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __pyx_t_1 = __pyx_t_3;
      __pyx_L107_bool_binop_done:;
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1817
 *                 discard_t1, discard_t2 = set(), set()
 *                 if min_support_t1 and unrooted_trees:
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])             # <<<<<<<<<<<<<<
 *                 elif min_support_t1:
 *                     discard_t1 = set([p for p in edges1 if support_t1[p] < min_support_t1])
 */
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1817, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = 0;
        __pyx_t_10 = __Pyx_set_iterator(__pyx_v_edges1, 1, (&__pyx_t_20), (&__pyx_t_22)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1817, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_6);
        __pyx_t_6 = __pyx_t_10;
        __pyx_t_10 = 0;
        while (1) {
          __pyx_t_23 = __Pyx_set_iter_next(__pyx_t_6, __pyx_t_20, &__pyx_t_14, &__pyx_t_10, __pyx_t_22);
          if (unlikely(__pyx_t_23 == 0)) break;
          if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_10);
          __pyx_t_10 = 0;
          if (unlikely(!__pyx_v_support_t1)) { __Pyx_RaiseUnboundLocalError("support_t1"); __PYX_ERR(0, 1817, __pyx_L1_error) }
          __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(!__pyx_v_support_t1)) { __Pyx_RaiseUnboundLocalError("support_t1"); __PYX_ERR(0, 1817, __pyx_L1_error) }
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_18 = __Pyx_PyDict_GetItemDefault(__pyx_v_support_t1, __pyx_t_13, __pyx_int_999999999); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyDict_GetItemDefault(__pyx_v_support_t1, __pyx_t_10, __pyx_t_18); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_18 = PyObject_RichCompare(__pyx_t_13, __pyx_v_min_support_t1, Py_LT); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1817, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1817, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1817, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_discard_t1, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1816
 *                 # if a support value is passed as a constraint, discard lowly supported branches from the analysis
 *                 discard_t1, discard_t2 = set(), set()
 *                 if min_support_t1 and unrooted_trees:             # <<<<<<<<<<<<<<
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])
 *                 elif min_support_t1:
 */
        goto __pyx_L106;
      }

      /* "ete4/coretype/tree.pyx":1818
 *                 if min_support_t1 and unrooted_trees:
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])
 *                 elif min_support_t1:             # <<<<<<<<<<<<<<
 *                     discard_t1 = set([p for p in edges1 if support_t1[p] < min_support_t1])
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_min_support_t1); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1818, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1819
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])
 *                 elif min_support_t1:
 *                     discard_t1 = set([p for p in edges1 if support_t1[p] < min_support_t1])             # <<<<<<<<<<<<<<
 * 
 *                 if min_support_t2 and unrooted_trees:
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1819, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_20 = 0;
        __pyx_t_18 = __Pyx_set_iterator(__pyx_v_edges1, 1, (&__pyx_t_14), (&__pyx_t_22)); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1819, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_XDECREF(__pyx_t_8);
        __pyx_t_8 = __pyx_t_18;
        __pyx_t_18 = 0;
        while (1) {
          __pyx_t_23 = __Pyx_set_iter_next(__pyx_t_8, __pyx_t_14, &__pyx_t_20, &__pyx_t_18, __pyx_t_22);
          if (unlikely(__pyx_t_23 == 0)) break;
          if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 1819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_18);
          __pyx_t_18 = 0;
          if (unlikely(!__pyx_v_support_t1)) { __Pyx_RaiseUnboundLocalError("support_t1"); __PYX_ERR(0, 1819, __pyx_L1_error) }
          __pyx_t_18 = __Pyx_PyDict_GetItem(__pyx_v_support_t1, __pyx_v_p); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_13 = PyObject_RichCompare(__pyx_t_18, __pyx_v_min_support_t1, Py_LT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1819, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1819, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1819, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PySet_New(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1819, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_discard_t1, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1818
 *                 if min_support_t1 and unrooted_trees:
 *                     discard_t1 = set([p for p in edges1 if support_t1.get(p[0], support_t1.get(p[1], 999999999)) < min_support_t1])
 *                 elif min_support_t1:             # <<<<<<<<<<<<<<
 *                     discard_t1 = set([p for p in edges1 if support_t1[p] < min_support_t1])
 * 
 */
      }
      __pyx_L106:;

      /* "ete4/coretype/tree.pyx":1821
 *                     discard_t1 = set([p for p in edges1 if support_t1[p] < min_support_t1])
 * 
 *                 if min_support_t2 and unrooted_trees:             # <<<<<<<<<<<<<<
 *                     discard_t2 = set([p for p in edges2 if support_t2.get(p[0], support_t2.get(p[1], 999999999)) < min_support_t2])
 *                 elif min_support_t2:
 */
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_min_support_t2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1821, __pyx_L1_error)
      if (__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L116_bool_binop_done;
      }
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1821, __pyx_L1_error)
      __pyx_t_1 = __pyx_t_3;
      __pyx_L116_bool_binop_done:;
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1822
 * 
 *                 if min_support_t2 and unrooted_trees:
 *                     discard_t2 = set([p for p in edges2 if support_t2.get(p[0], support_t2.get(p[1], 999999999)) < min_support_t2])             # <<<<<<<<<<<<<<
 *                 elif min_support_t2:
 *                     discard_t2 = set([p for p in edges2 if support_t2[p] < min_support_t2])
 */
        __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = 0;
        __pyx_t_13 = __Pyx_set_iterator(__pyx_v_edges2, 1, (&__pyx_t_20), (&__pyx_t_22)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_6);
        __pyx_t_6 = __pyx_t_13;
        __pyx_t_13 = 0;
        while (1) {
          __pyx_t_23 = __Pyx_set_iter_next(__pyx_t_6, __pyx_t_20, &__pyx_t_14, &__pyx_t_13, __pyx_t_22);
          if (unlikely(__pyx_t_23 == 0)) break;
          if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_13);
          __pyx_t_13 = 0;
          if (unlikely(!__pyx_v_support_t2)) { __Pyx_RaiseUnboundLocalError("support_t2"); __PYX_ERR(0, 1822, __pyx_L1_error) }
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (unlikely(!__pyx_v_support_t2)) { __Pyx_RaiseUnboundLocalError("support_t2"); __PYX_ERR(0, 1822, __pyx_L1_error) }
          __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_10 = __Pyx_PyDict_GetItemDefault(__pyx_v_support_t2, __pyx_t_18, __pyx_int_999999999); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_18 = __Pyx_PyDict_GetItemDefault(__pyx_v_support_t2, __pyx_t_13, __pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyObject_RichCompare(__pyx_t_18, __pyx_v_min_support_t2, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1822, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1822, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_discard_t2, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1821
 *                     discard_t1 = set([p for p in edges1 if support_t1[p] < min_support_t1])
 * 
 *                 if min_support_t2 and unrooted_trees:             # <<<<<<<<<<<<<<
 *                     discard_t2 = set([p for p in edges2 if support_t2.get(p[0], support_t2.get(p[1], 999999999)) < min_support_t2])
 *                 elif min_support_t2:
 */
        goto __pyx_L115;
      }

      /* "ete4/coretype/tree.pyx":1823
 *                 if min_support_t2 and unrooted_trees:
 *                     discard_t2 = set([p for p in edges2 if support_t2.get(p[0], support_t2.get(p[1], 999999999)) < min_support_t2])
 *                 elif min_support_t2:             # <<<<<<<<<<<<<<
 *                     discard_t2 = set([p for p in edges2 if support_t2[p] < min_support_t2])
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_min_support_t2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1823, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1824
 *                     discard_t2 = set([p for p in edges2 if support_t2.get(p[0], support_t2.get(p[1], 999999999)) < min_support_t2])
 *                 elif min_support_t2:
 *                     discard_t2 = set([p for p in edges2 if support_t2[p] < min_support_t2])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1824, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_20 = 0;
        __pyx_t_10 = __Pyx_set_iterator(__pyx_v_edges2, 1, (&__pyx_t_14), (&__pyx_t_22)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1824, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_8);
        __pyx_t_8 = __pyx_t_10;
        __pyx_t_10 = 0;
        while (1) {
          __pyx_t_23 = __Pyx_set_iter_next(__pyx_t_8, __pyx_t_14, &__pyx_t_20, &__pyx_t_10, __pyx_t_22);
          if (unlikely(__pyx_t_23 == 0)) break;
          if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 1824, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_10);
          __pyx_t_10 = 0;
          if (unlikely(!__pyx_v_support_t2)) { __Pyx_RaiseUnboundLocalError("support_t2"); __PYX_ERR(0, 1824, __pyx_L1_error) }
          __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_support_t2, __pyx_v_p); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1824, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_18 = PyObject_RichCompare(__pyx_t_10, __pyx_v_min_support_t2, Py_LT); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1824, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1824, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1824, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PySet_New(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1824, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_discard_t2, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "ete4/coretype/tree.pyx":1823
 *                 if min_support_t2 and unrooted_trees:
 *                     discard_t2 = set([p for p in edges2 if support_t2.get(p[0], support_t2.get(p[1], 999999999)) < min_support_t2])
 *                 elif min_support_t2:             # <<<<<<<<<<<<<<
 *                     discard_t2 = set([p for p in edges2 if support_t2[p] < min_support_t2])
 * 
 */
      }
      __pyx_L115:;

      /* "ete4/coretype/tree.pyx":1832
 *                 # the two root edges are never counted here, as they are always
 *                 # present in both trees because of the common attr filters
 *                 rf = len(((edges1 ^ edges2) - discard_t2) - discard_t1) - polytomy_correction             # <<<<<<<<<<<<<<
 * 
 *                 if unrooted_trees:
 */
      __pyx_t_8 = PyNumber_Xor(__pyx_v_edges1, __pyx_v_edges2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_v_discard_t2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Subtract(__pyx_t_6, __pyx_v_discard_t1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_14); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_v_polytomy_correction); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_rf, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":1834
 *                 rf = len(((edges1 ^ edges2) - discard_t2) - discard_t1) - polytomy_correction
 * 
 *                 if unrooted_trees:             # <<<<<<<<<<<<<<
 *                     # thought this may work, but it does not, still I don't see why
 *                     #max_parts = (len(common_attrs)*2) - 6 - len(discard_t1) - len(discard_t2)
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted_trees); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1834, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1837
 *                     # thought this may work, but it does not, still I don't see why
 *                     #max_parts = (len(common_attrs)*2) - 6 - len(discard_t1) - len(discard_t2)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p[0])>1 and len(p[1])>1]) +             # <<<<<<<<<<<<<<
 *                                  len([p for p in edges2 - discard_t2 if len(p[0])>1 and len(p[1])>1]))
 *                 else:
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyNumber_Subtract(__pyx_v_edges1, __pyx_v_discard_t1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_18 = __pyx_t_8; __Pyx_INCREF(__pyx_t_18); __pyx_t_14 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1837, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_9 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1837, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_18))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_18)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1837, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_18, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1837, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_14); __Pyx_INCREF(__pyx_t_8); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1837, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_18, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1837, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_9(__pyx_t_18);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1837, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1837, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_20 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1837, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_3 = ((__pyx_t_20 > 1) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_1 = __pyx_t_3;
            goto __pyx_L128_bool_binop_done;
          }
          __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1837, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_20 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1837, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_3 = ((__pyx_t_20 > 1) != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L128_bool_binop_done:;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1837, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_14 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1837, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1838
 *                     #max_parts = (len(common_attrs)*2) - 6 - len(discard_t1) - len(discard_t2)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p[0])>1 and len(p[1])>1]) +
 *                                  len([p for p in edges2 - discard_t2 if len(p[0])>1 and len(p[1])>1]))             # <<<<<<<<<<<<<<
 *                 else:
 *                     # thought this may work, but it does not, still I don't see why
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = PyNumber_Subtract(__pyx_v_edges2, __pyx_v_discard_t2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        if (likely(PyList_CheckExact(__pyx_t_18)) || PyTuple_CheckExact(__pyx_t_18)) {
          __pyx_t_8 = __pyx_t_18; __Pyx_INCREF(__pyx_t_8); __pyx_t_20 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_20 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_18); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1838, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_18 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_20); __Pyx_INCREF(__pyx_t_18); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1838, __pyx_L1_error)
              #else
              __pyx_t_18 = PySequence_ITEM(__pyx_t_8, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1838, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              #endif
            } else {
              if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_18 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_20); __Pyx_INCREF(__pyx_t_18); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1838, __pyx_L1_error)
              #else
              __pyx_t_18 = PySequence_ITEM(__pyx_t_8, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1838, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              #endif
            }
          } else {
            __pyx_t_18 = __pyx_t_9(__pyx_t_8);
            if (unlikely(!__pyx_t_18)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1838, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_18);
          }
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_18);
          __pyx_t_18 = 0;
          __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_24 = PyObject_Length(__pyx_t_18); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_3 = ((__pyx_t_24 > 1) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_1 = __pyx_t_3;
            goto __pyx_L133_bool_binop_done;
          }
          __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_24 = PyObject_Length(__pyx_t_18); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_3 = ((__pyx_t_24 > 1) != 0);
          __pyx_t_1 = __pyx_t_3;
          __pyx_L133_bool_binop_done:;
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1838, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_20 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1838, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1837
 *                     # thought this may work, but it does not, still I don't see why
 *                     #max_parts = (len(common_attrs)*2) - 6 - len(discard_t1) - len(discard_t2)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p[0])>1 and len(p[1])>1]) +             # <<<<<<<<<<<<<<
 *                                  len([p for p in edges2 - discard_t2 if len(p[0])>1 and len(p[1])>1]))
 *                 else:
 */
        __pyx_v_max_parts = (__pyx_t_14 + __pyx_t_20);

        /* "ete4/coretype/tree.pyx":1834
 *                 rf = len(((edges1 ^ edges2) - discard_t2) - discard_t1) - polytomy_correction
 * 
 *                 if unrooted_trees:             # <<<<<<<<<<<<<<
 *                     # thought this may work, but it does not, still I don't see why
 *                     #max_parts = (len(common_attrs)*2) - 6 - len(discard_t1) - len(discard_t2)
 */
        goto __pyx_L124;
      }

      /* "ete4/coretype/tree.pyx":1847
 *                     # partition of the two trees (only needed in rooted trees)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p)>1]) +
 *                                  len([p for p in edges2 - discard_t2 if len(p)>1])) - 2             # <<<<<<<<<<<<<<
 * 
 *                     # print max_parts
 */
      /*else*/ {

        /* "ete4/coretype/tree.pyx":1846
 *                     # partitions in each tree -2 is to avoid counting the root
 *                     # partition of the two trees (only needed in rooted trees)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p)>1]) +             # <<<<<<<<<<<<<<
 *                                  len([p for p in edges2 - discard_t2 if len(p)>1])) - 2
 * 
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyNumber_Subtract(__pyx_v_edges1, __pyx_v_discard_t1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_18 = __pyx_t_8; __Pyx_INCREF(__pyx_t_18); __pyx_t_20 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_20 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1846, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_9 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1846, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_18))) {
              if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_18)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_20); __Pyx_INCREF(__pyx_t_8); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1846, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_18, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1846, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            } else {
              if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_20); __Pyx_INCREF(__pyx_t_8); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1846, __pyx_L1_error)
              #else
              __pyx_t_8 = PySequence_ITEM(__pyx_t_18, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1846, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              #endif
            }
          } else {
            __pyx_t_8 = __pyx_t_9(__pyx_t_18);
            if (unlikely(!__pyx_t_8)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1846, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_14 = PyObject_Length(__pyx_v_p); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1846, __pyx_L1_error)
          __pyx_t_1 = ((__pyx_t_14 > 1) != 0);
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1846, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_20 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_20 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1846, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1847
 *                     # partition of the two trees (only needed in rooted trees)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p)>1]) +
 *                                  len([p for p in edges2 - discard_t2 if len(p)>1])) - 2             # <<<<<<<<<<<<<<
 * 
 *                     # print max_parts
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = PyNumber_Subtract(__pyx_v_edges2, __pyx_v_discard_t2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        if (likely(PyList_CheckExact(__pyx_t_18)) || PyTuple_CheckExact(__pyx_t_18)) {
          __pyx_t_8 = __pyx_t_18; __Pyx_INCREF(__pyx_t_8); __pyx_t_14 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_14 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_18); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1847, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1847, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_18 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_18); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1847, __pyx_L1_error)
              #else
              __pyx_t_18 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1847, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              #endif
            } else {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_18 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_14); __Pyx_INCREF(__pyx_t_18); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1847, __pyx_L1_error)
              #else
              __pyx_t_18 = PySequence_ITEM(__pyx_t_8, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1847, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              #endif
            }
          } else {
            __pyx_t_18 = __pyx_t_9(__pyx_t_8);
            if (unlikely(!__pyx_t_18)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1847, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_18);
          }
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_18);
          __pyx_t_18 = 0;
          __pyx_t_24 = PyObject_Length(__pyx_v_p); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1847, __pyx_L1_error)
          __pyx_t_1 = ((__pyx_t_24 > 1) != 0);
          if (__pyx_t_1) {
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1847, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_14 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1847, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1846
 *                     # partitions in each tree -2 is to avoid counting the root
 *                     # partition of the two trees (only needed in rooted trees)
 *                     max_parts = (len([p for p in edges1 - discard_t1 if len(p)>1]) +             # <<<<<<<<<<<<<<
 *                                  len([p for p in edges2 - discard_t2 if len(p)>1])) - 2
 * 
 */
        __pyx_v_max_parts = ((__pyx_t_20 + __pyx_t_14) - 2);
      }
      __pyx_L124:;

      /* "ete4/coretype/tree.pyx":1851
 *                     # print max_parts
 * 
 *                 if not min_comparison or min_comparison[0] > rf:             # <<<<<<<<<<<<<<
 *                     min_comparison = [rf, max_parts, common_attrs, edges1, edges2, discard_t1, discard_t2]
 * 
 */
      __pyx_t_3 = (__pyx_v_min_comparison != Py_None)&&(PyList_GET_SIZE(__pyx_v_min_comparison) != 0);
      __pyx_t_2 = ((!__pyx_t_3) != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L142_bool_binop_done;
      }
      if (unlikely(__pyx_v_min_comparison == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1851, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_min_comparison, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_6, __pyx_v_rf, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_1 = __pyx_t_2;
      __pyx_L142_bool_binop_done:;
      if (__pyx_t_1) {

        /* "ete4/coretype/tree.pyx":1852
 * 
 *                 if not min_comparison or min_comparison[0] > rf:
 *                     min_comparison = [rf, max_parts, common_attrs, edges1, edges2, discard_t1, discard_t2]             # <<<<<<<<<<<<<<
 * 
 *         return min_comparison
 */
        __pyx_t_8 = PyInt_FromSsize_t(__pyx_v_max_parts); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyList_New(7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_rf);
        __Pyx_GIVEREF(__pyx_v_rf);
        PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_rf);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_8);
        __Pyx_INCREF(__pyx_v_common_attrs);
        __Pyx_GIVEREF(__pyx_v_common_attrs);
        PyList_SET_ITEM(__pyx_t_6, 2, __pyx_v_common_attrs);
        __Pyx_INCREF(__pyx_v_edges1);
        __Pyx_GIVEREF(__pyx_v_edges1);
        PyList_SET_ITEM(__pyx_t_6, 3, __pyx_v_edges1);
        __Pyx_INCREF(__pyx_v_edges2);
        __Pyx_GIVEREF(__pyx_v_edges2);
        PyList_SET_ITEM(__pyx_t_6, 4, __pyx_v_edges2);
        __Pyx_INCREF(__pyx_v_discard_t1);
        __Pyx_GIVEREF(__pyx_v_discard_t1);
        PyList_SET_ITEM(__pyx_t_6, 5, __pyx_v_discard_t1);
        __Pyx_INCREF(__pyx_v_discard_t2);
        __Pyx_GIVEREF(__pyx_v_discard_t2);
        PyList_SET_ITEM(__pyx_t_6, 6, __pyx_v_discard_t2);
        __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_min_comparison, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":1851
 *                     # print max_parts
 * 
 *                 if not min_comparison or min_comparison[0] > rf:             # <<<<<<<<<<<<<<
 *                     min_comparison = [rf, max_parts, common_attrs, edges1, edges2, discard_t1, discard_t2]
 * 
 */
      }

      /* "ete4/coretype/tree.pyx":1792
 *                         for branch, content in six.iteritems(t1_content)])
 * 
 *             for t2 in target_trees:             # <<<<<<<<<<<<<<
 *                 t2_content = t2.get_cached_content()
 *                 t2_leaves = t2_content[t2]
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1772
 * 
 *         min_comparison = None
 *         for t1 in ref_trees:             # <<<<<<<<<<<<<<
 *             t1_content = t1.get_cached_content()
 *             t1_leaves = t1_content[t1]
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":1854
 *                     min_comparison = [rf, max_parts, common_attrs, edges1, edges2, discard_t1, discard_t2]
 * 
 *         return min_comparison             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_min_comparison);
  __pyx_r = __pyx_v_min_comparison;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1692
 *         return _store
 * 
 *     def robinson_foulds(self, t2, attr_t1="name", attr_t2="name",             # <<<<<<<<<<<<<<
 *                         unrooted_trees=False, expand_polytomies=False,
 *                         polytomy_size_limit=5, skip_large_polytomies=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.robinson_foulds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ref_t);
  __Pyx_XDECREF(__pyx_v_target_t);
  __Pyx_XDECREF(__pyx_v_attrs_t1);
  __Pyx_XDECREF(__pyx_v_attrs_t2);
  __Pyx_XDECREF(__pyx_v_common_attrs);
  __Pyx_XDECREF(__pyx_v_ref_trees);
  __Pyx_XDECREF(__pyx_v_target_trees);
  __Pyx_XDECREF(__pyx_v_polytomy_correction);
  __Pyx_XDECREF(__pyx_v_corr1);
  __Pyx_XDECREF(__pyx_v_corr2);
  __Pyx_XDECREF(__pyx_v_min_comparison);
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XDECREF(__pyx_v_t1_content);
  __Pyx_XDECREF(__pyx_v_t1_leaves);
  __Pyx_XDECREF(__pyx_v_edges1);
  __Pyx_XDECREF(__pyx_v_support_t1);
  __Pyx_XDECREF(__pyx_v_t2_content);
  __Pyx_XDECREF(__pyx_v_t2_leaves);
  __Pyx_XDECREF(__pyx_v_edges2);
  __Pyx_XDECREF(__pyx_v_support_t2);
  __Pyx_XDECREF(__pyx_v_discard_t1);
  __Pyx_XDECREF(__pyx_v_discard_t2);
  __Pyx_XDECREF(__pyx_v_rf);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_nw);
  __Pyx_XDECREF(__pyx_v_content);
  __Pyx_XDECREF(__pyx_v_branch);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_t2);
  __Pyx_XDECREF(__pyx_v_attr_t1);
  __Pyx_XDECREF(__pyx_v_attr_t2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1858
 * 
 * 
 *     def compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0,             # <<<<<<<<<<<<<<
 *                 has_duplications=False, expand_polytomies=False, unrooted=False,
 *                 max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name'):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_194compare(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_193compare[] = "compare this tree with another using robinson foulds symmetric difference\n        and number of shared edges. Trees of different sizes and with duplicated\n        items allowed.\n\n        returns: a Python dictionary with results\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_194compare(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ref_tree = 0;
  CYTHON_UNUSED PyObject *__pyx_v_use_collateral = 0;
  PyObject *__pyx_v_min_support_source = 0;
  PyObject *__pyx_v_min_support_ref = 0;
  PyObject *__pyx_v_has_duplications = 0;
  PyObject *__pyx_v_expand_polytomies = 0;
  PyObject *__pyx_v_unrooted = 0;
  PyObject *__pyx_v_max_treeko_splits_to_be_artifact = 0;
  PyObject *__pyx_v_ref_tree_attr = 0;
  PyObject *__pyx_v_source_tree_attr = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compare (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ref_tree,&__pyx_n_s_use_collateral,&__pyx_n_s_min_support_source,&__pyx_n_s_min_support_ref,&__pyx_n_s_has_duplications,&__pyx_n_s_expand_polytomies,&__pyx_n_s_unrooted,&__pyx_n_s_max_treeko_splits_to_be_artifact,&__pyx_n_s_ref_tree_attr,&__pyx_n_s_source_tree_attr,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)__pyx_float_0_0);
    values[3] = ((PyObject *)__pyx_float_0_0);

    /* "ete4/coretype/tree.pyx":1859
 * 
 *     def compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0,
 *                 has_duplications=False, expand_polytomies=False, unrooted=False,             # <<<<<<<<<<<<<<
 *                 max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name'):
 * 
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)__pyx_int_1000);
    values[8] = ((PyObject *)__pyx_n_s_name);
    values[9] = ((PyObject *)__pyx_n_s_name);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_tree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_collateral);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_support_source);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_support_ref);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_has_duplications);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_expand_polytomies);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unrooted);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_treeko_splits_to_be_artifact);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_tree_attr);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_tree_attr);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compare") < 0)) __PYX_ERR(0, 1858, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ref_tree = values[0];
    __pyx_v_use_collateral = values[1];
    __pyx_v_min_support_source = values[2];
    __pyx_v_min_support_ref = values[3];
    __pyx_v_has_duplications = values[4];
    __pyx_v_expand_polytomies = values[5];
    __pyx_v_unrooted = values[6];
    __pyx_v_max_treeko_splits_to_be_artifact = values[7];
    __pyx_v_ref_tree_attr = values[8];
    __pyx_v_source_tree_attr = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compare", 0, 1, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_193compare(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_ref_tree, __pyx_v_use_collateral, __pyx_v_min_support_source, __pyx_v_min_support_ref, __pyx_v_has_duplications, __pyx_v_expand_polytomies, __pyx_v_unrooted, __pyx_v_max_treeko_splits_to_be_artifact, __pyx_v_ref_tree_attr, __pyx_v_source_tree_attr);

  /* "ete4/coretype/tree.pyx":1858
 * 
 * 
 *     def compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0,             # <<<<<<<<<<<<<<
 *                 has_duplications=False, expand_polytomies=False, unrooted=False,
 *                 max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name'):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1871
 *         source_tree = self
 * 
 *         def _safe_div(a, b):             # <<<<<<<<<<<<<<
 *             if a != 0:
 *                 return a / float(b)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7compare_1_safe_div(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_7compare_1_safe_div = {"_safe_div", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7compare_1_safe_div, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7compare_1_safe_div(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_safe_div (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_safe_div", 1, 2, 2, 1); __PYX_ERR(0, 1871, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_safe_div") < 0)) __PYX_ERR(0, 1871, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_safe_div", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1871, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.compare._safe_div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare__safe_div(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare__safe_div(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_safe_div", 0);

  /* "ete4/coretype/tree.pyx":1872
 * 
 *         def _safe_div(a, b):
 *             if a != 0:             # <<<<<<<<<<<<<<
 *                 return a / float(b)
 *             else: return 0.0
 */
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_v_a, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":1873
 *         def _safe_div(a, b):
 *             if a != 0:
 *                 return a / float(b)             # <<<<<<<<<<<<<<
 *             else: return 0.0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_a, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":1872
 * 
 *         def _safe_div(a, b):
 *             if a != 0:             # <<<<<<<<<<<<<<
 *                 return a / float(b)
 *             else: return 0.0
 */
  }

  /* "ete4/coretype/tree.pyx":1874
 *             if a != 0:
 *                 return a / float(b)
 *             else: return 0.0             # <<<<<<<<<<<<<<
 * 
 *         def _compare(src_tree, ref_tree):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":1871
 *         source_tree = self
 * 
 *         def _safe_div(a, b):             # <<<<<<<<<<<<<<
 *             if a != 0:
 *                 return a / float(b)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.compare._safe_div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1876
 *             else: return 0.0
 * 
 *         def _compare(src_tree, ref_tree):             # <<<<<<<<<<<<<<
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7compare_3_compare(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_7compare_3_compare = {"_compare", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7compare_3_compare, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7compare_3_compare(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_src_tree = 0;
  PyObject *__pyx_v_ref_tree = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compare (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src_tree,&__pyx_n_s_ref_tree,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_src_tree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ref_tree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compare", 1, 2, 2, 1); __PYX_ERR(0, 1876, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_compare") < 0)) __PYX_ERR(0, 1876, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_src_tree = values[0];
    __pyx_v_ref_tree = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compare", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1876, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.compare._compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare_2_compare(__pyx_self, __pyx_v_src_tree, __pyx_v_ref_tree);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare_2_compare(PyObject *__pyx_self, PyObject *__pyx_v_src_tree, PyObject *__pyx_v_ref_tree) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *__pyx_outer_scope;
  PyObject *__pyx_v_rf = NULL;
  PyObject *__pyx_v_maxrf = NULL;
  PyObject *__pyx_v_common = NULL;
  PyObject *__pyx_v_ref_p = NULL;
  PyObject *__pyx_v_src_p = NULL;
  PyObject *__pyx_v_ref_disc = NULL;
  PyObject *__pyx_v_src_disc = NULL;
  PyObject *__pyx_v_valid_ref_edges = NULL;
  PyObject *__pyx_v_valid_src_edges = NULL;
  PyObject *__pyx_v_common_edges = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compare", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ete4/coretype/tree.pyx":1878
 *         def _compare(src_tree, ref_tree):
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,             # <<<<<<<<<<<<<<
 *                                                                                             expand_polytomies=expand_polytomies,
 *                                                                                             unrooted_trees=unrooted,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_tree, __pyx_n_s_robinson_foulds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_src_tree);
  __Pyx_GIVEREF(__pyx_v_src_tree);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_src_tree);

  /* "ete4/coretype/tree.pyx":1879
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,
 *                                                                                             expand_polytomies=expand_polytomies,             # <<<<<<<<<<<<<<
 *                                                                                             unrooted_trees=unrooted,
 *                                                                                             attr_t1=ref_tree_attr,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_cur_scope->__pyx_v_expand_polytomies)) { __Pyx_RaiseClosureNameError("expand_polytomies"); __PYX_ERR(0, 1879, __pyx_L1_error) }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_expand_polytomies, __pyx_cur_scope->__pyx_v_expand_polytomies) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1880
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,
 *                                                                                             expand_polytomies=expand_polytomies,
 *                                                                                             unrooted_trees=unrooted,             # <<<<<<<<<<<<<<
 *                                                                                             attr_t1=ref_tree_attr,
 *                                                                                             attr_t2=source_tree_attr,
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_unrooted)) { __Pyx_RaiseClosureNameError("unrooted"); __PYX_ERR(0, 1880, __pyx_L1_error) }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_unrooted_trees, __pyx_cur_scope->__pyx_v_unrooted) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1881
 *                                                                                             expand_polytomies=expand_polytomies,
 *                                                                                             unrooted_trees=unrooted,
 *                                                                                             attr_t1=ref_tree_attr,             # <<<<<<<<<<<<<<
 *                                                                                             attr_t2=source_tree_attr,
 *                                                                                             min_support_t2=min_support_source,
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_ref_tree_attr)) { __Pyx_RaiseClosureNameError("ref_tree_attr"); __PYX_ERR(0, 1881, __pyx_L1_error) }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_attr_t1, __pyx_cur_scope->__pyx_v_ref_tree_attr) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1882
 *                                                                                             unrooted_trees=unrooted,
 *                                                                                             attr_t1=ref_tree_attr,
 *                                                                                             attr_t2=source_tree_attr,             # <<<<<<<<<<<<<<
 *                                                                                             min_support_t2=min_support_source,
 *                                                                                             min_support_t1=min_support_ref)
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_source_tree_attr)) { __Pyx_RaiseClosureNameError("source_tree_attr"); __PYX_ERR(0, 1882, __pyx_L1_error) }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_attr_t2, __pyx_cur_scope->__pyx_v_source_tree_attr) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1883
 *                                                                                             attr_t1=ref_tree_attr,
 *                                                                                             attr_t2=source_tree_attr,
 *                                                                                             min_support_t2=min_support_source,             # <<<<<<<<<<<<<<
 *                                                                                             min_support_t1=min_support_ref)
 * 
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min_support_source)) { __Pyx_RaiseClosureNameError("min_support_source"); __PYX_ERR(0, 1883, __pyx_L1_error) }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_support_t2, __pyx_cur_scope->__pyx_v_min_support_source) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1884
 *                                                                                             attr_t2=source_tree_attr,
 *                                                                                             min_support_t2=min_support_source,
 *                                                                                             min_support_t1=min_support_ref)             # <<<<<<<<<<<<<<
 * 
 *             # if trees share leaves, count their distances
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min_support_ref)) { __Pyx_RaiseClosureNameError("min_support_ref"); __PYX_ERR(0, 1884, __pyx_L1_error) }
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_support_t1, __pyx_cur_scope->__pyx_v_min_support_ref) < 0) __PYX_ERR(0, 1879, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1878
 *         def _compare(src_tree, ref_tree):
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,             # <<<<<<<<<<<<<<
 *                                                                                             expand_polytomies=expand_polytomies,
 *                                                                                             unrooted_trees=unrooted,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 7)) {
      if (size > 7) __Pyx_RaiseTooManyValuesError(7);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1878, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 6); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 6); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[7] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_1,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      for (i=0; i < 7; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1878, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[7] = {&__pyx_t_3,&__pyx_t_2,&__pyx_t_1,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    for (index=0; index < 7; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 7) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1878, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_rf = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_maxrf = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_common = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_ref_p = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_src_p = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_ref_disc = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_src_disc = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":1887
 * 
 *             # if trees share leaves, count their distances
 *             if len(common) > 0 and src_p and ref_p:             # <<<<<<<<<<<<<<
 *                 if unrooted:
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])
 */
  __pyx_t_12 = PyObject_Length(__pyx_v_common); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1887, __pyx_L1_error)
  __pyx_t_13 = ((__pyx_t_12 > 0) != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_11 = __pyx_t_13;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_src_p); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1887, __pyx_L1_error)
  if (__pyx_t_13) {
  } else {
    __pyx_t_11 = __pyx_t_13;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_ref_p); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __pyx_t_11 = __pyx_t_13;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_11) {

    /* "ete4/coretype/tree.pyx":1888
 *             # if trees share leaves, count their distances
 *             if len(common) > 0 and src_p and ref_p:
 *                 if unrooted:             # <<<<<<<<<<<<<<
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p[0])>1 and len(p[1])>0])
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_unrooted)) { __Pyx_RaiseClosureNameError("unrooted"); __PYX_ERR(0, 1888, __pyx_L1_error) }
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_unrooted); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1888, __pyx_L1_error)
    if (__pyx_t_11) {

      /* "ete4/coretype/tree.pyx":1889
 *             if len(common) > 0 and src_p and ref_p:
 *                 if unrooted:
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])             # <<<<<<<<<<<<<<
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p[0])>1 and len(p[1])>0])
 *                     common_edges = valid_ref_edges & valid_src_edges
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Subtract(__pyx_v_ref_p, __pyx_v_ref_disc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_7 = __pyx_t_8; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1889, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1889, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1889, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1889, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1889, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_14(__pyx_t_7);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1889, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_15 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1889, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_13 = ((__pyx_t_15 > 1) != 0);
        if (__pyx_t_13) {
        } else {
          __pyx_t_11 = __pyx_t_13;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1889, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_15 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1889, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_13 = ((__pyx_t_15 > 0) != 0);
        __pyx_t_11 = __pyx_t_13;
        __pyx_L13_bool_binop_done:;
        if (__pyx_t_11) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1889, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_valid_ref_edges = ((PyObject*)__pyx_t_7);
      __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1890
 *                 if unrooted:
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p[0])>1 and len(p[1])>0])             # <<<<<<<<<<<<<<
 *                     common_edges = valid_ref_edges & valid_src_edges
 *                 else:
 */
      __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_src_p, __pyx_v_src_disc); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_8 = __pyx_t_4; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1890, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1890, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1890, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_14(__pyx_t_8);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1890, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = ((__pyx_t_15 > 1) != 0);
        if (__pyx_t_13) {
        } else {
          __pyx_t_11 = __pyx_t_13;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = ((__pyx_t_15 > 0) != 0);
        __pyx_t_11 = __pyx_t_13;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_11) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1890, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PySet_New(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_valid_src_edges = ((PyObject*)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":1891
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p[0])>1 and len(p[1])>0])
 *                     common_edges = valid_ref_edges & valid_src_edges             # <<<<<<<<<<<<<<
 *                 else:
 * 
 */
      __pyx_t_8 = PyNumber_And(__pyx_v_valid_ref_edges, __pyx_v_valid_src_edges); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_v_common_edges = ((PyObject*)__pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":1888
 *             # if trees share leaves, count their distances
 *             if len(common) > 0 and src_p and ref_p:
 *                 if unrooted:             # <<<<<<<<<<<<<<
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p[0])>1 and len(p[1])>0])
 */
      goto __pyx_L9;
    }

    /* "ete4/coretype/tree.pyx":1894
 *                 else:
 * 
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p)>1])             # <<<<<<<<<<<<<<
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p)>1])
 *                     common_edges = valid_ref_edges & valid_src_edges
 */
    /*else*/ {
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyNumber_Subtract(__pyx_v_ref_p, __pyx_v_ref_disc); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1894, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1894, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1894, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1894, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1894, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1894, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_14(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1894, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_15 = PyObject_Length(__pyx_v_p); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1894, __pyx_L1_error)
        __pyx_t_11 = ((__pyx_t_15 > 1) != 0);
        if (__pyx_t_11) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1894, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_valid_ref_edges = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1895
 * 
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p)>1])
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p)>1])             # <<<<<<<<<<<<<<
 *                     common_edges = valid_ref_edges & valid_src_edges
 * 
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Subtract(__pyx_v_src_p, __pyx_v_src_disc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_7 = __pyx_t_8; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1895, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1895, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1895, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1895, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1895, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1895, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_14(__pyx_t_7);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1895, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_15 = PyObject_Length(__pyx_v_p); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1895, __pyx_L1_error)
        __pyx_t_11 = ((__pyx_t_15 > 1) != 0);
        if (__pyx_t_11) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_p))) __PYX_ERR(0, 1895, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_valid_src_edges = ((PyObject*)__pyx_t_7);
      __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":1896
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p)>1])
 *                     valid_src_edges = set([p for p in (src_p - src_disc) if len(p)>1])
 *                     common_edges = valid_ref_edges & valid_src_edges             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_7 = PyNumber_And(__pyx_v_valid_ref_edges, __pyx_v_valid_src_edges); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_v_common_edges = ((PyObject*)__pyx_t_7);
      __pyx_t_7 = 0;
    }
    __pyx_L9:;

    /* "ete4/coretype/tree.pyx":1887
 * 
 *             # if trees share leaves, count their distances
 *             if len(common) > 0 and src_p and ref_p:             # <<<<<<<<<<<<<<
 *                 if unrooted:
 *                     valid_ref_edges = set([p for p in (ref_p - ref_disc) if len(p[0])>1 and len(p[1])>0])
 */
    goto __pyx_L5;
  }

  /* "ete4/coretype/tree.pyx":1899
 * 
 *             else:
 *                 valid_ref_edges = set()             # <<<<<<<<<<<<<<
 *                 valid_src_edges = set()
 *                 common_edges = set()
 */
  /*else*/ {
    __pyx_t_7 = PySet_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_valid_ref_edges = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1900
 *             else:
 *                 valid_ref_edges = set()
 *                 valid_src_edges = set()             # <<<<<<<<<<<<<<
 *                 common_edges = set()
 * 
 */
    __pyx_t_7 = PySet_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_valid_src_edges = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":1901
 *                 valid_ref_edges = set()
 *                 valid_src_edges = set()
 *                 common_edges = set()             # <<<<<<<<<<<<<<
 * 
 *                 # # % of ref edges found in tree
 */
    __pyx_t_7 = PySet_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_common_edges = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;
  }
  __pyx_L5:;

  /* "ete4/coretype/tree.pyx":1912
 *                 #     target_found.append(1 - (incompatible_target_branches / (len(p2-d2))))
 * 
 *             return rf, maxrf, len(common), valid_ref_edges, valid_src_edges, common_edges             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_12 = PyObject_Length(__pyx_v_common); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1912, __pyx_L1_error)
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_rf);
  __Pyx_GIVEREF(__pyx_v_rf);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_rf);
  __Pyx_INCREF(__pyx_v_maxrf);
  __Pyx_GIVEREF(__pyx_v_maxrf);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_maxrf);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_valid_ref_edges);
  __Pyx_GIVEREF(__pyx_v_valid_ref_edges);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_valid_ref_edges);
  __Pyx_INCREF(__pyx_v_valid_src_edges);
  __Pyx_GIVEREF(__pyx_v_valid_src_edges);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_valid_src_edges);
  __Pyx_INCREF(__pyx_v_common_edges);
  __Pyx_GIVEREF(__pyx_v_common_edges);
  PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_v_common_edges);
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1876
 *             else: return 0.0
 * 
 *         def _compare(src_tree, ref_tree):             # <<<<<<<<<<<<<<
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.compare._compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rf);
  __Pyx_XDECREF(__pyx_v_maxrf);
  __Pyx_XDECREF(__pyx_v_common);
  __Pyx_XDECREF(__pyx_v_ref_p);
  __Pyx_XDECREF(__pyx_v_src_p);
  __Pyx_XDECREF(__pyx_v_ref_disc);
  __Pyx_XDECREF(__pyx_v_src_disc);
  __Pyx_XDECREF(__pyx_v_valid_ref_edges);
  __Pyx_XDECREF(__pyx_v_valid_src_edges);
  __Pyx_XDECREF(__pyx_v_common_edges);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":1858
 * 
 * 
 *     def compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0,             # <<<<<<<<<<<<<<
 *                 has_duplications=False, expand_polytomies=False, unrooted=False,
 *                 max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name'):
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_193compare(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_ref_tree, CYTHON_UNUSED PyObject *__pyx_v_use_collateral, PyObject *__pyx_v_min_support_source, PyObject *__pyx_v_min_support_ref, PyObject *__pyx_v_has_duplications, PyObject *__pyx_v_expand_polytomies, PyObject *__pyx_v_unrooted, PyObject *__pyx_v_max_treeko_splits_to_be_artifact, PyObject *__pyx_v_ref_tree_attr, PyObject *__pyx_v_source_tree_attr) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_source_tree = NULL;
  PyObject *__pyx_v__safe_div = 0;
  PyObject *__pyx_v__compare = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_total_valid_ref_edges;
  PyObject *__pyx_v_result = NULL;
  CYTHON_UNUSED Py_ssize_t __pyx_v_orig_target_size;
  PyObject *__pyx_v_ntrees = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ndups = NULL;
  PyObject *__pyx_v_sp_trees = NULL;
  PyObject *__pyx_v_all_rf = NULL;
  PyObject *__pyx_v_ref_found = NULL;
  PyObject *__pyx_v_src_found = NULL;
  PyObject *__pyx_v_tree_sizes = NULL;
  PyObject *__pyx_v_all_max_rf = NULL;
  CYTHON_UNUSED long __pyx_v_common_names;
  PyObject *__pyx_v_subtree_nw = NULL;
  PyObject *__pyx_v_subtree = NULL;
  PyObject *__pyx_v_subtree_content = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_total_rf = NULL;
  PyObject *__pyx_v_max_rf = NULL;
  PyObject *__pyx_v_ncommon = NULL;
  PyObject *__pyx_v_valid_ref_edges = NULL;
  PyObject *__pyx_v_valid_src_edges = NULL;
  PyObject *__pyx_v_common_edges = NULL;
  PyObject *__pyx_v_ref_found_in_src = NULL;
  PyObject *__pyx_v_src_found_in_ref = NULL;
  PyObject *__pyx_v_alld = NULL;
  PyObject *__pyx_v_a = NULL;
  double __pyx_v_b;
  PyObject *__pyx_v_treeko_d = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  double __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compare", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_15_compare(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_15_compare, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1858, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_min_support_source = __pyx_v_min_support_source;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_min_support_source);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_min_support_source);
  __pyx_cur_scope->__pyx_v_min_support_ref = __pyx_v_min_support_ref;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_min_support_ref);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_min_support_ref);
  __pyx_cur_scope->__pyx_v_expand_polytomies = __pyx_v_expand_polytomies;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_expand_polytomies);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_expand_polytomies);
  __pyx_cur_scope->__pyx_v_unrooted = __pyx_v_unrooted;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_unrooted);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_unrooted);
  __pyx_cur_scope->__pyx_v_ref_tree_attr = __pyx_v_ref_tree_attr;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ref_tree_attr);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ref_tree_attr);
  __pyx_cur_scope->__pyx_v_source_tree_attr = __pyx_v_source_tree_attr;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_source_tree_attr);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_source_tree_attr);

  /* "ete4/coretype/tree.pyx":1869
 * 
 *         """
 *         source_tree = self             # <<<<<<<<<<<<<<
 * 
 *         def _safe_div(a, b):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_v_source_tree = __pyx_v_self;

  /* "ete4/coretype/tree.pyx":1871
 *         source_tree = self
 * 
 *         def _safe_div(a, b):             # <<<<<<<<<<<<<<
 *             if a != 0:
 *                 return a / float(b)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_7compare_1_safe_div, 0, __pyx_n_s_compare_locals__safe_div, NULL, __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__safe_div = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1876
 *             else: return 0.0
 * 
 *         def _compare(src_tree, ref_tree):             # <<<<<<<<<<<<<<
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_7compare_3_compare, 0, __pyx_n_s_compare_locals__compare, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__compare = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1915
 * 
 * 
 *         total_valid_ref_edges = len([n for n in ref_tree.traverse() if n.children and n.support > min_support_ref])             # <<<<<<<<<<<<<<
 *         result = {}
 *         if has_duplications:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref_tree, __pyx_n_s_traverse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1915, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1915, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1915, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1915, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1915, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_support); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_cur_scope->__pyx_v_min_support_ref, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1915, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1915, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_n))) __PYX_ERR(0, 1915, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_total_valid_ref_edges = __pyx_t_5;

  /* "ete4/coretype/tree.pyx":1916
 * 
 *         total_valid_ref_edges = len([n for n in ref_tree.traverse() if n.children and n.support > min_support_ref])
 *         result = {}             # <<<<<<<<<<<<<<
 *         if has_duplications:
 *             orig_target_size = len(source_tree)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":1917
 *         total_valid_ref_edges = len([n for n in ref_tree.traverse() if n.children and n.support > min_support_ref])
 *         result = {}
 *         if has_duplications:             # <<<<<<<<<<<<<<
 *             orig_target_size = len(source_tree)
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_has_duplications); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1917, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ete4/coretype/tree.pyx":1918
 *         result = {}
 *         if has_duplications:
 *             orig_target_size = len(source_tree)             # <<<<<<<<<<<<<<
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(
 *                 autodetect_duplications=True, newick_only=True,
 */
    __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_source_tree)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1918, __pyx_L1_error)
    __pyx_v_orig_target_size = __pyx_t_5;

    /* "ete4/coretype/tree.pyx":1919
 *         if has_duplications:
 *             orig_target_size = len(source_tree)
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(             # <<<<<<<<<<<<<<
 *                 autodetect_duplications=True, newick_only=True,
 *                 target_attr=source_tree_attr, map_properties=[source_tree_attr, "support"])
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_source_tree), __pyx_n_s_get_speciation_trees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "ete4/coretype/tree.pyx":1920
 *             orig_target_size = len(source_tree)
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(
 *                 autodetect_duplications=True, newick_only=True,             # <<<<<<<<<<<<<<
 *                 target_attr=source_tree_attr, map_properties=[source_tree_attr, "support"])
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_autodetect_duplications, Py_True) < 0) __PYX_ERR(0, 1920, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_newick_only, Py_True) < 0) __PYX_ERR(0, 1920, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":1921
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(
 *                 autodetect_duplications=True, newick_only=True,
 *                 target_attr=source_tree_attr, map_properties=[source_tree_attr, "support"])             # <<<<<<<<<<<<<<
 * 
 *             if ntrees < max_treeko_splits_to_be_artifact:
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_target_attr, __pyx_cur_scope->__pyx_v_source_tree_attr) < 0) __PYX_ERR(0, 1920, __pyx_L1_error)
    __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_source_tree_attr);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_source_tree_attr);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_source_tree_attr);
    __Pyx_INCREF(__pyx_n_s_support);
    __Pyx_GIVEREF(__pyx_n_s_support);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_support);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_map_properties, __pyx_t_4) < 0) __PYX_ERR(0, 1920, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":1919
 *         if has_duplications:
 *             orig_target_size = len(source_tree)
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(             # <<<<<<<<<<<<<<
 *                 autodetect_duplications=True, newick_only=True,
 *                 target_attr=source_tree_attr, map_properties=[source_tree_attr, "support"])
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1919, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_1 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_1)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 2; __pyx_t_2 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_2)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 3) < 0) __PYX_ERR(0, 1919, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1919, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __pyx_v_ntrees = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_ndups = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_sp_trees = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":1923
 *                 target_attr=source_tree_attr, map_properties=[source_tree_attr, "support"])
 * 
 *             if ntrees < max_treeko_splits_to_be_artifact:             # <<<<<<<<<<<<<<
 *                 all_rf = []
 *                 ref_found = []
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_ntrees, __pyx_v_max_treeko_splits_to_be_artifact, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1923, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1923, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":1924
 * 
 *             if ntrees < max_treeko_splits_to_be_artifact:
 *                 all_rf = []             # <<<<<<<<<<<<<<
 *                 ref_found = []
 *                 src_found = []
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_all_rf = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1925
 *             if ntrees < max_treeko_splits_to_be_artifact:
 *                 all_rf = []
 *                 ref_found = []             # <<<<<<<<<<<<<<
 *                 src_found = []
 *                 tree_sizes = []
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_ref_found = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1926
 *                 all_rf = []
 *                 ref_found = []
 *                 src_found = []             # <<<<<<<<<<<<<<
 *                 tree_sizes = []
 *                 all_max_rf = []
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_src_found = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1927
 *                 ref_found = []
 *                 src_found = []
 *                 tree_sizes = []             # <<<<<<<<<<<<<<
 *                 all_max_rf = []
 *                 common_names = 0
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_tree_sizes = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1928
 *                 src_found = []
 *                 tree_sizes = []
 *                 all_max_rf = []             # <<<<<<<<<<<<<<
 *                 common_names = 0
 * 
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_all_max_rf = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1929
 *                 tree_sizes = []
 *                 all_max_rf = []
 *                 common_names = 0             # <<<<<<<<<<<<<<
 * 
 *                 for subtree_nw in sp_trees:
 */
      __pyx_v_common_names = 0;

      /* "ete4/coretype/tree.pyx":1931
 *                 common_names = 0
 * 
 *                 for subtree_nw in sp_trees:             # <<<<<<<<<<<<<<
 * 
 *                     #if seedid and not use_collateral and (seedid not in subtree_nw):
 */
      if (likely(PyList_CheckExact(__pyx_v_sp_trees)) || PyTuple_CheckExact(__pyx_v_sp_trees)) {
        __pyx_t_4 = __pyx_v_sp_trees; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_sp_trees); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1931, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1931, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1931, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1931, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1931, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1931, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1931, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_subtree_nw, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "ete4/coretype/tree.pyx":1935
 *                     #if seedid and not use_collateral and (seedid not in subtree_nw):
 *                     #    continue
 *                     subtree = source_tree.__class__(subtree_nw,             # <<<<<<<<<<<<<<
 *                             sp_naming_function = source_tree.props.get('_speciesFunction'))
 *                     if not subtree.children:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_source_tree), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_subtree_nw);
        __Pyx_GIVEREF(__pyx_v_subtree_nw);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_subtree_nw);

        /* "ete4/coretype/tree.pyx":1936
 *                     #    continue
 *                     subtree = source_tree.__class__(subtree_nw,
 *                             sp_naming_function = source_tree.props.get('_speciesFunction'))             # <<<<<<<<<<<<<<
 *                     if not subtree.children:
 *                         continue
 */
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_source_tree), __pyx_n_s_props); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_get); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, __pyx_n_s_speciesFunction) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_n_s_speciesFunction);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1936, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sp_naming_function, __pyx_t_9) < 0) __PYX_ERR(0, 1936, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "ete4/coretype/tree.pyx":1935
 *                     #if seedid and not use_collateral and (seedid not in subtree_nw):
 *                     #    continue
 *                     subtree = source_tree.__class__(subtree_nw,             # <<<<<<<<<<<<<<
 *                             sp_naming_function = source_tree.props.get('_speciesFunction'))
 *                     if not subtree.children:
 */
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_subtree, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "ete4/coretype/tree.pyx":1937
 *                     subtree = source_tree.__class__(subtree_nw,
 *                             sp_naming_function = source_tree.props.get('_speciesFunction'))
 *                     if not subtree.children:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_subtree, __pyx_n_s_children); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1937, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_8 = ((!__pyx_t_7) != 0);
        if (__pyx_t_8) {

          /* "ete4/coretype/tree.pyx":1938
 *                             sp_naming_function = source_tree.props.get('_speciesFunction'))
 *                     if not subtree.children:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     # only necessary if rf function is going to filter by support
 */
          goto __pyx_L12_continue;

          /* "ete4/coretype/tree.pyx":1937
 *                     subtree = source_tree.__class__(subtree_nw,
 *                             sp_naming_function = source_tree.props.get('_speciesFunction'))
 *                     if not subtree.children:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
        }

        /* "ete4/coretype/tree.pyx":1944
 *                     # find the support for each node in the treeko tree from the
 *                     # original one.
 *                     if min_support_source > 0:             # <<<<<<<<<<<<<<
 *                         subtree_content = subtree.get_cached_content(store_attr='name')
 *                         for n in subtree.traverse():
 */
        __pyx_t_9 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_min_support_source, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1944, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1944, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (__pyx_t_8) {

          /* "ete4/coretype/tree.pyx":1945
 *                     # original one.
 *                     if min_support_source > 0:
 *                         subtree_content = subtree.get_cached_content(store_attr='name')             # <<<<<<<<<<<<<<
 *                         for n in subtree.traverse():
 *                             if n.children:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_subtree, __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1945, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1945, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_store_attr, __pyx_n_s_name) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1945, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF_SET(__pyx_v_subtree_content, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "ete4/coretype/tree.pyx":1946
 *                     if min_support_source > 0:
 *                         subtree_content = subtree.get_cached_content(store_attr='name')
 *                         for n in subtree.traverse():             # <<<<<<<<<<<<<<
 *                             if n.children:
 *                                 n.support = source_tree.get_common_ancestor(subtree_content[n]).support
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_subtree, __pyx_n_s_traverse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1946, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1946, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1946, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1946, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1946, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1946, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1946, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1946, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_14(__pyx_t_3);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1946, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "ete4/coretype/tree.pyx":1947
 *                         subtree_content = subtree.get_cached_content(store_attr='name')
 *                         for n in subtree.traverse():
 *                             if n.children:             # <<<<<<<<<<<<<<
 *                                 n.support = source_tree.get_common_ancestor(subtree_content[n]).support
 * 
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1947, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1947, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_8) {

              /* "ete4/coretype/tree.pyx":1948
 *                         for n in subtree.traverse():
 *                             if n.children:
 *                                 n.support = source_tree.get_common_ancestor(subtree_content[n]).support             # <<<<<<<<<<<<<<
 * 
 *                     total_rf, max_rf, ncommon, valid_ref_edges, valid_src_edges, common_edges = _compare(subtree, ref_tree)
 */
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_source_tree), __pyx_n_s_get_common_ancestor); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1948, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_subtree_content, __pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1948, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_12 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
                if (likely(__pyx_t_12)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                  __Pyx_INCREF(__pyx_t_12);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_9, function);
                }
              }
              __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_12, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1948, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_support); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1948, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (__Pyx_PyObject_SetAttrStr(__pyx_v_n, __pyx_n_s_support, __pyx_t_9) < 0) __PYX_ERR(0, 1948, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

              /* "ete4/coretype/tree.pyx":1947
 *                         subtree_content = subtree.get_cached_content(store_attr='name')
 *                         for n in subtree.traverse():
 *                             if n.children:             # <<<<<<<<<<<<<<
 *                                 n.support = source_tree.get_common_ancestor(subtree_content[n]).support
 * 
 */
            }

            /* "ete4/coretype/tree.pyx":1946
 *                     if min_support_source > 0:
 *                         subtree_content = subtree.get_cached_content(store_attr='name')
 *                         for n in subtree.traverse():             # <<<<<<<<<<<<<<
 *                             if n.children:
 *                                 n.support = source_tree.get_common_ancestor(subtree_content[n]).support
 */
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "ete4/coretype/tree.pyx":1944
 *                     # find the support for each node in the treeko tree from the
 *                     # original one.
 *                     if min_support_source > 0:             # <<<<<<<<<<<<<<
 *                         subtree_content = subtree.get_cached_content(store_attr='name')
 *                         for n in subtree.traverse():
 */
        }

        /* "ete4/coretype/tree.pyx":1950
 *                                 n.support = source_tree.get_common_ancestor(subtree_content[n]).support
 * 
 *                     total_rf, max_rf, ncommon, valid_ref_edges, valid_src_edges, common_edges = _compare(subtree, ref_tree)             # <<<<<<<<<<<<<<
 * 
 *                     all_rf.append(total_rf)
 */
        __pyx_t_3 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare_2_compare(__pyx_v__compare, __pyx_v_subtree, __pyx_v_ref_tree); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1950, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 6)) {
            if (size > 6) __Pyx_RaiseTooManyValuesError(6);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1950, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 4); 
            __pyx_t_15 = PyTuple_GET_ITEM(sequence, 5); 
          } else {
            __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 4); 
            __pyx_t_15 = PyList_GET_ITEM(sequence, 5); 
          }
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_15);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[6] = {&__pyx_t_9,&__pyx_t_1,&__pyx_t_2,&__pyx_t_12,&__pyx_t_11,&__pyx_t_15};
            for (i=0; i < 6; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1950, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[6] = {&__pyx_t_9,&__pyx_t_1,&__pyx_t_2,&__pyx_t_12,&__pyx_t_11,&__pyx_t_15};
          __pyx_t_16 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1950, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_10 = Py_TYPE(__pyx_t_16)->tp_iternext;
          for (index=0; index < 6; index++) {
            PyObject* item = __pyx_t_10(__pyx_t_16); if (unlikely(!item)) goto __pyx_L19_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_16), 6) < 0) __PYX_ERR(0, 1950, __pyx_L1_error)
          __pyx_t_10 = NULL;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          goto __pyx_L20_unpacking_done;
          __pyx_L19_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_10 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1950, __pyx_L1_error)
          __pyx_L20_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_total_rf, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_max_rf, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ncommon, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_valid_ref_edges, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_valid_src_edges, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_common_edges, __pyx_t_15);
        __pyx_t_15 = 0;

        /* "ete4/coretype/tree.pyx":1952
 *                     total_rf, max_rf, ncommon, valid_ref_edges, valid_src_edges, common_edges = _compare(subtree, ref_tree)
 * 
 *                     all_rf.append(total_rf)             # <<<<<<<<<<<<<<
 *                     all_max_rf.append(max_rf)
 *                     tree_sizes.append(ncommon)
 */
        __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_all_rf, __pyx_v_total_rf); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1952, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1953
 * 
 *                     all_rf.append(total_rf)
 *                     all_max_rf.append(max_rf)             # <<<<<<<<<<<<<<
 *                     tree_sizes.append(ncommon)
 * 
 */
        __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_all_max_rf, __pyx_v_max_rf); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1953, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1954
 *                     all_rf.append(total_rf)
 *                     all_max_rf.append(max_rf)
 *                     tree_sizes.append(ncommon)             # <<<<<<<<<<<<<<
 * 
 *                     if unrooted:
 */
        __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_tree_sizes, __pyx_v_ncommon); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1954, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1956
 *                     tree_sizes.append(ncommon)
 * 
 *                     if unrooted:             # <<<<<<<<<<<<<<
 *                         ref_found_in_src = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else None
 *                         src_found_in_ref = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else None
 */
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_unrooted); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1956, __pyx_L1_error)
        if (__pyx_t_8) {

          /* "ete4/coretype/tree.pyx":1957
 * 
 *                     if unrooted:
 *                         ref_found_in_src = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else None             # <<<<<<<<<<<<<<
 *                         src_found_in_ref = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else None
 *                     else:
 */
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1957, __pyx_L1_error)
          if (__pyx_t_8) {
            __pyx_t_13 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1957, __pyx_L1_error)
            __pyx_t_18 = PyObject_Length(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1957, __pyx_L1_error)
            if (unlikely(((double)__pyx_t_18) == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 1957, __pyx_L1_error)
            }
            __pyx_t_15 = PyFloat_FromDouble((__pyx_t_13 / ((double)__pyx_t_18))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1957, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_3 = __pyx_t_15;
            __pyx_t_15 = 0;
          } else {
            __Pyx_INCREF(Py_None);
            __pyx_t_3 = Py_None;
          }
          __Pyx_XDECREF_SET(__pyx_v_ref_found_in_src, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "ete4/coretype/tree.pyx":1958
 *                     if unrooted:
 *                         ref_found_in_src = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else None
 *                         src_found_in_ref = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else None             # <<<<<<<<<<<<<<
 *                     else:
 *                         # in rooted trees, we want to discount the root edge
 */
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1958, __pyx_L1_error)
          if (__pyx_t_8) {
            __pyx_t_18 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1958, __pyx_L1_error)
            __pyx_t_13 = PyObject_Length(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1958, __pyx_L1_error)
            if (unlikely(((double)__pyx_t_13) == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 1958, __pyx_L1_error)
            }
            __pyx_t_15 = PyFloat_FromDouble((__pyx_t_18 / ((double)__pyx_t_13))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1958, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_3 = __pyx_t_15;
            __pyx_t_15 = 0;
          } else {
            __Pyx_INCREF(Py_None);
            __pyx_t_3 = Py_None;
          }
          __Pyx_XDECREF_SET(__pyx_v_src_found_in_ref, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "ete4/coretype/tree.pyx":1956
 *                     tree_sizes.append(ncommon)
 * 
 *                     if unrooted:             # <<<<<<<<<<<<<<
 *                         ref_found_in_src = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else None
 *                         src_found_in_ref = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else None
 */
          goto __pyx_L21;
        }

        /* "ete4/coretype/tree.pyx":1963
 *                         # from the percentage of congruence. Otherwise we will never see a 0%
 *                         # congruence for totally different trees
 *                         ref_found_in_src = (len(common_edges)-1)/float(len(valid_ref_edges)-1) if len(valid_ref_edges)>1 else None             # <<<<<<<<<<<<<<
 *                         src_found_in_ref = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else None
 * 
 */
        /*else*/ {
          __pyx_t_13 = PyObject_Length(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1963, __pyx_L1_error)
          if (((__pyx_t_13 > 1) != 0)) {
            __pyx_t_18 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1963, __pyx_L1_error)
            __pyx_t_19 = (__pyx_t_18 - 1);
            __pyx_t_18 = PyObject_Length(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1963, __pyx_L1_error)
            if (unlikely(((double)(__pyx_t_18 - 1)) == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 1963, __pyx_L1_error)
            }
            __pyx_t_15 = PyFloat_FromDouble((__pyx_t_19 / ((double)(__pyx_t_18 - 1)))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1963, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_3 = __pyx_t_15;
            __pyx_t_15 = 0;
          } else {
            __Pyx_INCREF(Py_None);
            __pyx_t_3 = Py_None;
          }
          __Pyx_XDECREF_SET(__pyx_v_ref_found_in_src, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "ete4/coretype/tree.pyx":1964
 *                         # congruence for totally different trees
 *                         ref_found_in_src = (len(common_edges)-1)/float(len(valid_ref_edges)-1) if len(valid_ref_edges)>1 else None
 *                         src_found_in_ref = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else None             # <<<<<<<<<<<<<<
 * 
 *                     if ref_found_in_src is not None:
 */
          __pyx_t_13 = PyObject_Length(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1964, __pyx_L1_error)
          if (((__pyx_t_13 > 1) != 0)) {
            __pyx_t_18 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1964, __pyx_L1_error)
            __pyx_t_19 = (__pyx_t_18 - 1);
            __pyx_t_18 = PyObject_Length(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1964, __pyx_L1_error)
            if (unlikely(((double)(__pyx_t_18 - 1)) == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 1964, __pyx_L1_error)
            }
            __pyx_t_15 = PyFloat_FromDouble((__pyx_t_19 / ((double)(__pyx_t_18 - 1)))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1964, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_3 = __pyx_t_15;
            __pyx_t_15 = 0;
          } else {
            __Pyx_INCREF(Py_None);
            __pyx_t_3 = Py_None;
          }
          __Pyx_XDECREF_SET(__pyx_v_src_found_in_ref, __pyx_t_3);
          __pyx_t_3 = 0;
        }
        __pyx_L21:;

        /* "ete4/coretype/tree.pyx":1966
 *                         src_found_in_ref = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else None
 * 
 *                     if ref_found_in_src is not None:             # <<<<<<<<<<<<<<
 *                         ref_found.append(ref_found_in_src)
 * 
 */
        __pyx_t_8 = (__pyx_v_ref_found_in_src != Py_None);
        __pyx_t_7 = (__pyx_t_8 != 0);
        if (__pyx_t_7) {

          /* "ete4/coretype/tree.pyx":1967
 * 
 *                     if ref_found_in_src is not None:
 *                         ref_found.append(ref_found_in_src)             # <<<<<<<<<<<<<<
 * 
 *                     if src_found_in_ref is not None:
 */
          __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_ref_found, __pyx_v_ref_found_in_src); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1967, __pyx_L1_error)

          /* "ete4/coretype/tree.pyx":1966
 *                         src_found_in_ref = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else None
 * 
 *                     if ref_found_in_src is not None:             # <<<<<<<<<<<<<<
 *                         ref_found.append(ref_found_in_src)
 * 
 */
        }

        /* "ete4/coretype/tree.pyx":1969
 *                         ref_found.append(ref_found_in_src)
 * 
 *                     if src_found_in_ref is not None:             # <<<<<<<<<<<<<<
 *                         src_found.append(src_found_in_ref)
 * 
 */
        __pyx_t_7 = (__pyx_v_src_found_in_ref != Py_None);
        __pyx_t_8 = (__pyx_t_7 != 0);
        if (__pyx_t_8) {

          /* "ete4/coretype/tree.pyx":1970
 * 
 *                     if src_found_in_ref is not None:
 *                         src_found.append(src_found_in_ref)             # <<<<<<<<<<<<<<
 * 
 *                 if all_rf:
 */
          __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_src_found, __pyx_v_src_found_in_ref); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1970, __pyx_L1_error)

          /* "ete4/coretype/tree.pyx":1969
 *                         ref_found.append(ref_found_in_src)
 * 
 *                     if src_found_in_ref is not None:             # <<<<<<<<<<<<<<
 *                         src_found.append(src_found_in_ref)
 * 
 */
        }

        /* "ete4/coretype/tree.pyx":1931
 *                 common_names = 0
 * 
 *                 for subtree_nw in sp_trees:             # <<<<<<<<<<<<<<
 * 
 *                     #if seedid and not use_collateral and (seedid not in subtree_nw):
 */
        __pyx_L12_continue:;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":1972
 *                         src_found.append(src_found_in_ref)
 * 
 *                 if all_rf:             # <<<<<<<<<<<<<<
 *                     # Treeko speciation distance
 *                     alld = [_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))]
 */
      __pyx_t_8 = (PyList_GET_SIZE(__pyx_v_all_rf) != 0);
      if (__pyx_t_8) {

        /* "ete4/coretype/tree.pyx":1974
 *                 if all_rf:
 *                     # Treeko speciation distance
 *                     alld = [_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))]             # <<<<<<<<<<<<<<
 *                     a = sum([alld[i] * tree_sizes[i] for i in range(len(all_rf))])
 *                     b = float(sum(tree_sizes))
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_range); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_5 = PyList_GET_SIZE(__pyx_v_all_rf); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1974, __pyx_L1_error)
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_12, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_11);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_15 = __pyx_t_3; __Pyx_INCREF(__pyx_t_15); __pyx_t_5 = 0;
          __pyx_t_6 = NULL;
        } else {
          __pyx_t_5 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1974, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_6 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1974, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_6)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1974, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_15, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1974, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1974, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_15, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1974, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_6(__pyx_t_15);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1974, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_all_rf, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1974, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_all_max_rf, __pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1974, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyNumber_Float(__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1974, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare__safe_div(__pyx_v__safe_div, __pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1974, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 1974, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_v_alld = ((PyObject*)__pyx_t_4);
        __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":1975
 *                     # Treeko speciation distance
 *                     alld = [_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))]
 *                     a = sum([alld[i] * tree_sizes[i] for i in range(len(all_rf))])             # <<<<<<<<<<<<<<
 *                     b = float(sum(tree_sizes))
 *                     treeko_d = a/b if a else 0.0
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_range); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = PyList_GET_SIZE(__pyx_v_all_rf); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1975, __pyx_L1_error)
        __pyx_t_12 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_15 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_3, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
          __pyx_t_11 = __pyx_t_15; __Pyx_INCREF(__pyx_t_11); __pyx_t_5 = 0;
          __pyx_t_6 = NULL;
        } else {
          __pyx_t_5 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1975, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_6 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1975, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        for (;;) {
          if (likely(!__pyx_t_6)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_15 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_5); __Pyx_INCREF(__pyx_t_15); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1975, __pyx_L1_error)
              #else
              __pyx_t_15 = PySequence_ITEM(__pyx_t_11, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1975, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_15);
              #endif
            } else {
              if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_5); __Pyx_INCREF(__pyx_t_15); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1975, __pyx_L1_error)
              #else
              __pyx_t_15 = PySequence_ITEM(__pyx_t_11, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1975, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_15);
              #endif
            }
          } else {
            __pyx_t_15 = __pyx_t_6(__pyx_t_11);
            if (unlikely(!__pyx_t_15)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1975, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_15);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_15);
          __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_v_alld, __pyx_v_i); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1975, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_tree_sizes, __pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1975, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_3 = PyNumber_Multiply(__pyx_t_15, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1975, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1975, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1975, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_a = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1976
 *                     alld = [_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))]
 *                     a = sum([alld[i] * tree_sizes[i] for i in range(len(all_rf))])
 *                     b = float(sum(tree_sizes))             # <<<<<<<<<<<<<<
 *                     treeko_d = a/b if a else 0.0
 *                     result["treeko_dist"] = treeko_d
 */
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_v_tree_sizes); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1976, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_20 = __Pyx_PyObject_AsDouble(__pyx_t_11); if (unlikely(__pyx_t_20 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1976, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_v_b = __pyx_t_20;

        /* "ete4/coretype/tree.pyx":1977
 *                     a = sum([alld[i] * tree_sizes[i] for i in range(len(all_rf))])
 *                     b = float(sum(tree_sizes))
 *                     treeko_d = a/b if a else 0.0             # <<<<<<<<<<<<<<
 *                     result["treeko_dist"] = treeko_d
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_a); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1977, __pyx_L1_error)
        if (__pyx_t_8) {
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1977, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1977, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_11 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(__pyx_float_0_0);
          __pyx_t_11 = __pyx_float_0_0;
        }
        __pyx_v_treeko_d = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1978
 *                     b = float(sum(tree_sizes))
 *                     treeko_d = a/b if a else 0.0
 *                     result["treeko_dist"] = treeko_d             # <<<<<<<<<<<<<<
 * 
 *                     result["rf"] = utils.mean(all_rf)
 */
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_treeko_dist, __pyx_v_treeko_d) < 0)) __PYX_ERR(0, 1978, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":1980
 *                     result["treeko_dist"] = treeko_d
 * 
 *                     result["rf"] = utils.mean(all_rf)             # <<<<<<<<<<<<<<
 *                     result["max_rf"] = max(all_max_rf)
 *                     result["effective_tree_size"] = utils.mean(tree_sizes)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_utils); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1980, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1980, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_11 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_all_rf) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_all_rf);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1980, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_rf, __pyx_t_11) < 0)) __PYX_ERR(0, 1980, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1981
 * 
 *                     result["rf"] = utils.mean(all_rf)
 *                     result["max_rf"] = max(all_max_rf)             # <<<<<<<<<<<<<<
 *                     result["effective_tree_size"] = utils.mean(tree_sizes)
 *                     result["norm_rf"] = utils.mean([_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))])
 */
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_all_max_rf); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_max_rf, __pyx_t_11) < 0)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1982
 *                     result["rf"] = utils.mean(all_rf)
 *                     result["max_rf"] = max(all_max_rf)
 *                     result["effective_tree_size"] = utils.mean(tree_sizes)             # <<<<<<<<<<<<<<
 *                     result["norm_rf"] = utils.mean([_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))])
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_utils); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_mean); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_11 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_tree_sizes) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_tree_sizes);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_effective_tree_size, __pyx_t_11) < 0)) __PYX_ERR(0, 1982, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1983
 *                     result["max_rf"] = max(all_max_rf)
 *                     result["effective_tree_size"] = utils.mean(tree_sizes)
 *                     result["norm_rf"] = utils.mean([_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))])             # <<<<<<<<<<<<<<
 * 
 *                     result["ref_edges_in_source"] = utils.mean(ref_found)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_utils); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_range); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_5 = PyList_GET_SIZE(__pyx_v_all_rf); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1983, __pyx_L1_error)
        __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
          __pyx_t_15 = __pyx_t_12; __Pyx_INCREF(__pyx_t_15); __pyx_t_5 = 0;
          __pyx_t_6 = NULL;
        } else {
          __pyx_t_5 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_6 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1983, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        for (;;) {
          if (likely(!__pyx_t_6)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_12 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_5); __Pyx_INCREF(__pyx_t_12); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1983, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_15, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1983, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            } else {
              if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_5); __Pyx_INCREF(__pyx_t_12); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1983, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_15, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1983, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            }
          } else {
            __pyx_t_12 = __pyx_t_6(__pyx_t_15);
            if (unlikely(!__pyx_t_12)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1983, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_12);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_all_rf, __pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_all_max_rf, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare__safe_div(__pyx_v__safe_div, __pyx_t_12, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1983, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_11 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_norm_rf, __pyx_t_11) < 0)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1985
 *                     result["norm_rf"] = utils.mean([_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))])
 * 
 *                     result["ref_edges_in_source"] = utils.mean(ref_found)             # <<<<<<<<<<<<<<
 *                     result["source_edges_in_ref"] = utils.mean(src_found)
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_utils); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_mean); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_11 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_ref_found) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_ref_found);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_ref_edges_in_source, __pyx_t_11) < 0)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1986
 * 
 *                     result["ref_edges_in_source"] = utils.mean(ref_found)
 *                     result["source_edges_in_ref"] = utils.mean(src_found)             # <<<<<<<<<<<<<<
 * 
 *                     result["source_subtrees"] = len(all_rf)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_utils); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1986, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1986, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_11 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_src_found) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_src_found);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1986, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_edges_in_ref, __pyx_t_11) < 0)) __PYX_ERR(0, 1986, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1988
 *                     result["source_edges_in_ref"] = utils.mean(src_found)
 * 
 *                     result["source_subtrees"] = len(all_rf)             # <<<<<<<<<<<<<<
 *                     result["common_edges"] = set()
 *                     result["source_edges"] = set()
 */
        __pyx_t_5 = PyList_GET_SIZE(__pyx_v_all_rf); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1988, __pyx_L1_error)
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1988, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_subtrees, __pyx_t_11) < 0)) __PYX_ERR(0, 1988, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1989
 * 
 *                     result["source_subtrees"] = len(all_rf)
 *                     result["common_edges"] = set()             # <<<<<<<<<<<<<<
 *                     result["source_edges"] = set()
 *                     result["ref_edges"] = set()
 */
        __pyx_t_11 = PySet_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1989, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_common_edges, __pyx_t_11) < 0)) __PYX_ERR(0, 1989, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1990
 *                     result["source_subtrees"] = len(all_rf)
 *                     result["common_edges"] = set()
 *                     result["source_edges"] = set()             # <<<<<<<<<<<<<<
 *                     result["ref_edges"] = set()
 *         else:
 */
        __pyx_t_11 = PySet_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_edges, __pyx_t_11) < 0)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1991
 *                     result["common_edges"] = set()
 *                     result["source_edges"] = set()
 *                     result["ref_edges"] = set()             # <<<<<<<<<<<<<<
 *         else:
 *             total_rf, max_rf, ncommon, valid_ref_edges, valid_src_edges, common_edges = _compare(source_tree, ref_tree)
 */
        __pyx_t_11 = PySet_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_ref_edges, __pyx_t_11) < 0)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "ete4/coretype/tree.pyx":1972
 *                         src_found.append(src_found_in_ref)
 * 
 *                 if all_rf:             # <<<<<<<<<<<<<<
 *                     # Treeko speciation distance
 *                     alld = [_safe_div(all_rf[i], float(all_max_rf[i])) for i in range(len(all_rf))]
 */
      }

      /* "ete4/coretype/tree.pyx":1923
 *                 target_attr=source_tree_attr, map_properties=[source_tree_attr, "support"])
 * 
 *             if ntrees < max_treeko_splits_to_be_artifact:             # <<<<<<<<<<<<<<
 *                 all_rf = []
 *                 ref_found = []
 */
    }

    /* "ete4/coretype/tree.pyx":1917
 *         total_valid_ref_edges = len([n for n in ref_tree.traverse() if n.children and n.support > min_support_ref])
 *         result = {}
 *         if has_duplications:             # <<<<<<<<<<<<<<
 *             orig_target_size = len(source_tree)
 *             ntrees, ndups, sp_trees = source_tree.get_speciation_trees(
 */
    goto __pyx_L8;
  }

  /* "ete4/coretype/tree.pyx":1993
 *                     result["ref_edges"] = set()
 *         else:
 *             total_rf, max_rf, ncommon, valid_ref_edges, valid_src_edges, common_edges = _compare(source_tree, ref_tree)             # <<<<<<<<<<<<<<
 * 
 *             result["rf"] = float(total_rf) if max_rf else "NA"
 */
  /*else*/ {
    __pyx_t_11 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_7compare_2_compare(__pyx_v__compare, ((PyObject *)__pyx_v_source_tree), __pyx_v_ref_tree); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
      PyObject* sequence = __pyx_t_11;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 6)) {
        if (size > 6) __Pyx_RaiseTooManyValuesError(6);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1993, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_15 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 5); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_15 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 5); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_12);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[6] = {&__pyx_t_4,&__pyx_t_3,&__pyx_t_15,&__pyx_t_2,&__pyx_t_1,&__pyx_t_12};
        for (i=0; i < 6; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1993, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[6] = {&__pyx_t_4,&__pyx_t_3,&__pyx_t_15,&__pyx_t_2,&__pyx_t_1,&__pyx_t_12};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 6; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L31_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 6) < 0) __PYX_ERR(0, 1993, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L32_unpacking_done;
      __pyx_L31_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1993, __pyx_L1_error)
      __pyx_L32_unpacking_done:;
    }
    __pyx_v_total_rf = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_max_rf = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_ncommon = __pyx_t_15;
    __pyx_t_15 = 0;
    __pyx_v_valid_ref_edges = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_valid_src_edges = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_common_edges = __pyx_t_12;
    __pyx_t_12 = 0;

    /* "ete4/coretype/tree.pyx":1995
 *             total_rf, max_rf, ncommon, valid_ref_edges, valid_src_edges, common_edges = _compare(source_tree, ref_tree)
 * 
 *             result["rf"] = float(total_rf) if max_rf else "NA"             # <<<<<<<<<<<<<<
 *             result["max_rf"] = float(max_rf)
 *             if unrooted:
 */
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_max_rf); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1995, __pyx_L1_error)
    if (__pyx_t_8) {
      __pyx_t_12 = __Pyx_PyNumber_Float(__pyx_v_total_rf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1995, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = __pyx_t_12;
      __pyx_t_12 = 0;
    } else {
      __Pyx_INCREF(__pyx_n_s_NA);
      __pyx_t_11 = __pyx_n_s_NA;
    }
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_rf, __pyx_t_11) < 0)) __PYX_ERR(0, 1995, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "ete4/coretype/tree.pyx":1996
 * 
 *             result["rf"] = float(total_rf) if max_rf else "NA"
 *             result["max_rf"] = float(max_rf)             # <<<<<<<<<<<<<<
 *             if unrooted:
 *                 result["ref_edges_in_source"] = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else "NA"
 */
    __pyx_t_11 = __Pyx_PyNumber_Float(__pyx_v_max_rf); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_max_rf, __pyx_t_11) < 0)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "ete4/coretype/tree.pyx":1997
 *             result["rf"] = float(total_rf) if max_rf else "NA"
 *             result["max_rf"] = float(max_rf)
 *             if unrooted:             # <<<<<<<<<<<<<<
 *                 result["ref_edges_in_source"] = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else "NA"
 *                 result["source_edges_in_ref"] = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else "NA"
 */
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_unrooted); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1997, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "ete4/coretype/tree.pyx":1998
 *             result["max_rf"] = float(max_rf)
 *             if unrooted:
 *                 result["ref_edges_in_source"] = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else "NA"             # <<<<<<<<<<<<<<
 *                 result["source_edges_in_ref"] = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else "NA"
 *             else:
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1998, __pyx_L1_error)
      if (__pyx_t_8) {
        __pyx_t_5 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1998, __pyx_L1_error)
        __pyx_t_13 = PyObject_Length(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1998, __pyx_L1_error)
        if (unlikely(((double)__pyx_t_13) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1998, __pyx_L1_error)
        }
        __pyx_t_12 = PyFloat_FromDouble((__pyx_t_5 / ((double)__pyx_t_13))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_n_s_NA);
        __pyx_t_11 = __pyx_n_s_NA;
      }
      if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_ref_edges_in_source, __pyx_t_11) < 0)) __PYX_ERR(0, 1998, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "ete4/coretype/tree.pyx":1999
 *             if unrooted:
 *                 result["ref_edges_in_source"] = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else "NA"
 *                 result["source_edges_in_ref"] = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else "NA"             # <<<<<<<<<<<<<<
 *             else:
 *                 # in rooted trees, we want to discount the root edge from the
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1999, __pyx_L1_error)
      if (__pyx_t_8) {
        __pyx_t_13 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1999, __pyx_L1_error)
        __pyx_t_5 = PyObject_Length(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1999, __pyx_L1_error)
        if (unlikely(((double)__pyx_t_5) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1999, __pyx_L1_error)
        }
        __pyx_t_12 = PyFloat_FromDouble((__pyx_t_13 / ((double)__pyx_t_5))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1999, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_n_s_NA);
        __pyx_t_11 = __pyx_n_s_NA;
      }
      if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_edges_in_ref, __pyx_t_11) < 0)) __PYX_ERR(0, 1999, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "ete4/coretype/tree.pyx":1997
 *             result["rf"] = float(total_rf) if max_rf else "NA"
 *             result["max_rf"] = float(max_rf)
 *             if unrooted:             # <<<<<<<<<<<<<<
 *                 result["ref_edges_in_source"] = len(common_edges)/float(len(valid_ref_edges)) if valid_ref_edges else "NA"
 *                 result["source_edges_in_ref"] = len(common_edges)/float(len(valid_src_edges)) if valid_src_edges else "NA"
 */
      goto __pyx_L33;
    }

    /* "ete4/coretype/tree.pyx":2004
 *                 # percentage of congruence. Otherwise we will never see a 0%
 *                 # congruence for totally different trees
 *                 result["ref_edges_in_source"] = (len(common_edges)-1)/float(len(valid_ref_edges)-1) if len(valid_ref_edges)>1 else "NA"             # <<<<<<<<<<<<<<
 *                 result["source_edges_in_ref"] = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else "NA"
 * 
 */
    /*else*/ {
      __pyx_t_5 = PyObject_Length(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2004, __pyx_L1_error)
      if (((__pyx_t_5 > 1) != 0)) {
        __pyx_t_13 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2004, __pyx_L1_error)
        __pyx_t_18 = (__pyx_t_13 - 1);
        __pyx_t_13 = PyObject_Length(__pyx_v_valid_ref_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2004, __pyx_L1_error)
        if (unlikely(((double)(__pyx_t_13 - 1)) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 2004, __pyx_L1_error)
        }
        __pyx_t_12 = PyFloat_FromDouble((__pyx_t_18 / ((double)(__pyx_t_13 - 1)))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_n_s_NA);
        __pyx_t_11 = __pyx_n_s_NA;
      }
      if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_ref_edges_in_source, __pyx_t_11) < 0)) __PYX_ERR(0, 2004, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "ete4/coretype/tree.pyx":2005
 *                 # congruence for totally different trees
 *                 result["ref_edges_in_source"] = (len(common_edges)-1)/float(len(valid_ref_edges)-1) if len(valid_ref_edges)>1 else "NA"
 *                 result["source_edges_in_ref"] = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else "NA"             # <<<<<<<<<<<<<<
 * 
 *             result["effective_tree_size"] = ncommon
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2005, __pyx_L1_error)
      if (((__pyx_t_5 > 1) != 0)) {
        __pyx_t_13 = PyObject_Length(__pyx_v_common_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2005, __pyx_L1_error)
        __pyx_t_18 = (__pyx_t_13 - 1);
        __pyx_t_13 = PyObject_Length(__pyx_v_valid_src_edges); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2005, __pyx_L1_error)
        if (unlikely(((double)(__pyx_t_13 - 1)) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 2005, __pyx_L1_error)
        }
        __pyx_t_12 = PyFloat_FromDouble((__pyx_t_18 / ((double)(__pyx_t_13 - 1)))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_n_s_NA);
        __pyx_t_11 = __pyx_n_s_NA;
      }
      if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_edges_in_ref, __pyx_t_11) < 0)) __PYX_ERR(0, 2005, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_L33:;

    /* "ete4/coretype/tree.pyx":2007
 *                 result["source_edges_in_ref"] = (len(common_edges)-1)/float(len(valid_src_edges)-1) if len(valid_src_edges)>1 else "NA"
 * 
 *             result["effective_tree_size"] = ncommon             # <<<<<<<<<<<<<<
 *             result["norm_rf"] = total_rf/float(max_rf) if max_rf else "NA"
 *             result["treeko_dist"] = "NA"
 */
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_effective_tree_size, __pyx_v_ncommon) < 0)) __PYX_ERR(0, 2007, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2008
 * 
 *             result["effective_tree_size"] = ncommon
 *             result["norm_rf"] = total_rf/float(max_rf) if max_rf else "NA"             # <<<<<<<<<<<<<<
 *             result["treeko_dist"] = "NA"
 *             result["source_subtrees"] = 1
 */
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_max_rf); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2008, __pyx_L1_error)
    if (__pyx_t_8) {
      __pyx_t_12 = __Pyx_PyNumber_Float(__pyx_v_max_rf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_total_rf, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_11 = __pyx_t_1;
      __pyx_t_1 = 0;
    } else {
      __Pyx_INCREF(__pyx_n_s_NA);
      __pyx_t_11 = __pyx_n_s_NA;
    }
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_norm_rf, __pyx_t_11) < 0)) __PYX_ERR(0, 2008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "ete4/coretype/tree.pyx":2009
 *             result["effective_tree_size"] = ncommon
 *             result["norm_rf"] = total_rf/float(max_rf) if max_rf else "NA"
 *             result["treeko_dist"] = "NA"             # <<<<<<<<<<<<<<
 *             result["source_subtrees"] = 1
 *             result["common_edges"] = common_edges
 */
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_treeko_dist, __pyx_n_s_NA) < 0)) __PYX_ERR(0, 2009, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2010
 *             result["norm_rf"] = total_rf/float(max_rf) if max_rf else "NA"
 *             result["treeko_dist"] = "NA"
 *             result["source_subtrees"] = 1             # <<<<<<<<<<<<<<
 *             result["common_edges"] = common_edges
 *             result["source_edges"] = valid_src_edges
 */
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_subtrees, __pyx_int_1) < 0)) __PYX_ERR(0, 2010, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2011
 *             result["treeko_dist"] = "NA"
 *             result["source_subtrees"] = 1
 *             result["common_edges"] = common_edges             # <<<<<<<<<<<<<<
 *             result["source_edges"] = valid_src_edges
 *             result["ref_edges"] = valid_ref_edges
 */
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_common_edges, __pyx_v_common_edges) < 0)) __PYX_ERR(0, 2011, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2012
 *             result["source_subtrees"] = 1
 *             result["common_edges"] = common_edges
 *             result["source_edges"] = valid_src_edges             # <<<<<<<<<<<<<<
 *             result["ref_edges"] = valid_ref_edges
 *         return result
 */
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_source_edges, __pyx_v_valid_src_edges) < 0)) __PYX_ERR(0, 2012, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2013
 *             result["common_edges"] = common_edges
 *             result["source_edges"] = valid_src_edges
 *             result["ref_edges"] = valid_ref_edges             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_s_ref_edges, __pyx_v_valid_ref_edges) < 0)) __PYX_ERR(0, 2013, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "ete4/coretype/tree.pyx":2014
 *             result["source_edges"] = valid_src_edges
 *             result["ref_edges"] = valid_ref_edges
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def _diff(self, t2, output='topology', attr_t1='name', attr_t2='name', color=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":1858
 * 
 * 
 *     def compare(self, ref_tree, use_collateral=False, min_support_source=0.0, min_support_ref=0.0,             # <<<<<<<<<<<<<<
 *                 has_duplications=False, expand_polytomies=False, unrooted=False,
 *                 max_treeko_splits_to_be_artifact=1000, ref_tree_attr='name', source_tree_attr='name'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_source_tree);
  __Pyx_XDECREF(__pyx_v__safe_div);
  __Pyx_XDECREF(__pyx_v__compare);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_ntrees);
  __Pyx_XDECREF(__pyx_v_ndups);
  __Pyx_XDECREF(__pyx_v_sp_trees);
  __Pyx_XDECREF(__pyx_v_all_rf);
  __Pyx_XDECREF(__pyx_v_ref_found);
  __Pyx_XDECREF(__pyx_v_src_found);
  __Pyx_XDECREF(__pyx_v_tree_sizes);
  __Pyx_XDECREF(__pyx_v_all_max_rf);
  __Pyx_XDECREF(__pyx_v_subtree_nw);
  __Pyx_XDECREF(__pyx_v_subtree);
  __Pyx_XDECREF(__pyx_v_subtree_content);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_total_rf);
  __Pyx_XDECREF(__pyx_v_max_rf);
  __Pyx_XDECREF(__pyx_v_ncommon);
  __Pyx_XDECREF(__pyx_v_valid_ref_edges);
  __Pyx_XDECREF(__pyx_v_valid_src_edges);
  __Pyx_XDECREF(__pyx_v_common_edges);
  __Pyx_XDECREF(__pyx_v_ref_found_in_src);
  __Pyx_XDECREF(__pyx_v_src_found_in_ref);
  __Pyx_XDECREF(__pyx_v_alld);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_treeko_d);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2016
 *         return result
 * 
 *     def _diff(self, t2, output='topology', attr_t1='name', attr_t2='name', color=True):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.3
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_196_diff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_195_diff[] = "\n        .. versionadded:: 2.3\n\n        Show or return the difference between two tree topologies.\n\n        :param [raw|table|topology|diffs|diffs_tab] output: Output type\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_196_diff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t2 = 0;
  PyObject *__pyx_v_output = 0;
  PyObject *__pyx_v_attr_t1 = 0;
  PyObject *__pyx_v_attr_t2 = 0;
  PyObject *__pyx_v_color = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_diff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t2,&__pyx_n_s_output,&__pyx_n_s_attr_t1,&__pyx_n_s_attr_t2,&__pyx_n_s_color,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_s_topology);
    values[2] = ((PyObject *)__pyx_n_s_name);
    values[3] = ((PyObject *)__pyx_n_s_name);
    values[4] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr_t1);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr_t2);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_color);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_diff") < 0)) __PYX_ERR(0, 2016, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t2 = values[0];
    __pyx_v_output = values[1];
    __pyx_v_attr_t1 = values[2];
    __pyx_v_attr_t2 = values[3];
    __pyx_v_color = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_diff", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2016, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_195_diff(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_t2, __pyx_v_output, __pyx_v_attr_t1, __pyx_v_attr_t2, __pyx_v_color);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_195_diff(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_t2, PyObject *__pyx_v_output, PyObject *__pyx_v_attr_t1, PyObject *__pyx_v_attr_t2, PyObject *__pyx_v_color) {
  PyObject *__pyx_v_ete_diff = NULL;
  PyObject *__pyx_v_difftable = NULL;
  PyObject *__pyx_v_rf = NULL;
  PyObject *__pyx_v_rf_max = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_diff", 0);

  /* "ete4/coretype/tree.pyx":2025
 * 
 *         """
 *         from ..tools import ete_diff             # <<<<<<<<<<<<<<
 *         difftable = ete_diff.treediff(self, t2, attr1=attr_t1, attr2=attr_t2)
 *         if output == "topology":
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ete_diff);
  __Pyx_GIVEREF(__pyx_n_s_ete_diff);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ete_diff);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_tools, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ete_diff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ete_diff = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2026
 *         """
 *         from ..tools import ete_diff
 *         difftable = ete_diff.treediff(self, t2, attr1=attr_t1, attr2=attr_t2)             # <<<<<<<<<<<<<<
 *         if output == "topology":
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_diff, __pyx_n_s_treediff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_t2);
  __Pyx_GIVEREF(__pyx_v_t2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_t2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_attr1, __pyx_v_attr_t1) < 0) __PYX_ERR(0, 2026, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_attr2, __pyx_v_attr_t2) < 0) __PYX_ERR(0, 2026, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_difftable = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":2027
 *         from ..tools import ete_diff
 *         difftable = ete_diff.treediff(self, t2, attr1=attr_t1, attr2=attr_t2)
 *         if output == "topology":             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)
 *         elif output == "diffs":
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_topology, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2027, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":2028
 *         difftable = ete_diff.treediff(self, t2, attr1=attr_t1, attr2=attr_t2)
 *         if output == "topology":
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)             # <<<<<<<<<<<<<<
 *         elif output == "diffs":
 *             ete_diff.show_difftable(difftable)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_diff, __pyx_n_s_show_difftable_topo); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_difftable);
    __Pyx_GIVEREF(__pyx_v_difftable);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_difftable);
    __Pyx_INCREF(__pyx_v_attr_t1);
    __Pyx_GIVEREF(__pyx_v_attr_t1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_attr_t1);
    __Pyx_INCREF(__pyx_v_attr_t2);
    __Pyx_GIVEREF(__pyx_v_attr_t2);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_attr_t2);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_usecolor, __pyx_v_color) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2027
 *         from ..tools import ete_diff
 *         difftable = ete_diff.treediff(self, t2, attr1=attr_t1, attr2=attr_t2)
 *         if output == "topology":             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)
 *         elif output == "diffs":
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":2029
 *         if output == "topology":
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)
 *         elif output == "diffs":             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable(difftable)
 *         elif output == "diffs_tab":
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_diffs, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2029, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":2030
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)
 *         elif output == "diffs":
 *             ete_diff.show_difftable(difftable)             # <<<<<<<<<<<<<<
 *         elif output == "diffs_tab":
 *             ete_diff.show_difftable_tab(difftable)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_diff, __pyx_n_s_show_difftable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_difftable) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_difftable);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2029
 *         if output == "topology":
 *             ete_diff.show_difftable_topo(difftable, attr_t1, attr_t2, usecolor=color)
 *         elif output == "diffs":             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable(difftable)
 *         elif output == "diffs_tab":
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":2031
 *         elif output == "diffs":
 *             ete_diff.show_difftable(difftable)
 *         elif output == "diffs_tab":             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable_tab(difftable)
 *         elif output == 'table':
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_diffs_tab, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2031, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":2032
 *             ete_diff.show_difftable(difftable)
 *         elif output == "diffs_tab":
 *             ete_diff.show_difftable_tab(difftable)             # <<<<<<<<<<<<<<
 *         elif output == 'table':
 *             rf, rf_max, _, _, _, _, _ = self.robinson_foulds(t2, attr_t1=attr_t1, attr_t2=attr_t2)[:2]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_diff, __pyx_n_s_show_difftable_tab); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_difftable) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_difftable);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2031
 *         elif output == "diffs":
 *             ete_diff.show_difftable(difftable)
 *         elif output == "diffs_tab":             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable_tab(difftable)
 *         elif output == 'table':
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":2033
 *         elif output == "diffs_tab":
 *             ete_diff.show_difftable_tab(difftable)
 *         elif output == 'table':             # <<<<<<<<<<<<<<
 *             rf, rf_max, _, _, _, _, _ = self.robinson_foulds(t2, attr_t1=attr_t1, attr_t2=attr_t2)[:2]
 *             ete_diff.show_difftable_summary(difftable, rf, rf_max)
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_output, __pyx_n_s_table, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2033, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":2034
 *             ete_diff.show_difftable_tab(difftable)
 *         elif output == 'table':
 *             rf, rf_max, _, _, _, _, _ = self.robinson_foulds(t2, attr_t1=attr_t1, attr_t2=attr_t2)[:2]             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable_summary(difftable, rf, rf_max)
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_robinson_foulds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_t2);
    __Pyx_GIVEREF(__pyx_v_t2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_t2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_attr_t1, __pyx_v_attr_t1) < 0) __PYX_ERR(0, 2034, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_attr_t2, __pyx_v_attr_t2) < 0) __PYX_ERR(0, 2034, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 2, NULL, NULL, &__pyx_slice__28, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 7)) {
        if (size > 7) __Pyx_RaiseTooManyValuesError(7);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2034, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 6); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[7] = {&__pyx_t_4,&__pyx_t_1,&__pyx_t_2,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 7; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2034, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[7] = {&__pyx_t_4,&__pyx_t_1,&__pyx_t_2,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      for (index=0; index < 7; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 7) < 0) __PYX_ERR(0, 2034, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2034, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_rf = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_rf_max = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v__ = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "ete4/coretype/tree.pyx":2035
 *         elif output == 'table':
 *             rf, rf_max, _, _, _, _, _ = self.robinson_foulds(t2, attr_t1=attr_t1, attr_t2=attr_t2)[:2]
 *             ete_diff.show_difftable_summary(difftable, rf, rf_max)             # <<<<<<<<<<<<<<
 *         else:
 *             return difftable
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_diff, __pyx_n_s_show_difftable_summary); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_difftable, __pyx_v_rf, __pyx_v_rf_max};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_difftable, __pyx_v_rf, __pyx_v_rf_max};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_difftable);
      __Pyx_GIVEREF(__pyx_v_difftable);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_12, __pyx_v_difftable);
      __Pyx_INCREF(__pyx_v_rf);
      __Pyx_GIVEREF(__pyx_v_rf);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_12, __pyx_v_rf);
      __Pyx_INCREF(__pyx_v_rf_max);
      __Pyx_GIVEREF(__pyx_v_rf_max);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_12, __pyx_v_rf_max);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":2033
 *         elif output == "diffs_tab":
 *             ete_diff.show_difftable_tab(difftable)
 *         elif output == 'table':             # <<<<<<<<<<<<<<
 *             rf, rf_max, _, _, _, _, _ = self.robinson_foulds(t2, attr_t1=attr_t1, attr_t2=attr_t2)[:2]
 *             ete_diff.show_difftable_summary(difftable, rf, rf_max)
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":2037
 *             ete_diff.show_difftable_summary(difftable, rf, rf_max)
 *         else:
 *             return difftable             # <<<<<<<<<<<<<<
 * 
 *     def iter_edges(self, cached_content = None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_difftable);
    __pyx_r = __pyx_v_difftable;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":2016
 *         return result
 * 
 *     def _diff(self, t2, output='topology', attr_t1='name', attr_t2='name', color=True):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.3
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._diff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ete_diff);
  __Pyx_XDECREF(__pyx_v_difftable);
  __Pyx_XDECREF(__pyx_v_rf);
  __Pyx_XDECREF(__pyx_v_rf_max);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_199generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":2039
 *             return difftable
 * 
 *     def iter_edges(self, cached_content = None):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_198iter_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_197iter_edges[] = "\n        .. versionadded:: 2.3\n\n        Iterate over the list of edges of a tree. Each edge is represented as a\n        tuple of two elements, each containing the list of nodes separated by\n        the edge.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_198iter_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cached_content = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_edges (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cached_content,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cached_content);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "iter_edges") < 0)) __PYX_ERR(0, 2039, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cached_content = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iter_edges", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2039, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_197iter_edges(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_cached_content);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_197iter_edges(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_cached_content) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iter_edges", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2039, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_cached_content = __pyx_v_cached_content;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_cached_content);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_cached_content);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_199generator9, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_edges, __pyx_n_s_TreeNode_iter_edges, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.iter_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_199generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_edges", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2039, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2048
 *         '''
 * 
 *         if not cached_content:             # <<<<<<<<<<<<<<
 *             cached_content = self.get_cached_content()
 *         all_leaves = cached_content[self]
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_cached_content); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2049
 * 
 *         if not cached_content:
 *             cached_content = self.get_cached_content()             # <<<<<<<<<<<<<<
 *         all_leaves = cached_content[self]
 *         for n, side1 in six.iteritems(cached_content):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_cached_content);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_cached_content, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":2048
 *         '''
 * 
 *         if not cached_content:             # <<<<<<<<<<<<<<
 *             cached_content = self.get_cached_content()
 *         all_leaves = cached_content[self]
 */
  }

  /* "ete4/coretype/tree.pyx":2050
 *         if not cached_content:
 *             cached_content = self.get_cached_content()
 *         all_leaves = cached_content[self]             # <<<<<<<<<<<<<<
 *         for n, side1 in six.iteritems(cached_content):
 *             yield (side1, all_leaves-side1)
 */
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_cached_content, ((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_all_leaves = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2051
 *             cached_content = self.get_cached_content()
 *         all_leaves = cached_content[self]
 *         for n, side1 in six.iteritems(cached_content):             # <<<<<<<<<<<<<<
 *             yield (side1, all_leaves-side1)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_six); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_cur_scope->__pyx_v_cached_content) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_cached_content);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2051, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2051, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2051, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2051, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2051, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 2051, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2051, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_n, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_side1);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_side1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":2052
 *         all_leaves = cached_content[self]
 *         for n, side1 in six.iteritems(cached_content):
 *             yield (side1, all_leaves-side1)             # <<<<<<<<<<<<<<
 * 
 *     def get_edges(self, cached_content = None):
 */
    __pyx_t_3 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_all_leaves, __pyx_cur_scope->__pyx_v_side1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_side1);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_side1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_cur_scope->__pyx_v_side1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    __Pyx_XGIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L9_resume_from_yield:;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2052, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2051
 *             cached_content = self.get_cached_content()
 *         all_leaves = cached_content[self]
 *         for n, side1 in six.iteritems(cached_content):             # <<<<<<<<<<<<<<
 *             yield (side1, all_leaves-side1)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":2039
 *             return difftable
 * 
 *     def iter_edges(self, cached_content = None):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("iter_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2054
 *             yield (side1, all_leaves-side1)
 * 
 *     def get_edges(self, cached_content = None):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_201get_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_200get_edges[] = "\n        .. versionadded:: 2.3\n\n        Returns the list of edges of a tree. Each edge is represented as a\n        tuple of two elements, each containing the list of nodes separated by\n        the edge.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_201get_edges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cached_content = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_edges (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cached_content,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cached_content);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_edges") < 0)) __PYX_ERR(0, 2054, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cached_content = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_edges", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2054, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_200get_edges(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_cached_content);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_200get_edges(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_cached_content) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_edges", 0);

  /* "ete4/coretype/tree.pyx":2063
 *         '''
 * 
 *         return [edge for edge in self.iter_edges(cached_content)]             # <<<<<<<<<<<<<<
 * 
 *     def standardize(self, delete_orphan=True, preserve_branch_length=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_cached_content) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_cached_content);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2063, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2063, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2063, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2063, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_edge))) __PYX_ERR(0, 2063, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2054
 *             yield (side1, all_leaves-side1)
 * 
 *     def get_edges(self, cached_content = None):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2065
 *         return [edge for edge in self.iter_edges(cached_content)]
 * 
 *     def standardize(self, delete_orphan=True, preserve_branch_length=True):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.3
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_203standardize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_202standardize[] = "\n        .. versionadded:: 2.3\n\n        process current tree structure to produce a standardized topology: nodes\n        with only one child are removed and multifurcations are automatically resolved.\n\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_203standardize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_delete_orphan = 0;
  PyObject *__pyx_v_preserve_branch_length = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("standardize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delete_orphan,&__pyx_n_s_preserve_branch_length,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_True);
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delete_orphan);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_preserve_branch_length);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "standardize") < 0)) __PYX_ERR(0, 2065, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_delete_orphan = values[0];
    __pyx_v_preserve_branch_length = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("standardize", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2065, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.standardize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_202standardize(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_delete_orphan, __pyx_v_preserve_branch_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_202standardize(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_delete_orphan, PyObject *__pyx_v_preserve_branch_length) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("standardize", 0);

  /* "ete4/coretype/tree.pyx":2074
 * 
 *         """
 *         self.resolve_polytomy()             # <<<<<<<<<<<<<<
 * 
 *         for n in self.get_descendants():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_polytomy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2076
 *         self.resolve_polytomy()
 * 
 *         for n in self.get_descendants():             # <<<<<<<<<<<<<<
 *             if len(n.children) == 1:
 *                 n.delete(prevent_nondicotomic=True,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_descendants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2076, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2076, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2076, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2076, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2076, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2077
 * 
 *         for n in self.get_descendants():
 *             if len(n.children) == 1:             # <<<<<<<<<<<<<<
 *                 n.delete(prevent_nondicotomic=True,
 *                          preserve_branch_length=preserve_branch_length)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = ((__pyx_t_6 == 1) != 0);
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":2078
 *         for n in self.get_descendants():
 *             if len(n.children) == 1:
 *                 n.delete(prevent_nondicotomic=True,             # <<<<<<<<<<<<<<
 *                          preserve_branch_length=preserve_branch_length)
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_delete); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prevent_nondicotomic, Py_True) < 0) __PYX_ERR(0, 2078, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2079
 *             if len(n.children) == 1:
 *                 n.delete(prevent_nondicotomic=True,
 *                          preserve_branch_length=preserve_branch_length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_preserve_branch_length, __pyx_v_preserve_branch_length) < 0) __PYX_ERR(0, 2078, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2078
 *         for n in self.get_descendants():
 *             if len(n.children) == 1:
 *                 n.delete(prevent_nondicotomic=True,             # <<<<<<<<<<<<<<
 *                          preserve_branch_length=preserve_branch_length)
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":2077
 * 
 *         for n in self.get_descendants():
 *             if len(n.children) == 1:             # <<<<<<<<<<<<<<
 *                 n.delete(prevent_nondicotomic=True,
 *                          preserve_branch_length=preserve_branch_length)
 */
    }

    /* "ete4/coretype/tree.pyx":2076
 *         self.resolve_polytomy()
 * 
 *         for n in self.get_descendants():             # <<<<<<<<<<<<<<
 *             if len(n.children) == 1:
 *                 n.delete(prevent_nondicotomic=True,
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2065
 *         return [edge for edge in self.iter_edges(cached_content)]
 * 
 *     def standardize(self, delete_orphan=True, preserve_branch_length=True):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.3
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.standardize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2082
 * 
 * 
 *     def get_topology_id(self, attr="name"):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_205get_topology_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_204get_topology_id[] = "\n        .. versionadded:: 2.3\n\n        Returns the unique ID representing the topology of the current tree. Two\n        trees with the same topology will produce the same id. If trees are\n        unrooted, make sure that the root node is not binary or use the\n        tree.unroot() function before generating the topology id.\n\n        This is useful to detect the number of unique topologies over a bunch of\n        trees, without requiring full distance methods.\n\n        The id is, by default, calculated based on the terminal node's names. Any\n        other node attribute could be used instead.\n\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_205get_topology_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attr = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_topology_id (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_name);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_topology_id") < 0)) __PYX_ERR(0, 2082, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_topology_id", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2082, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_topology_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_204get_topology_id(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_attr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_204get_topology_id(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_v_edge_keys = NULL;
  PyObject *__pyx_v_s1 = NULL;
  PyObject *__pyx_v_s2 = NULL;
  PyObject *__pyx_v_k1 = NULL;
  PyObject *__pyx_v_k2 = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_topology_id", 0);

  /* "ete4/coretype/tree.pyx":2099
 * 
 *         '''
 *         edge_keys = []             # <<<<<<<<<<<<<<
 *         for s1, s2 in self.get_edges():
 *             k1 = sorted([getattr(e, attr) for e in s1])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edge_keys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2100
 *         '''
 *         edge_keys = []
 *         for s1, s2 in self.get_edges():             # <<<<<<<<<<<<<<
 *             k1 = sorted([getattr(e, attr) for e in s1])
 *             k2 = sorted([getattr(e, attr) for e in s2])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_edges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2100, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2100, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2100, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2100, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2100, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 2100, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2100, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_s1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_s2, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":2101
 *         edge_keys = []
 *         for s1, s2 in self.get_edges():
 *             k1 = sorted([getattr(e, attr) for e in s1])             # <<<<<<<<<<<<<<
 *             k2 = sorted([getattr(e, attr) for e in s2])
 *             edge_keys.append(sorted([k1, k2]))
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (likely(PyList_CheckExact(__pyx_v_s1)) || PyTuple_CheckExact(__pyx_v_s1)) {
      __pyx_t_3 = __pyx_v_s1; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_s1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2101, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2101, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2101, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2101, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2101, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2101, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetAttr(__pyx_v_e, __pyx_v_attr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 2101, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_11 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2101, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_k1, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2102
 *         for s1, s2 in self.get_edges():
 *             k1 = sorted([getattr(e, attr) for e in s1])
 *             k2 = sorted([getattr(e, attr) for e in s2])             # <<<<<<<<<<<<<<
 *             edge_keys.append(sorted([k1, k2]))
 *         return md5(str(sorted(edge_keys)).encode('utf-8')).hexdigest()
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (likely(PyList_CheckExact(__pyx_v_s2)) || PyTuple_CheckExact(__pyx_v_s2)) {
      __pyx_t_3 = __pyx_v_s2; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_s2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2102, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2102, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2102, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2102, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetAttr(__pyx_v_e, __pyx_v_attr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 2102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_11 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2102, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_k2, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2103
 *             k1 = sorted([getattr(e, attr) for e in s1])
 *             k2 = sorted([getattr(e, attr) for e in s2])
 *             edge_keys.append(sorted([k1, k2]))             # <<<<<<<<<<<<<<
 *         return md5(str(sorted(edge_keys)).encode('utf-8')).hexdigest()
 * 
 */
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_k1);
    __Pyx_GIVEREF(__pyx_v_k1);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_k1);
    __Pyx_INCREF(__pyx_v_k2);
    __Pyx_GIVEREF(__pyx_v_k2);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_v_k2);
    __pyx_t_1 = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_11 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2103, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_edge_keys, __pyx_t_1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2100
 *         '''
 *         edge_keys = []
 *         for s1, s2 in self.get_edges():             # <<<<<<<<<<<<<<
 *             k1 = sorted([getattr(e, attr) for e in s1])
 *             k2 = sorted([getattr(e, attr) for e in s2])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2104
 *             k2 = sorted([getattr(e, attr) for e in s2])
 *             edge_keys.append(sorted([k1, k2]))
 *         return md5(str(sorted(edge_keys)).encode('utf-8')).hexdigest()             # <<<<<<<<<<<<<<
 * 
 *     # def get_partitions(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_md5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = PySequence_List(__pyx_v_edge_keys); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = ((PyObject*)__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_t_11 = PyList_Sort(__pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2104, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_12, __pyx_kp_s_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_s_utf_8);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_hexdigest); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2082
 * 
 * 
 *     def get_topology_id(self, attr="name"):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_topology_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge_keys);
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_s2);
  __Pyx_XDECREF(__pyx_v_k1);
  __Pyx_XDECREF(__pyx_v_k2);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2135
 *     #     return all_partitions
 * 
 *     def convert_to_ultrametric(self, tree_length=None, strategy='balanced'):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_207convert_to_ultrametric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_206convert_to_ultrametric[] = "\n        .. versionadded: 2.1\n\n        Converts a tree into ultrametric topology (all leaves must have\n        the same distance to root).\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_207convert_to_ultrametric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree_length = 0;
  PyObject *__pyx_v_strategy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_to_ultrametric (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree_length,&__pyx_n_s_strategy,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_n_s_balanced);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_length);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convert_to_ultrametric") < 0)) __PYX_ERR(0, 2135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tree_length = values[0];
    __pyx_v_strategy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_to_ultrametric", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.convert_to_ultrametric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_206convert_to_ultrametric(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_tree_length, __pyx_v_strategy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_206convert_to_ultrametric(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_tree_length, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_v_node2max_depth = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_max_depth = NULL;
  PyObject *__pyx_v_node2dist = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_most_distant_leaf = NULL;
  PyObject *__pyx_v_step = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_to_ultrametric", 0);
  __Pyx_INCREF(__pyx_v_tree_length);

  /* "ete4/coretype/tree.pyx":2144
 * 
 *                 # pre-calculate how many splits remain under each node
 *         node2max_depth = {}             # <<<<<<<<<<<<<<
 *         for node in self.traverse("postorder"):
 *             if not node.is_leaf():
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node2max_depth = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2145
 *                 # pre-calculate how many splits remain under each node
 *         node2max_depth = {}
 *         for node in self.traverse("postorder"):             # <<<<<<<<<<<<<<
 *             if not node.is_leaf():
 *                 max_depth = max([node2max_depth[c] for c in node.children]) + 1
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_postorder) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_postorder);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2145, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2145, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2145, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2145, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2146
 *         node2max_depth = {}
 *         for node in self.traverse("postorder"):
 *             if not node.is_leaf():             # <<<<<<<<<<<<<<
 *                 max_depth = max([node2max_depth[c] for c in node.children]) + 1
 *                 node2max_depth[node] = max_depth
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = ((!__pyx_t_7) != 0);
    if (__pyx_t_8) {

      /* "ete4/coretype/tree.pyx":2147
 *         for node in self.traverse("postorder"):
 *             if not node.is_leaf():
 *                 max_depth = max([node2max_depth[c] for c in node.children]) + 1             # <<<<<<<<<<<<<<
 *                 node2max_depth[node] = max_depth
 *             else:
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2147, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2147, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 2147, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_10(__pyx_t_6);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2147, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_node2max_depth, __pyx_v_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2147, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_max_depth, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":2148
 *             if not node.is_leaf():
 *                 max_depth = max([node2max_depth[c] for c in node.children]) + 1
 *                 node2max_depth[node] = max_depth             # <<<<<<<<<<<<<<
 *             else:
 *                 node2max_depth[node] = 1
 */
      if (unlikely(PyDict_SetItem(__pyx_v_node2max_depth, __pyx_v_node, __pyx_v_max_depth) < 0)) __PYX_ERR(0, 2148, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2146
 *         node2max_depth = {}
 *         for node in self.traverse("postorder"):
 *             if not node.is_leaf():             # <<<<<<<<<<<<<<
 *                 max_depth = max([node2max_depth[c] for c in node.children]) + 1
 *                 node2max_depth[node] = max_depth
 */
      goto __pyx_L5;
    }

    /* "ete4/coretype/tree.pyx":2150
 *                 node2max_depth[node] = max_depth
 *             else:
 *                 node2max_depth[node] = 1             # <<<<<<<<<<<<<<
 *         node2dist = {self: 0.0}
 *         if not tree_length:
 */
    /*else*/ {
      if (unlikely(PyDict_SetItem(__pyx_v_node2max_depth, __pyx_v_node, __pyx_int_1) < 0)) __PYX_ERR(0, 2150, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "ete4/coretype/tree.pyx":2145
 *                 # pre-calculate how many splits remain under each node
 *         node2max_depth = {}
 *         for node in self.traverse("postorder"):             # <<<<<<<<<<<<<<
 *             if not node.is_leaf():
 *                 max_depth = max([node2max_depth[c] for c in node.children]) + 1
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2151
 *             else:
 *                 node2max_depth[node] = 1
 *         node2dist = {self: 0.0}             # <<<<<<<<<<<<<<
 *         if not tree_length:
 *             most_distant_leaf, tree_length = self.get_farthest_leaf()
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_float_0_0) < 0) __PYX_ERR(0, 2151, __pyx_L1_error)
  __pyx_v_node2dist = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2152
 *                 node2max_depth[node] = 1
 *         node2dist = {self: 0.0}
 *         if not tree_length:             # <<<<<<<<<<<<<<
 *             most_distant_leaf, tree_length = self.get_farthest_leaf()
 *         else:
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_tree_length); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __pyx_t_7 = ((!__pyx_t_8) != 0);
  if (__pyx_t_7) {

    /* "ete4/coretype/tree.pyx":2153
 *         node2dist = {self: 0.0}
 *         if not tree_length:
 *             most_distant_leaf, tree_length = self.get_farthest_leaf()             # <<<<<<<<<<<<<<
 *         else:
 *             tree_length = float(tree_length)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_farthest_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2153, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_11(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_6 = __pyx_t_11(__pyx_t_3); if (unlikely(!__pyx_t_6)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_3), 2) < 0) __PYX_ERR(0, 2153, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2153, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __pyx_v_most_distant_leaf = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_tree_length, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":2152
 *                 node2max_depth[node] = 1
 *         node2dist = {self: 0.0}
 *         if not tree_length:             # <<<<<<<<<<<<<<
 *             most_distant_leaf, tree_length = self.get_farthest_leaf()
 *         else:
 */
    goto __pyx_L8;
  }

  /* "ete4/coretype/tree.pyx":2155
 *             most_distant_leaf, tree_length = self.get_farthest_leaf()
 *         else:
 *             tree_length = float(tree_length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_v_tree_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_tree_length, __pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L8:;

  /* "ete4/coretype/tree.pyx":2158
 * 
 * 
 *         step = tree_length / node2max_depth[self]             # <<<<<<<<<<<<<<
 *         for node in self.iter_descendants("levelorder"):
 *             if strategy == "balanced":
 */
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_node2max_depth, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_tree_length, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_step = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "ete4/coretype/tree.pyx":2159
 * 
 *         step = tree_length / node2max_depth[self]
 *         for node in self.iter_descendants("levelorder"):             # <<<<<<<<<<<<<<
 *             if strategy == "balanced":
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_descendants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_s_levelorder) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_levelorder);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_2 = __pyx_t_6; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2159, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2159, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2159, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2159, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":2160
 *         step = tree_length / node2max_depth[self]
 *         for node in self.iter_descendants("levelorder"):
 *             if strategy == "balanced":             # <<<<<<<<<<<<<<
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 */
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_strategy, __pyx_n_s_balanced, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2160, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":2161
 *         for node in self.iter_descendants("levelorder"):
 *             if strategy == "balanced":
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]             # <<<<<<<<<<<<<<
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 *             elif strategy == "fixed":
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_node2dist, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Subtract(__pyx_v_tree_length, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_node2max_depth, __pyx_v_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_dist, __pyx_t_3) < 0) __PYX_ERR(0, 2161, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "ete4/coretype/tree.pyx":2162
 *             if strategy == "balanced":
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 *                 node2dist[node] =  node.dist + node2dist[node.up]             # <<<<<<<<<<<<<<
 *             elif strategy == "fixed":
 *                 if not node.is_leaf():
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_node2dist, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(PyDict_SetItem(__pyx_v_node2dist, __pyx_v_node, __pyx_t_1) < 0)) __PYX_ERR(0, 2162, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":2160
 *         step = tree_length / node2max_depth[self]
 *         for node in self.iter_descendants("levelorder"):
 *             if strategy == "balanced":             # <<<<<<<<<<<<<<
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 */
      goto __pyx_L13;
    }

    /* "ete4/coretype/tree.pyx":2163
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 *             elif strategy == "fixed":             # <<<<<<<<<<<<<<
 *                 if not node.is_leaf():
 *                     node.dist = step
 */
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_strategy, __pyx_n_s_fixed, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2163, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":2164
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 *             elif strategy == "fixed":
 *                 if not node.is_leaf():             # <<<<<<<<<<<<<<
 *                     node.dist = step
 *                 else:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2164, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = ((!__pyx_t_7) != 0);
      if (__pyx_t_8) {

        /* "ete4/coretype/tree.pyx":2165
 *             elif strategy == "fixed":
 *                 if not node.is_leaf():
 *                     node.dist = step             # <<<<<<<<<<<<<<
 *                 else:
 *                     node.dist = tree_length - ((node2dist[node.up]) * step)
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_dist, __pyx_v_step) < 0) __PYX_ERR(0, 2165, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":2164
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 *             elif strategy == "fixed":
 *                 if not node.is_leaf():             # <<<<<<<<<<<<<<
 *                     node.dist = step
 *                 else:
 */
        goto __pyx_L14;
      }

      /* "ete4/coretype/tree.pyx":2167
 *                     node.dist = step
 *                 else:
 *                     node.dist = tree_length - ((node2dist[node.up]) * step)             # <<<<<<<<<<<<<<
 *                 node2dist[node] = node2dist[node.up] + 1
 *             node.dist = node.dist
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_node2dist, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_v_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Subtract(__pyx_v_tree_length, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_dist, __pyx_t_6) < 0) __PYX_ERR(0, 2167, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_L14:;

      /* "ete4/coretype/tree.pyx":2168
 *                 else:
 *                     node.dist = tree_length - ((node2dist[node.up]) * step)
 *                 node2dist[node] = node2dist[node.up] + 1             # <<<<<<<<<<<<<<
 *             node.dist = node.dist
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_up); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_node2dist, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(PyDict_SetItem(__pyx_v_node2dist, __pyx_v_node, __pyx_t_6) < 0)) __PYX_ERR(0, 2168, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "ete4/coretype/tree.pyx":2163
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 *                 node2dist[node] =  node.dist + node2dist[node.up]
 *             elif strategy == "fixed":             # <<<<<<<<<<<<<<
 *                 if not node.is_leaf():
 *                     node.dist = step
 */
    }
    __pyx_L13:;

    /* "ete4/coretype/tree.pyx":2169
 *                     node.dist = tree_length - ((node2dist[node.up]) * step)
 *                 node2dist[node] = node2dist[node.up] + 1
 *             node.dist = node.dist             # <<<<<<<<<<<<<<
 * 
 *     def check_monophyly(self, values, target_attr, ignore_missing=False,
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_dist); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_dist, __pyx_t_6) < 0) __PYX_ERR(0, 2169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":2159
 * 
 *         step = tree_length / node2max_depth[self]
 *         for node in self.iter_descendants("levelorder"):             # <<<<<<<<<<<<<<
 *             if strategy == "balanced":
 *                 node.dist = (tree_length - node2dist[node.up]) / node2max_depth[node]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2135
 *     #     return all_partitions
 * 
 *     def convert_to_ultrametric(self, tree_length=None, strategy='balanced'):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.convert_to_ultrametric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node2max_depth);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_max_depth);
  __Pyx_XDECREF(__pyx_v_node2dist);
  __Pyx_XDECREF(__pyx_v_most_distant_leaf);
  __Pyx_XDECREF(__pyx_v_step);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_tree_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2171
 *             node.dist = node.dist
 * 
 *     def check_monophyly(self, values, target_attr, ignore_missing=False,             # <<<<<<<<<<<<<<
 *                         unrooted=False):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_209check_monophyly(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_208check_monophyly[] = "\n        .. versionadded: 2.2\n\n        Returns True if a given target attribute is monophyletic under\n        this node for the provided set of values.\n\n        If not all values are represented in the current tree\n        structure, a ValueError exception will be raised to warn that\n        strict monophyly could never be reached (this behaviour can be\n        avoided by enabling the `ignore_missing` flag.\n\n        :param values: a set of values for which monophyly is\n            expected.\n\n        :param target_attr: node attribute being used to check\n            monophyly (i.e. species for species trees, names for gene\n            family trees, or any custom feature present in the tree).\n\n        :param False ignore_missing: Avoid raising an Exception when\n            missing attributes are found.\n\n\n        .. versionchanged: 2.3\n\n        :param False unrooted: If True, tree will be treated as unrooted, thus\n          allowing to find monophyly even when current outgroup is splitting a\n          monophyletic group.\n\n        :returns: the following tuple\n                  IsMonophyletic (boolean),\n                  clade type ('monophyletic', 'paraphyletic' or 'polyphyletic'),\n                  leaves breaking the monophyly (set)\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_209check_monophyly(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_v_target_attr = 0;
  PyObject *__pyx_v_ignore_missing = 0;
  PyObject *__pyx_v_unrooted = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_monophyly (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_values,&__pyx_n_s_target_attr,&__pyx_n_s_ignore_missing,&__pyx_n_s_unrooted,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_False);

    /* "ete4/coretype/tree.pyx":2172
 * 
 *     def check_monophyly(self, values, target_attr, ignore_missing=False,
 *                         unrooted=False):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_attr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_monophyly", 0, 2, 4, 1); __PYX_ERR(0, 2171, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ignore_missing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unrooted);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_monophyly") < 0)) __PYX_ERR(0, 2171, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_values = values[0];
    __pyx_v_target_attr = values[1];
    __pyx_v_ignore_missing = values[2];
    __pyx_v_unrooted = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_monophyly", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.check_monophyly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_208check_monophyly(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_values, __pyx_v_target_attr, __pyx_v_ignore_missing, __pyx_v_unrooted);

  /* "ete4/coretype/tree.pyx":2171
 *             node.dist = node.dist
 * 
 *     def check_monophyly(self, values, target_attr, ignore_missing=False,             # <<<<<<<<<<<<<<
 *                         unrooted=False):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_208check_monophyly(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_values, PyObject *__pyx_v_target_attr, PyObject *__pyx_v_ignore_missing, PyObject *__pyx_v_unrooted) {
  PyObject *__pyx_v_n2leaves = NULL;
  PyObject *__pyx_v_found_values = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_missing_values = NULL;
  PyObject *__pyx_v_targets = NULL;
  PyObject *__pyx_v_smallest = NULL;
  PyObject *__pyx_v_side1 = NULL;
  PyObject *__pyx_v_side2 = NULL;
  PyObject *__pyx_v_foreign_leaves = NULL;
  PyObject *__pyx_v_common = NULL;
  PyObject *__pyx_v_observed = NULL;
  PyObject *__pyx_v_poly_common = NULL;
  PyObject *__pyx_v_polyphyletic = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_leaf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_monophyly", 0);
  __Pyx_INCREF(__pyx_v_values);

  /* "ete4/coretype/tree.pyx":2208
 *         """
 * 
 *         if type(values) != set:             # <<<<<<<<<<<<<<
 *             values = set(values)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_values)), ((PyObject *)(&PySet_Type)), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2208, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2209
 * 
 *         if type(values) != set:
 *             values = set(values)             # <<<<<<<<<<<<<<
 * 
 *         # This is the only time I traverse the tree, then I use cached
 */
    __pyx_t_1 = PySet_New(__pyx_v_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_values, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2208
 *         """
 * 
 *         if type(values) != set:             # <<<<<<<<<<<<<<
 *             values = set(values)
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":2213
 *         # This is the only time I traverse the tree, then I use cached
 *         # leaf content
 *         n2leaves = self.get_cached_content()             # <<<<<<<<<<<<<<
 * 
 *         # Raise an error if requested attribute values are not even present
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n2leaves = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2216
 * 
 *         # Raise an error if requested attribute values are not even present
 *         if ignore_missing:             # <<<<<<<<<<<<<<
 *             found_values = set([getattr(n, target_attr) for n in n2leaves[self]])
 *             missing_values = values - found_values
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_missing); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2216, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2217
 *         # Raise an error if requested attribute values are not even present
 *         if ignore_missing:
 *             found_values = set([getattr(n, target_attr) for n in n2leaves[self]])             # <<<<<<<<<<<<<<
 *             missing_values = values - found_values
 *             values = values & found_values
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_n2leaves, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2217, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2217, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2217, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2217, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2217, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2217, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_target_attr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_found_values = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2218
 *         if ignore_missing:
 *             found_values = set([getattr(n, target_attr) for n in n2leaves[self]])
 *             missing_values = values - found_values             # <<<<<<<<<<<<<<
 *             values = values & found_values
 * 
 */
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_values, __pyx_v_found_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_missing_values = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2219
 *             found_values = set([getattr(n, target_attr) for n in n2leaves[self]])
 *             missing_values = values - found_values
 *             values = values & found_values             # <<<<<<<<<<<<<<
 * 
 *         # Locate leaves matching requested attribute values
 */
    __pyx_t_4 = PyNumber_And(__pyx_v_values, __pyx_v_found_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_values, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2216
 * 
 *         # Raise an error if requested attribute values are not even present
 *         if ignore_missing:             # <<<<<<<<<<<<<<
 *             found_values = set([getattr(n, target_attr) for n in n2leaves[self]])
 *             missing_values = values - found_values
 */
  }

  /* "ete4/coretype/tree.pyx":2222
 * 
 *         # Locate leaves matching requested attribute values
 *         targets = set([leaf for leaf in n2leaves[self]             # <<<<<<<<<<<<<<
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_n2leaves, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2222, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2222, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2222, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2222, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_leaf, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2223
 *         # Locate leaves matching requested attribute values
 *         targets = set([leaf for leaf in n2leaves[self]
 *                    if getattr(leaf, target_attr) in values])             # <<<<<<<<<<<<<<
 *         if not ignore_missing:
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):
 */
    __pyx_t_1 = __Pyx_GetAttr(__pyx_v_leaf, __pyx_v_target_attr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_values, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":2222
 * 
 *         # Locate leaves matching requested attribute values
 *         targets = set([leaf for leaf in n2leaves[self]             # <<<<<<<<<<<<<<
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:
 */
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_leaf))) __PYX_ERR(0, 2222, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2223
 *         # Locate leaves matching requested attribute values
 *         targets = set([leaf for leaf in n2leaves[self]
 *                    if getattr(leaf, target_attr) in values])             # <<<<<<<<<<<<<<
 *         if not ignore_missing:
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):
 */
    }

    /* "ete4/coretype/tree.pyx":2222
 * 
 *         # Locate leaves matching requested attribute values
 *         targets = set([leaf for leaf in n2leaves[self]             # <<<<<<<<<<<<<<
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_targets = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2224
 *         targets = set([leaf for leaf in n2leaves[self]
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:             # <<<<<<<<<<<<<<
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):
 *                 raise ValueError('The monophyly of the provided values could never be reached, as not all of them exist in the tree.'
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_missing); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2224, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_7) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2225
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):             # <<<<<<<<<<<<<<
 *                 raise ValueError('The monophyly of the provided values could never be reached, as not all of them exist in the tree.'
 *                                  ' Please check your target attribute and values, or set the ignore_missing flag to True')
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_set_iterator(__pyx_v_targets, 1, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_set_iter_next(__pyx_t_4, __pyx_t_8, &__pyx_t_5, &__pyx_t_1, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_leaf, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetAttr(__pyx_v_leaf, __pyx_v_target_attr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 2225, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_values, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_2)) {

      /* "ete4/coretype/tree.pyx":2226
 *         if not ignore_missing:
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):
 *                 raise ValueError('The monophyly of the provided values could never be reached, as not all of them exist in the tree.'             # <<<<<<<<<<<<<<
 *                                  ' Please check your target attribute and values, or set the ignore_missing flag to True')
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 2226, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2225
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):             # <<<<<<<<<<<<<<
 *                 raise ValueError('The monophyly of the provided values could never be reached, as not all of them exist in the tree.'
 *                                  ' Please check your target attribute and values, or set the ignore_missing flag to True')
 */
    }

    /* "ete4/coretype/tree.pyx":2224
 *         targets = set([leaf for leaf in n2leaves[self]
 *                    if getattr(leaf, target_attr) in values])
 *         if not ignore_missing:             # <<<<<<<<<<<<<<
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):
 *                 raise ValueError('The monophyly of the provided values could never be reached, as not all of them exist in the tree.'
 */
  }

  /* "ete4/coretype/tree.pyx":2229
 *                                  ' Please check your target attribute and values, or set the ignore_missing flag to True')
 * 
 *         if unrooted:             # <<<<<<<<<<<<<<
 *             smallest = None
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_unrooted); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2229, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2230
 * 
 *         if unrooted:
 *             smallest = None             # <<<<<<<<<<<<<<
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_smallest = Py_None;

    /* "ete4/coretype/tree.pyx":2231
 *         if unrooted:
 *             smallest = None
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):             # <<<<<<<<<<<<<<
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):
 *                     smallest = side1
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_cached_content, __pyx_v_n2leaves) < 0) __PYX_ERR(0, 2231, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2231, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2231, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2231, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2231, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 2231, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2231, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
        index = 0; __pyx_t_3 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_3)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L17_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 2231, __pyx_L1_error)
        __pyx_t_13 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L18_unpacking_done;
        __pyx_L17_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 2231, __pyx_L1_error)
        __pyx_L18_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_side1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_side2, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "ete4/coretype/tree.pyx":2232
 *             smallest = None
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):             # <<<<<<<<<<<<<<
 *                     smallest = side1
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):
 */
      __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_issubset, __pyx_v_targets, __pyx_v_side1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2232, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_7) {
      } else {
        __pyx_t_2 = __pyx_t_7;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_smallest); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2232, __pyx_L1_error)
      __pyx_t_14 = ((!__pyx_t_7) != 0);
      if (!__pyx_t_14) {
      } else {
        __pyx_t_2 = __pyx_t_14;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_5 = PyObject_Length(__pyx_v_side1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2232, __pyx_L1_error)
      __pyx_t_15 = PyObject_Length(__pyx_v_smallest); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2232, __pyx_L1_error)
      __pyx_t_14 = ((__pyx_t_5 < __pyx_t_15) != 0);
      __pyx_t_2 = __pyx_t_14;
      __pyx_L20_bool_binop_done:;
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":2233
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):
 *                     smallest = side1             # <<<<<<<<<<<<<<
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):
 *                         smallest = side2
 */
        __Pyx_INCREF(__pyx_v_side1);
        __Pyx_DECREF_SET(__pyx_v_smallest, __pyx_v_side1);

        /* "ete4/coretype/tree.pyx":2232
 *             smallest = None
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):             # <<<<<<<<<<<<<<
 *                     smallest = side1
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):
 */
        goto __pyx_L19;
      }

      /* "ete4/coretype/tree.pyx":2234
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):
 *                     smallest = side1
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):             # <<<<<<<<<<<<<<
 *                         smallest = side2
 *                 if smallest is not None and len(smallest) == len(targets):
 */
      __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_issubset, __pyx_v_targets, __pyx_v_side2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 2234, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_14) {
      } else {
        __pyx_t_2 = __pyx_t_14;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_smallest); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 2234, __pyx_L1_error)
      __pyx_t_7 = ((!__pyx_t_14) != 0);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_2 = __pyx_t_7;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_15 = PyObject_Length(__pyx_v_side2); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2234, __pyx_L1_error)
      __pyx_t_5 = PyObject_Length(__pyx_v_smallest); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2234, __pyx_L1_error)
      __pyx_t_7 = ((__pyx_t_15 < __pyx_t_5) != 0);
      __pyx_t_2 = __pyx_t_7;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":2235
 *                     smallest = side1
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):
 *                         smallest = side2             # <<<<<<<<<<<<<<
 *                 if smallest is not None and len(smallest) == len(targets):
 *                     break
 */
        __Pyx_INCREF(__pyx_v_side2);
        __Pyx_DECREF_SET(__pyx_v_smallest, __pyx_v_side2);

        /* "ete4/coretype/tree.pyx":2234
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):
 *                     smallest = side1
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):             # <<<<<<<<<<<<<<
 *                         smallest = side2
 *                 if smallest is not None and len(smallest) == len(targets):
 */
      }
      __pyx_L19:;

      /* "ete4/coretype/tree.pyx":2236
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):
 *                         smallest = side2
 *                 if smallest is not None and len(smallest) == len(targets):             # <<<<<<<<<<<<<<
 *                     break
 *             foreign_leaves = smallest - targets
 */
      __pyx_t_7 = (__pyx_v_smallest != Py_None);
      __pyx_t_14 = (__pyx_t_7 != 0);
      if (__pyx_t_14) {
      } else {
        __pyx_t_2 = __pyx_t_14;
        goto __pyx_L27_bool_binop_done;
      }
      __pyx_t_5 = PyObject_Length(__pyx_v_smallest); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2236, __pyx_L1_error)
      __pyx_t_15 = PySet_GET_SIZE(__pyx_v_targets); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2236, __pyx_L1_error)
      __pyx_t_14 = ((__pyx_t_5 == __pyx_t_15) != 0);
      __pyx_t_2 = __pyx_t_14;
      __pyx_L27_bool_binop_done:;
      if (__pyx_t_2) {

        /* "ete4/coretype/tree.pyx":2237
 *                         smallest = side2
 *                 if smallest is not None and len(smallest) == len(targets):
 *                     break             # <<<<<<<<<<<<<<
 *             foreign_leaves = smallest - targets
 *         else:
 */
        goto __pyx_L16_break;

        /* "ete4/coretype/tree.pyx":2236
 *                 elif targets.issubset(side2) and (not smallest or len(side2) < len(smallest)):
 *                         smallest = side2
 *                 if smallest is not None and len(smallest) == len(targets):             # <<<<<<<<<<<<<<
 *                     break
 *             foreign_leaves = smallest - targets
 */
      }

      /* "ete4/coretype/tree.pyx":2231
 *         if unrooted:
 *             smallest = None
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):             # <<<<<<<<<<<<<<
 *                 if targets.issubset(side1) and (not smallest or len(side1) < len(smallest)):
 *                     smallest = side1
 */
    }
    __pyx_L16_break:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2238
 *                 if smallest is not None and len(smallest) == len(targets):
 *                     break
 *             foreign_leaves = smallest - targets             # <<<<<<<<<<<<<<
 *         else:
 *             # Check monophyly with get_common_ancestor. Note that this
 */
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_smallest, __pyx_v_targets); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_foreign_leaves = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2229
 *                                  ' Please check your target attribute and values, or set the ignore_missing flag to True')
 * 
 *         if unrooted:             # <<<<<<<<<<<<<<
 *             smallest = None
 *             for side1, side2 in self.iter_edges(cached_content=n2leaves):
 */
    goto __pyx_L14;
  }

  /* "ete4/coretype/tree.pyx":2245
 *             # get_common_ancestor function is smart enough to detect it
 *             # and avoid unnecessary traversing.
 *             common = self.get_common_ancestor(targets)             # <<<<<<<<<<<<<<
 *             observed = n2leaves[common]
 *             foreign_leaves = set([leaf for leaf in observed
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_common_ancestor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_v_targets) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_targets);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_common = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2246
 *             # and avoid unnecessary traversing.
 *             common = self.get_common_ancestor(targets)
 *             observed = n2leaves[common]             # <<<<<<<<<<<<<<
 *             foreign_leaves = set([leaf for leaf in observed
 *                               if getattr(leaf, target_attr) not in values])
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_n2leaves, __pyx_v_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_observed = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2247
 *             common = self.get_common_ancestor(targets)
 *             observed = n2leaves[common]
 *             foreign_leaves = set([leaf for leaf in observed             # <<<<<<<<<<<<<<
 *                               if getattr(leaf, target_attr) not in values])
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_observed)) || PyTuple_CheckExact(__pyx_v_observed)) {
      __pyx_t_1 = __pyx_v_observed; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_observed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2247, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_11); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2247, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2247, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_11); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2247, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2247, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_6(__pyx_t_1);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2247, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_v_leaf, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "ete4/coretype/tree.pyx":2248
 *             observed = n2leaves[common]
 *             foreign_leaves = set([leaf for leaf in observed
 *                               if getattr(leaf, target_attr) not in values])             # <<<<<<<<<<<<<<
 * 
 *         if not foreign_leaves:
 */
      __pyx_t_11 = __Pyx_GetAttr(__pyx_v_leaf, __pyx_v_target_attr); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_11, __pyx_v_values, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2248, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_14 = (__pyx_t_2 != 0);
      if (__pyx_t_14) {

        /* "ete4/coretype/tree.pyx":2247
 *             common = self.get_common_ancestor(targets)
 *             observed = n2leaves[common]
 *             foreign_leaves = set([leaf for leaf in observed             # <<<<<<<<<<<<<<
 *                               if getattr(leaf, target_attr) not in values])
 * 
 */
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_leaf))) __PYX_ERR(0, 2247, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":2248
 *             observed = n2leaves[common]
 *             foreign_leaves = set([leaf for leaf in observed
 *                               if getattr(leaf, target_attr) not in values])             # <<<<<<<<<<<<<<
 * 
 *         if not foreign_leaves:
 */
      }

      /* "ete4/coretype/tree.pyx":2247
 *             common = self.get_common_ancestor(targets)
 *             observed = n2leaves[common]
 *             foreign_leaves = set([leaf for leaf in observed             # <<<<<<<<<<<<<<
 *                               if getattr(leaf, target_attr) not in values])
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_foreign_leaves = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L14:;

  /* "ete4/coretype/tree.pyx":2250
 *                               if getattr(leaf, target_attr) not in values])
 * 
 *         if not foreign_leaves:             # <<<<<<<<<<<<<<
 *             return True, "monophyletic", foreign_leaves
 *         else:
 */
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_foreign_leaves); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 2250, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_14) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2251
 * 
 *         if not foreign_leaves:
 *             return True, "monophyletic", foreign_leaves             # <<<<<<<<<<<<<<
 *         else:
 *             # if the requested attribute is not monophyletic in this
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_1, 0, Py_True);
    __Pyx_INCREF(__pyx_n_s_monophyletic);
    __Pyx_GIVEREF(__pyx_n_s_monophyletic);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_monophyletic);
    __Pyx_INCREF(__pyx_v_foreign_leaves);
    __Pyx_GIVEREF(__pyx_v_foreign_leaves);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_foreign_leaves);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":2250
 *                               if getattr(leaf, target_attr) not in values])
 * 
 *         if not foreign_leaves:             # <<<<<<<<<<<<<<
 *             return True, "monophyletic", foreign_leaves
 *         else:
 */
  }

  /* "ete4/coretype/tree.pyx":2255
 *             # if the requested attribute is not monophyletic in this
 *             # node, let's differentiate between poly and paraphyly.
 *             poly_common = self.get_common_ancestor(foreign_leaves)             # <<<<<<<<<<<<<<
 *             # if the common ancestor of all foreign leaves is self
 *             # contained, we have a paraphyly. Otherwise, polyphyly.
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_common_ancestor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_11, __pyx_v_foreign_leaves) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_foreign_leaves);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_poly_common = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2258
 *             # if the common ancestor of all foreign leaves is self
 *             # contained, we have a paraphyly. Otherwise, polyphyly.
 *             polyphyletic = [leaf for leaf in poly_common if             # <<<<<<<<<<<<<<
 *                             getattr(leaf, target_attr) in values]
 *             if polyphyletic:
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_poly_common)) || PyTuple_CheckExact(__pyx_v_poly_common)) {
      __pyx_t_4 = __pyx_v_poly_common; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_poly_common); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2258, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_11); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2258, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2258, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_11); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2258, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2258, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2258, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_v_leaf, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "ete4/coretype/tree.pyx":2259
 *             # contained, we have a paraphyly. Otherwise, polyphyly.
 *             polyphyletic = [leaf for leaf in poly_common if
 *                             getattr(leaf, target_attr) in values]             # <<<<<<<<<<<<<<
 *             if polyphyletic:
 *                 return False, "polyphyletic", foreign_leaves
 */
      __pyx_t_11 = __Pyx_GetAttr(__pyx_v_leaf, __pyx_v_target_attr); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_11, __pyx_v_values, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2259, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_14 = (__pyx_t_2 != 0);

      /* "ete4/coretype/tree.pyx":2258
 *             # if the common ancestor of all foreign leaves is self
 *             # contained, we have a paraphyly. Otherwise, polyphyly.
 *             polyphyletic = [leaf for leaf in poly_common if             # <<<<<<<<<<<<<<
 *                             getattr(leaf, target_attr) in values]
 *             if polyphyletic:
 */
      if (__pyx_t_14) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_leaf))) __PYX_ERR(0, 2258, __pyx_L1_error)
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_polyphyletic = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2260
 *             polyphyletic = [leaf for leaf in poly_common if
 *                             getattr(leaf, target_attr) in values]
 *             if polyphyletic:             # <<<<<<<<<<<<<<
 *                 return False, "polyphyletic", foreign_leaves
 *             else:
 */
    __pyx_t_14 = (PyList_GET_SIZE(__pyx_v_polyphyletic) != 0);
    if (__pyx_t_14) {

      /* "ete4/coretype/tree.pyx":2261
 *                             getattr(leaf, target_attr) in values]
 *             if polyphyletic:
 *                 return False, "polyphyletic", foreign_leaves             # <<<<<<<<<<<<<<
 *             else:
 *                 return False, "paraphyletic", foreign_leaves
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_1, 0, Py_False);
      __Pyx_INCREF(__pyx_n_s_polyphyletic);
      __Pyx_GIVEREF(__pyx_n_s_polyphyletic);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_polyphyletic);
      __Pyx_INCREF(__pyx_v_foreign_leaves);
      __Pyx_GIVEREF(__pyx_v_foreign_leaves);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_foreign_leaves);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "ete4/coretype/tree.pyx":2260
 *             polyphyletic = [leaf for leaf in poly_common if
 *                             getattr(leaf, target_attr) in values]
 *             if polyphyletic:             # <<<<<<<<<<<<<<
 *                 return False, "polyphyletic", foreign_leaves
 *             else:
 */
    }

    /* "ete4/coretype/tree.pyx":2263
 *                 return False, "polyphyletic", foreign_leaves
 *             else:
 *                 return False, "paraphyletic", foreign_leaves             # <<<<<<<<<<<<<<
 * 
 *     def get_monophyletic(self, values, target_attr):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_1, 0, Py_False);
      __Pyx_INCREF(__pyx_n_s_paraphyletic);
      __Pyx_GIVEREF(__pyx_n_s_paraphyletic);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_paraphyletic);
      __Pyx_INCREF(__pyx_v_foreign_leaves);
      __Pyx_GIVEREF(__pyx_v_foreign_leaves);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_foreign_leaves);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }

  /* "ete4/coretype/tree.pyx":2171
 *             node.dist = node.dist
 * 
 *     def check_monophyly(self, values, target_attr, ignore_missing=False,             # <<<<<<<<<<<<<<
 *                         unrooted=False):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.check_monophyly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n2leaves);
  __Pyx_XDECREF(__pyx_v_found_values);
  __Pyx_XDECREF(__pyx_v_missing_values);
  __Pyx_XDECREF(__pyx_v_targets);
  __Pyx_XDECREF(__pyx_v_smallest);
  __Pyx_XDECREF(__pyx_v_side1);
  __Pyx_XDECREF(__pyx_v_side2);
  __Pyx_XDECREF(__pyx_v_foreign_leaves);
  __Pyx_XDECREF(__pyx_v_common);
  __Pyx_XDECREF(__pyx_v_observed);
  __Pyx_XDECREF(__pyx_v_poly_common);
  __Pyx_XDECREF(__pyx_v_polyphyletic);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_leaf);
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_212generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":2265
 *                 return False, "paraphyletic", foreign_leaves
 * 
 *     def get_monophyletic(self, values, target_attr):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.2
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_211get_monophyletic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_210get_monophyletic[] = "\n        .. versionadded:: 2.2\n\n        Returns a list of nodes matching the provided monophyly\n        criteria. For a node to be considered a match, all\n        `target_attr` values within and node, and exclusively them,\n        should be grouped.\n\n        :param values: a set of values for which monophyly is\n            expected.\n\n        :param target_attr: node attribute being used to check\n            monophyly (i.e. species for species trees, names for gene\n            family trees).\n\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_211get_monophyletic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_v_target_attr = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_monophyletic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_values,&__pyx_n_s_target_attr,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_attr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_monophyletic", 1, 2, 2, 1); __PYX_ERR(0, 2265, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_monophyletic") < 0)) __PYX_ERR(0, 2265, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_values = values[0];
    __pyx_v_target_attr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_monophyletic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_monophyletic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_210get_monophyletic(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_values, __pyx_v_target_attr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2288
 *         n2values = self.get_cached_content(store_attr=target_attr)
 * 
 *         is_monophyletic = lambda node: n2values[node] == values             # <<<<<<<<<<<<<<
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):
 *             if is_monophyletic(match):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16get_monophyletic_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_node); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_16get_monophyletic_lambda3 = {"lambda3", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16get_monophyletic_lambda3, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16get_monophyletic_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_node) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_n2values)) { __Pyx_RaiseClosureNameError("n2values"); __PYX_ERR(0, 2288, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_n2values, __pyx_v_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_values)) { __Pyx_RaiseClosureNameError("values"); __PYX_ERR(0, 2288, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_values, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_monophyletic.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2265
 *                 return False, "paraphyletic", foreign_leaves
 * 
 *     def get_monophyletic(self, values, target_attr):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.2
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_210get_monophyletic(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_values, PyObject *__pyx_v_target_attr) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_monophyletic", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2265, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_values = __pyx_v_values;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_values);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_values);
  __pyx_cur_scope->__pyx_v_target_attr = __pyx_v_target_attr;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_target_attr);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_target_attr);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_212generator10, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_monophyletic, __pyx_n_s_TreeNode_get_monophyletic, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 2265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.get_monophyletic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_212generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_monophyletic", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2265, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2283
 *         """
 * 
 *         if type(values) != set:             # <<<<<<<<<<<<<<
 *             values = set(values)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_cur_scope->__pyx_v_values)), ((PyObject *)(&PySet_Type)), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2284
 * 
 *         if type(values) != set:
 *             values = set(values)             # <<<<<<<<<<<<<<
 * 
 *         n2values = self.get_cached_content(store_attr=target_attr)
 */
    __pyx_t_1 = PySet_New(__pyx_cur_scope->__pyx_v_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_values);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_values, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2283
 *         """
 * 
 *         if type(values) != set:             # <<<<<<<<<<<<<<
 *             values = set(values)
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":2286
 *             values = set(values)
 * 
 *         n2values = self.get_cached_content(store_attr=target_attr)             # <<<<<<<<<<<<<<
 * 
 *         is_monophyletic = lambda node: n2values[node] == values
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_cached_content); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_store_attr, __pyx_cur_scope->__pyx_v_target_attr) < 0) __PYX_ERR(0, 2286, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_n2values = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":2288
 *         n2values = self.get_cached_content(store_attr=target_attr)
 * 
 *         is_monophyletic = lambda node: n2values[node] == values             # <<<<<<<<<<<<<<
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):
 *             if is_monophyletic(match):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_16get_monophyletic_lambda3, 0, __pyx_n_s_get_monophyletic_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_is_monophyletic = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":2289
 * 
 *         is_monophyletic = lambda node: n2values[node] == values
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):             # <<<<<<<<<<<<<<
 *             if is_monophyletic(match):
 *                 yield match
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_iter_leaves); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_is_leaf_fn, __pyx_cur_scope->__pyx_v_is_monophyletic) < 0) __PYX_ERR(0, 2289, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2289, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2289, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2289, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2289, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_match);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_match, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2290
 *         is_monophyletic = lambda node: n2values[node] == values
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):
 *             if is_monophyletic(match):             # <<<<<<<<<<<<<<
 *                 yield match
 * 
 */
    __pyx_t_1 = __pyx_lambda_funcdef_lambda3(__pyx_cur_scope->__pyx_v_is_monophyletic, __pyx_cur_scope->__pyx_v_match); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "ete4/coretype/tree.pyx":2291
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):
 *             if is_monophyletic(match):
 *                 yield match             # <<<<<<<<<<<<<<
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_match);
      __pyx_r = __pyx_cur_scope->__pyx_v_match;
      __Pyx_XGIVEREF(__pyx_t_3);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2291, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2290
 *         is_monophyletic = lambda node: n2values[node] == values
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):
 *             if is_monophyletic(match):             # <<<<<<<<<<<<<<
 *                 yield match
 * 
 */
    }

    /* "ete4/coretype/tree.pyx":2289
 * 
 *         is_monophyletic = lambda node: n2values[node] == values
 *         for match in self.iter_leaves(is_leaf_fn=is_monophyletic):             # <<<<<<<<<<<<<<
 *             if is_monophyletic(match):
 *                 yield match
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":2265
 *                 return False, "paraphyletic", foreign_leaves
 * 
 *     def get_monophyletic(self, values, target_attr):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded:: 2.2
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("get_monophyletic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2293
 *                 yield match
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,             # <<<<<<<<<<<<<<
 *                           skip_large_polytomies=False):
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_214expand_polytomies(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_213expand_polytomies[] = "\n        .. versionadded:: 2.3\n\n        Given a tree with one or more polytomies, this functions returns the\n        list of all trees (in newick format) resulting from the combination of\n        all possible solutions of the multifurcated nodes.\n\n        .. warning:\n\n           Please note that the number of of possible binary trees grows\n           exponentially with the number and size of polytomies. Using this\n           function with large multifurcations is not feasible:\n\n           polytomy size: 3 number of binary trees: 3\n           polytomy size: 4 number of binary trees: 15\n           polytomy size: 5 number of binary trees: 105\n           polytomy size: 6 number of binary trees: 945\n           polytomy size: 7 number of binary trees: 10395\n           polytomy size: 8 number of binary trees: 135135\n           polytomy size: 9 number of binary trees: 2027025\n\n        http://ajmonline.org/2010/darwin.php\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_214expand_polytomies(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_map_attr = 0;
  PyObject *__pyx_v_polytomy_size_limit = 0;
  PyObject *__pyx_v_skip_large_polytomies = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expand_polytomies (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_map_attr,&__pyx_n_s_polytomy_size_limit,&__pyx_n_s_skip_large_polytomies,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_n_s_name);
    values[1] = ((PyObject *)__pyx_int_5);

    /* "ete4/coretype/tree.pyx":2294
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,
 *                           skip_large_polytomies=False):             # <<<<<<<<<<<<<<
 *         '''
 *         .. versionadded:: 2.3
 */
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_map_attr);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_polytomy_size_limit);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_skip_large_polytomies);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "expand_polytomies") < 0)) __PYX_ERR(0, 2293, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_map_attr = values[0];
    __pyx_v_polytomy_size_limit = values[1];
    __pyx_v_skip_large_polytomies = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("expand_polytomies", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2293, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.expand_polytomies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_213expand_polytomies(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_map_attr, __pyx_v_polytomy_size_limit, __pyx_v_skip_large_polytomies);

  /* "ete4/coretype/tree.pyx":2293
 *                 yield match
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,             # <<<<<<<<<<<<<<
 *                           skip_large_polytomies=False):
 *         '''
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_2generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":2322
 *             pass
 * 
 *         def add_leaf(tree, label):             # <<<<<<<<<<<<<<
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_1add_leaf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_1add_leaf = {"add_leaf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_1add_leaf, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_1add_leaf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree = 0;
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_label,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 2, 2, 1); __PYX_ERR(0, 2322, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_leaf") < 0)) __PYX_ERR(0, 2322, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_tree = values[0];
    __pyx_v_label = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.expand_polytomies.add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_add_leaf(__pyx_self, __pyx_v_tree, __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_add_leaf(PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_label) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_leaf", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2322, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_tree = __pyx_v_tree;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tree);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tree);
  __pyx_cur_scope->__pyx_v_label = __pyx_v_label;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_label);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_label);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_2generator12, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_add_leaf, __pyx_n_s_expand_polytomies_locals_add_lea, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 2322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.expand_polytomies.add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_2generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_yield;
    case 2: goto __pyx_L10_resume_from_yield;
    case 3: goto __pyx_L13_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2322, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2323
 * 
 *         def add_leaf(tree, label):
 *           yield (label, tree)             # <<<<<<<<<<<<<<
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 *             for left in add_leaf(tree[0], label):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_label);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_label);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tree);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tree);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_tree);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  /* return from generator, yielding value */
  __pyx_generator->resume_label = 1;
  return __pyx_r;
  __pyx_L4_resume_from_yield:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2323, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2324
 *         def add_leaf(tree, label):
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):             # <<<<<<<<<<<<<<
 *             for left in add_leaf(tree[0], label):
 *               yield (left, tree[1])
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_TipTuple)) { __Pyx_RaiseClosureNameError("TipTuple"); __PYX_ERR(0, 2324, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_TipTuple;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_cur_scope->__pyx_v_tree, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 2324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_Check(__pyx_cur_scope->__pyx_v_tree); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2325
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 *             for left in add_leaf(tree[0], label):             # <<<<<<<<<<<<<<
 *               yield (left, tree[1])
 *             for right in add_leaf(tree[1], label):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tree, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_add_leaf)) { __Pyx_RaiseClosureNameError("add_leaf"); __PYX_ERR(0, 2325, __pyx_L1_error) }
    __pyx_t_5 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_add_leaf(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_add_leaf, __pyx_t_1, __pyx_cur_scope->__pyx_v_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2325, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2325, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2325, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2325, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2325, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2325, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_left);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_left, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":2326
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 *             for left in add_leaf(tree[0], label):
 *               yield (left, tree[1])             # <<<<<<<<<<<<<<
 *             for right in add_leaf(tree[1], label):
 *               yield (tree[0], right)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tree, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_left);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_left);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_cur_scope->__pyx_v_left);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2326, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2325
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 *             for left in add_leaf(tree[0], label):             # <<<<<<<<<<<<<<
 *               yield (left, tree[1])
 *             for right in add_leaf(tree[1], label):
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2327
 *             for left in add_leaf(tree[0], label):
 *               yield (left, tree[1])
 *             for right in add_leaf(tree[1], label):             # <<<<<<<<<<<<<<
 *               yield (tree[0], right)
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tree, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_add_leaf)) { __Pyx_RaiseClosureNameError("add_leaf"); __PYX_ERR(0, 2327, __pyx_L1_error) }
    __pyx_t_8 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_add_leaf(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_add_leaf, __pyx_t_1, __pyx_cur_scope->__pyx_v_label); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
      __pyx_t_1 = __pyx_t_8; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2327, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2327, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2327, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2327, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_right);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_right, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":2328
 *               yield (left, tree[1])
 *             for right in add_leaf(tree[1], label):
 *               yield (tree[0], right)             # <<<<<<<<<<<<<<
 * 
 *         def enum_unordered(labels):
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tree, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_right);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_right);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_right);
      __pyx_t_8 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 3;
      return __pyx_r;
      __pyx_L13_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2328, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2327
 *             for left in add_leaf(tree[0], label):
 *               yield (left, tree[1])
 *             for right in add_leaf(tree[1], label):             # <<<<<<<<<<<<<<
 *               yield (tree[0], right)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2324
 *         def add_leaf(tree, label):
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):             # <<<<<<<<<<<<<<
 *             for left in add_leaf(tree[0], label):
 *               yield (left, tree[1])
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":2322
 *             pass
 * 
 *         def add_leaf(tree, label):             # <<<<<<<<<<<<<<
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_5generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":2330
 *               yield (tree[0], right)
 * 
 *         def enum_unordered(labels):             # <<<<<<<<<<<<<<
 *           if len(labels) == 1:
 *             yield labels[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_4enum_unordered(PyObject *__pyx_self, PyObject *__pyx_v_labels); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_4enum_unordered = {"enum_unordered", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_4enum_unordered, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_4enum_unordered(PyObject *__pyx_self, PyObject *__pyx_v_labels) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enum_unordered (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_3enum_unordered(__pyx_self, ((PyObject *)__pyx_v_labels));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_3enum_unordered(PyObject *__pyx_self, PyObject *__pyx_v_labels) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("enum_unordered", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2330, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_labels = __pyx_v_labels;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_labels);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_labels);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_5generator13, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_enum_unordered, __pyx_n_s_expand_polytomies_locals_enum_un, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 2330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.expand_polytomies.enum_unordered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_5generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enum_unordered", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_yield;
    case 2: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2330, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2331
 * 
 *         def enum_unordered(labels):
 *           if len(labels) == 1:             # <<<<<<<<<<<<<<
 *             yield labels[0]
 *           else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_cur_scope->__pyx_v_labels); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2331, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2332
 *         def enum_unordered(labels):
 *           if len(labels) == 1:
 *             yield labels[0]             # <<<<<<<<<<<<<<
 *           else:
 *             for tree in enum_unordered(labels[1:]):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_labels, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2332, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2331
 * 
 *         def enum_unordered(labels):
 *           if len(labels) == 1:             # <<<<<<<<<<<<<<
 *             yield labels[0]
 *           else:
 */
    goto __pyx_L4;
  }

  /* "ete4/coretype/tree.pyx":2334
 *             yield labels[0]
 *           else:
 *             for tree in enum_unordered(labels[1:]):             # <<<<<<<<<<<<<<
 *               for new_tree in add_leaf(tree, labels[0]):
 *                 yield new_tree
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_labels, 1, 0, NULL, NULL, &__pyx_slice__30, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_enum_unordered)) { __Pyx_RaiseClosureNameError("enum_unordered"); __PYX_ERR(0, 2334, __pyx_L1_error) }
    __pyx_t_4 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_3enum_unordered(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_enum_unordered, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2334, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 2334, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2334, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 2334, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2334, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2334, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tree);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tree, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":2335
 *           else:
 *             for tree in enum_unordered(labels[1:]):
 *               for new_tree in add_leaf(tree, labels[0]):             # <<<<<<<<<<<<<<
 *                 yield new_tree
 * 
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_labels, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_add_leaf)) { __Pyx_RaiseClosureNameError("add_leaf"); __PYX_ERR(0, 2335, __pyx_L1_error) }
      __pyx_t_6 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_add_leaf(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_add_leaf, __pyx_cur_scope->__pyx_v_tree, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_4 = __pyx_t_6; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2335, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2335, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2335, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2335, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2335, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_8(__pyx_t_4);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2335, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_new_tree);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_new_tree, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;

        /* "ete4/coretype/tree.pyx":2336
 *             for tree in enum_unordered(labels[1:]):
 *               for new_tree in add_leaf(tree, labels[0]):
 *                 yield new_tree             # <<<<<<<<<<<<<<
 * 
 *         n2subtrees = {}
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_new_tree);
        __pyx_r = __pyx_cur_scope->__pyx_v_new_tree;
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_t_4);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
        __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
        __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
        __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __pyx_r;
        __pyx_L10_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
        __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
        __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2336, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":2335
 *           else:
 *             for tree in enum_unordered(labels[1:]):
 *               for new_tree in add_leaf(tree, labels[0]):             # <<<<<<<<<<<<<<
 *                 yield new_tree
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":2334
 *             yield labels[0]
 *           else:
 *             for tree in enum_unordered(labels[1:]):             # <<<<<<<<<<<<<<
 *               for new_tree in add_leaf(tree, labels[0]):
 *                 yield new_tree
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L4:;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "ete4/coretype/tree.pyx":2330
 *               yield (tree[0], right)
 * 
 *         def enum_unordered(labels):             # <<<<<<<<<<<<<<
 *           if len(labels) == 1:
 *             yield labels[0]
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("enum_unordered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2293
 *                 yield match
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,             # <<<<<<<<<<<<<<
 *                           skip_large_polytomies=False):
 *         '''
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_213expand_polytomies(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_map_attr, PyObject *__pyx_v_polytomy_size_limit, PyObject *__pyx_v_skip_large_polytomies) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *__pyx_cur_scope;
  PyObject *__pyx_v_n2subtrees = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_subtrees = NULL;
  PyObject *__pyx_v_childtrees = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_subtree = NULL;
  PyObject *__pyx_v_nw = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expand_polytomies", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2293, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "ete4/coretype/tree.pyx":2319
 *         '''
 * 
 *         class TipTuple(tuple):             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&PyTuple_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyTuple_Type)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&PyTuple_Type)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_TipTuple, __pyx_n_s_expand_polytomies_locals_TipTupl, (PyObject *) NULL, __pyx_n_s_ete4_coretype_tree, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_TipTuple, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_TipTuple = __pyx_t_4;
  __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2322
 *             pass
 * 
 *         def add_leaf(tree, label):             # <<<<<<<<<<<<<<
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_1add_leaf, 0, __pyx_n_s_expand_polytomies_locals_add_lea, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_add_leaf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2330
 *               yield (tree[0], right)
 * 
 *         def enum_unordered(labels):             # <<<<<<<<<<<<<<
 *           if len(labels) == 1:
 *             yield labels[0]
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_4enum_unordered, 0, __pyx_n_s_expand_polytomies_locals_enum_un, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_enum_unordered = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2338
 *                 yield new_tree
 * 
 *         n2subtrees = {}             # <<<<<<<<<<<<<<
 *         for n in self.traverse("postorder"):
 *             if n.is_leaf():
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_n2subtrees = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2339
 * 
 *         n2subtrees = {}
 *         for n in self.traverse("postorder"):             # <<<<<<<<<<<<<<
 *             if n.is_leaf():
 *                 subtrees = [getattr(n, map_attr)]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_traverse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_postorder) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_postorder);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2339, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2339, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2339, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2339, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2340
 *         n2subtrees = {}
 *         for n in self.traverse("postorder"):
 *             if n.is_leaf():             # <<<<<<<<<<<<<<
 *                 subtrees = [getattr(n, map_attr)]
 *             else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_is_leaf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":2341
 *         for n in self.traverse("postorder"):
 *             if n.is_leaf():
 *                 subtrees = [getattr(n, map_attr)]             # <<<<<<<<<<<<<<
 *             else:
 *                 subtrees = []
 */
      __pyx_t_1 = __Pyx_GetAttr(__pyx_v_n, __pyx_v_map_attr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_subtrees, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ete4/coretype/tree.pyx":2340
 *         n2subtrees = {}
 *         for n in self.traverse("postorder"):
 *             if n.is_leaf():             # <<<<<<<<<<<<<<
 *                 subtrees = [getattr(n, map_attr)]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "ete4/coretype/tree.pyx":2343
 *                 subtrees = [getattr(n, map_attr)]
 *             else:
 *                 subtrees = []             # <<<<<<<<<<<<<<
 *                 if len(n.children) > polytomy_size_limit:
 *                     if skip_large_polytomies:
 */
    /*else*/ {
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_subtrees, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "ete4/coretype/tree.pyx":2344
 *             else:
 *                 subtrees = []
 *                 if len(n.children) > polytomy_size_limit:             # <<<<<<<<<<<<<<
 *                     if skip_large_polytomies:
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_v_polytomy_size_limit, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2344, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_7) {

        /* "ete4/coretype/tree.pyx":2345
 *                 subtrees = []
 *                 if len(n.children) > polytomy_size_limit:
 *                     if skip_large_polytomies:             # <<<<<<<<<<<<<<
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 *                             subtrees.append(TipTuple(childtrees))
 */
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_skip_large_polytomies); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2345, __pyx_L1_error)
        if (likely(__pyx_t_7)) {

          /* "ete4/coretype/tree.pyx":2346
 *                 if len(n.children) > polytomy_size_limit:
 *                     if skip_large_polytomies:
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):             # <<<<<<<<<<<<<<
 *                             subtrees.append(TipTuple(childtrees))
 *                     else:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_itertools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_product); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
            __pyx_t_9 = __pyx_t_4; __Pyx_INCREF(__pyx_t_9); __pyx_t_8 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_8 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2346, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_9))) {
                if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2346, __pyx_L1_error)
                #else
                __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2346, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              } else {
                if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2346, __pyx_L1_error)
                #else
                __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2346, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              }
            } else {
              __pyx_t_4 = __pyx_t_10(__pyx_t_9);
              if (unlikely(!__pyx_t_4)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 2346, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_4);
            }
            __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_4);
            __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_n2subtrees, __pyx_v_ch); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 2346, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_8 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_8 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2346, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_9))) {
                if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2346, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2346, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_10(__pyx_t_9);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 2346, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_childtrees, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "ete4/coretype/tree.pyx":2347
 *                     if skip_large_polytomies:
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 *                             subtrees.append(TipTuple(childtrees))             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise TreeError("Found polytomy larger than current limit: %s" %n)
 */
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_cur_scope->__pyx_v_TipTuple, __pyx_v_childtrees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_subtrees, __pyx_t_1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2347, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "ete4/coretype/tree.pyx":2346
 *                 if len(n.children) > polytomy_size_limit:
 *                     if skip_large_polytomies:
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):             # <<<<<<<<<<<<<<
 *                             subtrees.append(TipTuple(childtrees))
 *                     else:
 */
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "ete4/coretype/tree.pyx":2345
 *                 subtrees = []
 *                 if len(n.children) > polytomy_size_limit:
 *                     if skip_large_polytomies:             # <<<<<<<<<<<<<<
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 *                             subtrees.append(TipTuple(childtrees))
 */
          goto __pyx_L7;
        }

        /* "ete4/coretype/tree.pyx":2349
 *                             subtrees.append(TipTuple(childtrees))
 *                     else:
 *                         raise TreeError("Found polytomy larger than current limit: %s" %n)             # <<<<<<<<<<<<<<
 *                 else:
 *                     for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Found_polytomy_larger_than_curre, __pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_9, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __PYX_ERR(0, 2349, __pyx_L1_error)
        }
        __pyx_L7:;

        /* "ete4/coretype/tree.pyx":2344
 *             else:
 *                 subtrees = []
 *                 if len(n.children) > polytomy_size_limit:             # <<<<<<<<<<<<<<
 *                     if skip_large_polytomies:
 *                         for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 */
        goto __pyx_L6;
      }

      /* "ete4/coretype/tree.pyx":2351
 *                         raise TreeError("Found polytomy larger than current limit: %s" %n)
 *                 else:
 *                     for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):             # <<<<<<<<<<<<<<
 *                         subtrees.extend([TipTuple(subtree) for subtree in enum_unordered(childtrees)])
 * 
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_itertools); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_product); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2351, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2351, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2351, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2351, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2351, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_10(__pyx_t_4);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 2351, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_n2subtrees, __pyx_v_ch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2351, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PySequence_Tuple(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
          __pyx_t_4 = __pyx_t_9; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2351, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_9); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2351, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2351, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_9); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2351, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2351, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_10(__pyx_t_4);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 2351, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __Pyx_XDECREF_SET(__pyx_v_childtrees, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "ete4/coretype/tree.pyx":2352
 *                 else:
 *                     for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):
 *                         subtrees.extend([TipTuple(subtree) for subtree in enum_unordered(childtrees)])             # <<<<<<<<<<<<<<
 * 
 *             n2subtrees[n] = subtrees
 */
          __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_1 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17expand_polytomies_3enum_unordered(__pyx_cur_scope->__pyx_v_enum_unordered, __pyx_v_childtrees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_12 = 0;
            __pyx_t_13 = NULL;
          } else {
            __pyx_t_12 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2352, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2352, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_13)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 2352, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2352, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 2352, __pyx_L1_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2352, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_13(__pyx_t_3);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 2352, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_subtree, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_cur_scope->__pyx_v_TipTuple, __pyx_v_subtree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2352, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 2352, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_11 = __Pyx_PyList_Extend(__pyx_v_subtrees, __pyx_t_9); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 2352, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "ete4/coretype/tree.pyx":2351
 *                         raise TreeError("Found polytomy larger than current limit: %s" %n)
 *                 else:
 *                     for childtrees in itertools.product(*[n2subtrees[ch] for ch in n.children]):             # <<<<<<<<<<<<<<
 *                         subtrees.extend([TipTuple(subtree) for subtree in enum_unordered(childtrees)])
 * 
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_L6:;
    }
    __pyx_L5:;

    /* "ete4/coretype/tree.pyx":2354
 *                         subtrees.extend([TipTuple(subtree) for subtree in enum_unordered(childtrees)])
 * 
 *             n2subtrees[n] = subtrees             # <<<<<<<<<<<<<<
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^
 * 
 */
    if (unlikely(PyDict_SetItem(__pyx_v_n2subtrees, __pyx_v_n, __pyx_v_subtrees) < 0)) __PYX_ERR(0, 2354, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2339
 * 
 *         n2subtrees = {}
 *         for n in self.traverse("postorder"):             # <<<<<<<<<<<<<<
 *             if n.is_leaf():
 *                 subtrees = [getattr(n, map_attr)]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2355
 * 
 *             n2subtrees[n] = subtrees
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^             # <<<<<<<<<<<<<<
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_n2subtrees, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_9 = __pyx_t_4; __Pyx_INCREF(__pyx_t_9); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2355, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2355, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2355, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_9, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2355, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_9);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2355, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_nw, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_nw); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2293
 *                 yield match
 * 
 *     def expand_polytomies(self, map_attr="name", polytomy_size_limit=5,             # <<<<<<<<<<<<<<
 *                           skip_large_polytomies=False):
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.expand_polytomies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n2subtrees);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_subtrees);
  __Pyx_XDECREF(__pyx_v_childtrees);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_subtree);
  __Pyx_XDECREF(__pyx_v_nw);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2357
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,             # <<<<<<<<<<<<<<
 *                          recursive=True):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_216resolve_polytomy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_215resolve_polytomy[] = "\n        .. versionadded: 2.2\n\n        Resolve all polytomies under current node by creating an\n        arbitrary dicotomic structure among the affected nodes. This\n        function randomly modifies current tree topology and should\n        only be used for compatibility reasons (i.e. programs\n        rejecting multifurcated node in the newick representation).\n\n        :param 0.0 default_dist: artificial branch distance of new\n            nodes.\n\n        :param 0.0 default_support: artificial branch support of new\n            nodes.\n\n        :param True recursive: Resolve any polytomy under this\n             node. When False, only current node will be checked and fixed.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_216resolve_polytomy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_default_dist = 0;
  PyObject *__pyx_v_default_support = 0;
  PyObject *__pyx_v_recursive = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolve_polytomy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_default_dist,&__pyx_n_s_default_support,&__pyx_n_s_recursive,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_float_0_0);
    values[1] = ((PyObject *)__pyx_float_0_0);

    /* "ete4/coretype/tree.pyx":2358
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,
 *                          recursive=True):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_default_dist);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_default_support);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "resolve_polytomy") < 0)) __PYX_ERR(0, 2357, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_default_dist = values[0];
    __pyx_v_default_support = values[1];
    __pyx_v_recursive = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resolve_polytomy", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.resolve_polytomy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_215resolve_polytomy(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_default_dist, __pyx_v_default_support, __pyx_v_recursive);

  /* "ete4/coretype/tree.pyx":2357
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,             # <<<<<<<<<<<<<<
 *                          recursive=True):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2379
 * 
 * 
 *         def _resolve(node):             # <<<<<<<<<<<<<<
 *             if len(node.children) > 2:
 *                 children = list(node.remove_children())
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy_1_resolve(PyObject *__pyx_self, PyObject *__pyx_v_node); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy_1_resolve = {"_resolve", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy_1_resolve, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy_1_resolve(PyObject *__pyx_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy__resolve(__pyx_self, ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy__resolve(PyObject *__pyx_self, PyObject *__pyx_v_node) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *__pyx_outer_scope;
  PyObject *__pyx_v_children = NULL;
  PyObject *__pyx_v_next_node = NULL;
  PyObject *__pyx_v_root = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resolve", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ete4/coretype/tree.pyx":2380
 * 
 *         def _resolve(node):
 *             if len(node.children) > 2:             # <<<<<<<<<<<<<<
 *                 children = list(node.remove_children())
 *                 next_node = root = node
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 > 2) != 0);
  if (__pyx_t_3) {

    /* "ete4/coretype/tree.pyx":2381
 *         def _resolve(node):
 *             if len(node.children) > 2:
 *                 children = list(node.remove_children())             # <<<<<<<<<<<<<<
 *                 next_node = root = node
 *                 for i in range(len(children)-2):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_remove_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_children = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2382
 *             if len(node.children) > 2:
 *                 children = list(node.remove_children())
 *                 next_node = root = node             # <<<<<<<<<<<<<<
 *                 for i in range(len(children)-2):
 *                     next_node = next_node.add_child()
 */
    __Pyx_INCREF(__pyx_v_node);
    __pyx_v_next_node = __pyx_v_node;
    __Pyx_INCREF(__pyx_v_node);
    __pyx_v_root = __pyx_v_node;

    /* "ete4/coretype/tree.pyx":2383
 *                 children = list(node.remove_children())
 *                 next_node = root = node
 *                 for i in range(len(children)-2):             # <<<<<<<<<<<<<<
 *                     next_node = next_node.add_child()
 *                     next_node.dist = default_dist
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_range); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyList_GET_SIZE(__pyx_v_children); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2383, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t((__pyx_t_2 - 2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2383, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2383, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2383, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2383, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2383, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2383, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":2384
 *                 next_node = root = node
 *                 for i in range(len(children)-2):
 *                     next_node = next_node.add_child()             # <<<<<<<<<<<<<<
 *                     next_node.dist = default_dist
 *                     next_node.support = default_support
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_next_node, __pyx_n_s_add_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_next_node, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":2385
 *                 for i in range(len(children)-2):
 *                     next_node = next_node.add_child()
 *                     next_node.dist = default_dist             # <<<<<<<<<<<<<<
 *                     next_node.support = default_support
 * 
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_default_dist)) { __Pyx_RaiseClosureNameError("default_dist"); __PYX_ERR(0, 2385, __pyx_L1_error) }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_next_node, __pyx_n_s_dist, __pyx_cur_scope->__pyx_v_default_dist) < 0) __PYX_ERR(0, 2385, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2386
 *                     next_node = next_node.add_child()
 *                     next_node.dist = default_dist
 *                     next_node.support = default_support             # <<<<<<<<<<<<<<
 * 
 *                 next_node = root
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_default_support)) { __Pyx_RaiseClosureNameError("default_support"); __PYX_ERR(0, 2386, __pyx_L1_error) }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_next_node, __pyx_n_s_support, __pyx_cur_scope->__pyx_v_default_support) < 0) __PYX_ERR(0, 2386, __pyx_L1_error)

      /* "ete4/coretype/tree.pyx":2383
 *                 children = list(node.remove_children())
 *                 next_node = root = node
 *                 for i in range(len(children)-2):             # <<<<<<<<<<<<<<
 *                     next_node = next_node.add_child()
 *                     next_node.dist = default_dist
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2388
 *                     next_node.support = default_support
 * 
 *                 next_node = root             # <<<<<<<<<<<<<<
 *                 for ch in children:
 *                     next_node.add_child(ch)
 */
    __Pyx_INCREF(__pyx_v_root);
    __Pyx_DECREF_SET(__pyx_v_next_node, __pyx_v_root);

    /* "ete4/coretype/tree.pyx":2389
 * 
 *                 next_node = root
 *                 for ch in children:             # <<<<<<<<<<<<<<
 *                     next_node.add_child(ch)
 *                     if ch != children[-2]:
 */
    __pyx_t_1 = __pyx_v_children; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2389, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":2390
 *                 next_node = root
 *                 for ch in children:
 *                     next_node.add_child(ch)             # <<<<<<<<<<<<<<
 *                     if ch != children[-2]:
 *                         next_node = next_node.children[0]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_next_node, __pyx_n_s_add_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_ch) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_ch);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "ete4/coretype/tree.pyx":2391
 *                 for ch in children:
 *                     next_node.add_child(ch)
 *                     if ch != children[-2]:             # <<<<<<<<<<<<<<
 *                         next_node = next_node.children[0]
 *         target = [self]
 */
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_children, -2L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_ch, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2391, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "ete4/coretype/tree.pyx":2392
 *                     next_node.add_child(ch)
 *                     if ch != children[-2]:
 *                         next_node = next_node.children[0]             # <<<<<<<<<<<<<<
 *         target = [self]
 *         if recursive:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_next_node, __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF_SET(__pyx_v_next_node, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "ete4/coretype/tree.pyx":2391
 *                 for ch in children:
 *                     next_node.add_child(ch)
 *                     if ch != children[-2]:             # <<<<<<<<<<<<<<
 *                         next_node = next_node.children[0]
 *         target = [self]
 */
      }

      /* "ete4/coretype/tree.pyx":2389
 * 
 *                 next_node = root
 *                 for ch in children:             # <<<<<<<<<<<<<<
 *                     next_node.add_child(ch)
 *                     if ch != children[-2]:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2380
 * 
 *         def _resolve(node):
 *             if len(node.children) > 2:             # <<<<<<<<<<<<<<
 *                 children = list(node.remove_children())
 *                 next_node = root = node
 */
  }

  /* "ete4/coretype/tree.pyx":2379
 * 
 * 
 *         def _resolve(node):             # <<<<<<<<<<<<<<
 *             if len(node.children) > 2:
 *                 children = list(node.remove_children())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.resolve_polytomy._resolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_children);
  __Pyx_XDECREF(__pyx_v_next_node);
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2357
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,             # <<<<<<<<<<<<<<
 *                          recursive=True):
 *         """
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_215resolve_polytomy(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_default_dist, PyObject *__pyx_v_default_support, PyObject *__pyx_v_recursive) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *__pyx_cur_scope;
  PyObject *__pyx_v__resolve = 0;
  PyObject *__pyx_v_target = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resolve_polytomy", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2357, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_default_dist = __pyx_v_default_dist;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_default_dist);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_default_dist);
  __pyx_cur_scope->__pyx_v_default_support = __pyx_v_default_support;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_default_support);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_default_support);

  /* "ete4/coretype/tree.pyx":2379
 * 
 * 
 *         def _resolve(node):             # <<<<<<<<<<<<<<
 *             if len(node.children) > 2:
 *                 children = list(node.remove_children())
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy_1_resolve, 0, __pyx_n_s_resolve_polytomy_locals__resolve, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__resolve = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2393
 *                     if ch != children[-2]:
 *                         next_node = next_node.children[0]
 *         target = [self]             # <<<<<<<<<<<<<<
 *         if recursive:
 *             target.extend([n for n in self.get_descendants()])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_v_target = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2394
 *                         next_node = next_node.children[0]
 *         target = [self]
 *         if recursive:             # <<<<<<<<<<<<<<
 *             target.extend([n for n in self.get_descendants()])
 *         for n in target:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2394, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2395
 *         target = [self]
 *         if recursive:
 *             target.extend([n for n in self.get_descendants()])             # <<<<<<<<<<<<<<
 *         for n in target:
 *             _resolve(n)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_descendants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2395, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2395, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2395, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2395, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2395, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2395, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_3);
      __pyx_t_3 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_n))) __PYX_ERR(0, 2395, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyList_Extend(__pyx_v_target, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2394
 *                         next_node = next_node.children[0]
 *         target = [self]
 *         if recursive:             # <<<<<<<<<<<<<<
 *             target.extend([n for n in self.get_descendants()])
 *         for n in target:
 */
  }

  /* "ete4/coretype/tree.pyx":2396
 *         if recursive:
 *             target.extend([n for n in self.get_descendants()])
 *         for n in target:             # <<<<<<<<<<<<<<
 *             _resolve(n)
 * 
 */
  __pyx_t_1 = __pyx_v_target; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2396, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2397
 *             target.extend([n for n in self.get_descendants()])
 *         for n in target:
 *             _resolve(n)             # <<<<<<<<<<<<<<
 * 
 *     def cophenetic_matrix(self):
 */
    __pyx_t_4 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16resolve_polytomy__resolve(__pyx_v__resolve, __pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2396
 *         if recursive:
 *             target.extend([n for n in self.get_descendants()])
 *         for n in target:             # <<<<<<<<<<<<<<
 *             _resolve(n)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2357
 *         return ["%s;"%str(nw) for nw in n2subtrees[self]] # tuples are in newick format ^_^
 * 
 *     def resolve_polytomy(self, default_dist=0.0, default_support=0.0,             # <<<<<<<<<<<<<<
 *                          recursive=True):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.resolve_polytomy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__resolve);
  __Pyx_XDECREF(__pyx_v_target);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2399
 *             _resolve(n)
 * 
 *     def cophenetic_matrix(self):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 3.1.1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_218cophenetic_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_217cophenetic_matrix[] = "\n        .. versionadded: 3.1.1\n\n        Generate a cophenetic distance matrix of the treee to standard output\n\n        The `cophenetic matrix <https://en.wikipedia.org/wiki/Cophenetic>` is a matrix representation of the\n        distance between each node.\n\n        if we have a tree like\n\n                                   ----A\n                      _____________|y\n                      |            |\n                      |            ----B\n              ________|z\n                      |            ----C\n                      |            |\n                      |____________|x     -----D\n                                   |      |\n                                   |______|w\n                                          |\n                                          |\n                                          -----E\n\n        Where w,x,y,z are internal nodes.\n        d(A,B) = d(y,A) + d(y,B)\n        and\n        d(A, E) = d(z,A) + d(z, E) = {d(z,y) + d(y,A)} + {d(z,x) + d(x,w) + d(w,E)}\n\n        We use an idea inspired by the ete3 team: https://gist.github.com/jhcepas/279f9009f46bf675e3a890c19191158b :\n\n        For each node find its path to the root.\n\n        e.g.\n\n        A -> A, y, z\n        E -> E, w, x,z\n\n        and make these orderless sets. Then we XOR the two sets to only find the elements\n        that are in one or other sets but not both. In this case A, E, y, x, w.\n\n        The distance between the two nodes is the sum of the distances from each of those nodes\n        to the parent\n\n        One more optimization: since the distances are symmetric, and distance to itself is zero\n        we user itertools.combinations rather than itertools.permutations. This cuts our computes from theta(n^2)\n        1/2n^2 - n (= O(n^2), which is still not great, but in reality speeds things up for large trees).\n\n\n        For this tree, we will return the two dimensional array:\n                         A                  B      ""             C                   D                     E\n        A                0           d(A-y) + d(B-y)     d(A-z) + d(C-z)     d(A-z) + d(D-z)       d(A-z) + d(E-z)\n        B         d(B-y) + d(A-y)           0            d(B-z) + d(C-z)     d(B-z) + d(D-z)       d(B-z) + d(E-z)\n        C         d(C-z) + d(A-z)    d(C-z) + d(B-z)            0            d(C-x) + d(D-x)       d(C-x) + d(E-x)\n        D         d(D-z) + d(A-z)    d(D-z) + d(B-z)     d(D-x) + d(C-x)            0              d(D-w) + d(E-w)\n        E         d(E-z) + d(A-z)    d(E-z) + d(B-z)     d(E-x) + d(C-x)     d(E-w) + d(D-w)              0\n\n        We will also return the one dimensional array with the leaves in the order in which they appear in the matrix\n        (i.e. the column and/or row headers).\n\n        :param filename: the optional file to write to. If not provided, output will be to standard output\n        :return: two-dimensional array and a one dimensional array\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_218cophenetic_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cophenetic_matrix (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_217cophenetic_matrix(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_17cophenetic_matrix_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "ete4/coretype/tree.pyx":2485
 *             # figure out the unique nodes in the path
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]
 *             distance = sum(x.dist for x in uniquenodes)             # <<<<<<<<<<<<<<
 *             leaf_distances[leaf1.name][leaf2.name] = leaf_distances[leaf2.name][leaf1.name] = distance
 * 
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_17cophenetic_matrix_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2485, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4ete4_8coretype_4tree_8TreeNode_17cophenetic_matrix_2generator14, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_cophenetic_matrix_locals_genexpr, __pyx_n_s_ete4_coretype_tree); if (unlikely(!gen)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.cophenetic_matrix.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4ete4_8coretype_4tree_8TreeNode_17cophenetic_matrix_2generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *__pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2485, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_uniquenodes)) { __Pyx_RaiseClosureNameError("uniquenodes"); __PYX_ERR(0, 2485, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_uniquenodes)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_uniquenodes)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_uniquenodes; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_uniquenodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2485, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2485, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2485, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2485, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_x, __pyx_n_s_dist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2485, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2399
 *             _resolve(n)
 * 
 *     def cophenetic_matrix(self):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 3.1.1
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_217cophenetic_matrix(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *__pyx_cur_scope;
  PyObject *__pyx_v_leaves = NULL;
  PyObject *__pyx_v_paths = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_movingnode = NULL;
  PyObject *__pyx_v_leaf_distances = NULL;
  PyObject *__pyx_v_leaf1 = NULL;
  PyObject *__pyx_v_leaf2 = NULL;
  PyObject *__pyx_v_distance = NULL;
  PyObject *__pyx_v_allleaves = NULL;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_x = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cophenetic_matrix", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2399, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "ete4/coretype/tree.pyx":2464
 *         """
 * 
 *         leaves = self.get_leaves()             # <<<<<<<<<<<<<<
 *         paths = {x: set() for x in leaves}
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_leaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_leaves = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2465
 * 
 *         leaves = self.get_leaves()
 *         paths = {x: set() for x in leaves}             # <<<<<<<<<<<<<<
 * 
 *         # get the paths going up the tree
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2465, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_leaves)) || PyTuple_CheckExact(__pyx_v_leaves)) {
      __pyx_t_2 = __pyx_v_leaves; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_leaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2465, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2465, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2465, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2465, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2465, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2465, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2465, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_x, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2465, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_x, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2465, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x); __pyx_8genexpr1__pyx_v_x = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x); __pyx_8genexpr1__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_v_paths = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2470
 *         # we get all the nodes up to the last one and store them in a set
 * 
 *         for n in leaves:             # <<<<<<<<<<<<<<
 *             if n.is_root():
 *                 continue
 */
  if (likely(PyList_CheckExact(__pyx_v_leaves)) || PyTuple_CheckExact(__pyx_v_leaves)) {
    __pyx_t_1 = __pyx_v_leaves; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_leaves); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2470, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2470, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2470, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2470, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2471
 * 
 *         for n in leaves:
 *             if n.is_root():             # <<<<<<<<<<<<<<
 *                 continue
 *             movingnode = n
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_is_root); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {

      /* "ete4/coretype/tree.pyx":2472
 *         for n in leaves:
 *             if n.is_root():
 *                 continue             # <<<<<<<<<<<<<<
 *             movingnode = n
 *             while not movingnode.is_root():
 */
      goto __pyx_L9_continue;

      /* "ete4/coretype/tree.pyx":2471
 * 
 *         for n in leaves:
 *             if n.is_root():             # <<<<<<<<<<<<<<
 *                 continue
 *             movingnode = n
 */
    }

    /* "ete4/coretype/tree.pyx":2473
 *             if n.is_root():
 *                 continue
 *             movingnode = n             # <<<<<<<<<<<<<<
 *             while not movingnode.is_root():
 *                 paths[n].add(movingnode)
 */
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_v_movingnode, __pyx_v_n);

    /* "ete4/coretype/tree.pyx":2474
 *                 continue
 *             movingnode = n
 *             while not movingnode.is_root():             # <<<<<<<<<<<<<<
 *                 paths[n].add(movingnode)
 *                 movingnode = movingnode.up
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_movingnode, __pyx_n_s_is_root); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2474, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = ((!__pyx_t_7) != 0);
      if (!__pyx_t_8) break;

      /* "ete4/coretype/tree.pyx":2475
 *             movingnode = n
 *             while not movingnode.is_root():
 *                 paths[n].add(movingnode)             # <<<<<<<<<<<<<<
 *                 movingnode = movingnode.up
 * 
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_paths, __pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_movingnode) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_movingnode);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ete4/coretype/tree.pyx":2476
 *             while not movingnode.is_root():
 *                 paths[n].add(movingnode)
 *                 movingnode = movingnode.up             # <<<<<<<<<<<<<<
 * 
 *         # now we want to get all pairs of nodes using itertools combinations. We need AB AC etc but don't need BA CA
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_movingnode, __pyx_n_s_up); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2476, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_movingnode, __pyx_t_2);
      __pyx_t_2 = 0;
    }

    /* "ete4/coretype/tree.pyx":2470
 *         # we get all the nodes up to the last one and store them in a set
 * 
 *         for n in leaves:             # <<<<<<<<<<<<<<
 *             if n.is_root():
 *                 continue
 */
    __pyx_L9_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2480
 *         # now we want to get all pairs of nodes using itertools combinations. We need AB AC etc but don't need BA CA
 * 
 *         leaf_distances = {x.name: {} for x in leaves}             # <<<<<<<<<<<<<<
 * 
 *         for (leaf1, leaf2) in itertools.combinations(leaves, 2):
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2480, __pyx_L16_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_leaves)) || PyTuple_CheckExact(__pyx_v_leaves)) {
      __pyx_t_2 = __pyx_v_leaves; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_leaves); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2480, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2480, __pyx_L16_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2480, __pyx_L16_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2480, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2480, __pyx_L16_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2480, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2480, __pyx_L16_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_x, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_x, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2480, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2480, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_6, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2480, __pyx_L16_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_x); __pyx_8genexpr2__pyx_v_x = 0;
    goto __pyx_L19_exit_scope;
    __pyx_L16_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_x); __pyx_8genexpr2__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L19_exit_scope:;
  } /* exit inner scope */
  __pyx_v_leaf_distances = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2482
 *         leaf_distances = {x.name: {} for x in leaves}
 * 
 *         for (leaf1, leaf2) in itertools.combinations(leaves, 2):             # <<<<<<<<<<<<<<
 *             # figure out the unique nodes in the path
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_itertools); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_combinations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_leaves, __pyx_int_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_leaves, __pyx_int_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_leaves);
    __Pyx_GIVEREF(__pyx_v_leaves);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_9, __pyx_v_leaves);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_9, __pyx_int_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2482, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2482, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2482, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2482, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2482, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_2 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 2482, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L23_unpacking_done;
      __pyx_L22_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2482, __pyx_L1_error)
      __pyx_L23_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_leaf1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_leaf2, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2484
 *         for (leaf1, leaf2) in itertools.combinations(leaves, 2):
 *             # figure out the unique nodes in the path
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]             # <<<<<<<<<<<<<<
 *             distance = sum(x.dist for x in uniquenodes)
 *             leaf_distances[leaf1.name][leaf2.name] = leaf_distances[leaf2.name][leaf1.name] = distance
 */
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_paths, __pyx_v_leaf1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_paths, __pyx_v_leaf2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyNumber_Xor(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_uniquenodes);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_uniquenodes, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "ete4/coretype/tree.pyx":2485
 *             # figure out the unique nodes in the path
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]
 *             distance = sum(x.dist for x in uniquenodes)             # <<<<<<<<<<<<<<
 *             leaf_distances[leaf1.name][leaf2.name] = leaf_distances[leaf2.name][leaf1.name] = distance
 * 
 */
    __pyx_t_6 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_17cophenetic_matrix_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_distance, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2486
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]
 *             distance = sum(x.dist for x in uniquenodes)
 *             leaf_distances[leaf1.name][leaf2.name] = leaf_distances[leaf2.name][leaf1.name] = distance             # <<<<<<<<<<<<<<
 * 
 *         allleaves = sorted(leaf_distances.keys()) # the leaves in order that we will return
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_leaf1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_leaf_distances, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_leaf2, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_t_2, __pyx_v_distance) < 0)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_leaf2, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_leaf_distances, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_leaf1, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_t_2, __pyx_v_distance) < 0)) __PYX_ERR(0, 2486, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2482
 *         leaf_distances = {x.name: {} for x in leaves}
 * 
 *         for (leaf1, leaf2) in itertools.combinations(leaves, 2):             # <<<<<<<<<<<<<<
 *             # figure out the unique nodes in the path
 *             uniquenodes = paths[leaf1] ^ paths[leaf2]
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2488
 *             leaf_distances[leaf1.name][leaf2.name] = leaf_distances[leaf2.name][leaf1.name] = distance
 * 
 *         allleaves = sorted(leaf_distances.keys()) # the leaves in order that we will return             # <<<<<<<<<<<<<<
 * 
 *         output = [] # the two dimensional array that we will return
 */
  __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_leaf_distances); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_12 = PyList_Sort(__pyx_t_3); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2488, __pyx_L1_error)
  __pyx_v_allleaves = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2490
 *         allleaves = sorted(leaf_distances.keys()) # the leaves in order that we will return
 * 
 *         output = [] # the two dimensional array that we will return             # <<<<<<<<<<<<<<
 * 
 *         for i, n in enumerate(allleaves):
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_output = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2492
 *         output = [] # the two dimensional array that we will return
 * 
 *         for i, n in enumerate(allleaves):             # <<<<<<<<<<<<<<
 *             output.append([])
 *             for m in allleaves:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_6 = __pyx_v_allleaves; __Pyx_INCREF(__pyx_t_6); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2492, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2493
 * 
 *         for i, n in enumerate(allleaves):
 *             output.append([])             # <<<<<<<<<<<<<<
 *             for m in allleaves:
 *                 if m == n:
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_2); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2494
 *         for i, n in enumerate(allleaves):
 *             output.append([])
 *             for m in allleaves:             # <<<<<<<<<<<<<<
 *                 if m == n:
 *                     output[i].append(0) # distance to ourself = 0
 */
    if (unlikely(__pyx_v_allleaves == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 2494, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_allleaves; __Pyx_INCREF(__pyx_t_2); __pyx_t_13 = 0;
    for (;;) {
      if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2494, __pyx_L1_error)
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_m, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":2495
 *             output.append([])
 *             for m in allleaves:
 *                 if m == n:             # <<<<<<<<<<<<<<
 *                     output[i].append(0) # distance to ourself = 0
 *                 else:
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_m, __pyx_v_n, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2495, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2495, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_8) {

        /* "ete4/coretype/tree.pyx":2496
 *             for m in allleaves:
 *                 if m == n:
 *                     output[i].append(0) # distance to ourself = 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     output[i].append(leaf_distances[n][m])
 */
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_output, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2496, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_int_0); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2496, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "ete4/coretype/tree.pyx":2495
 *             output.append([])
 *             for m in allleaves:
 *                 if m == n:             # <<<<<<<<<<<<<<
 *                     output[i].append(0) # distance to ourself = 0
 *                 else:
 */
        goto __pyx_L28;
      }

      /* "ete4/coretype/tree.pyx":2498
 *                     output[i].append(0) # distance to ourself = 0
 *                 else:
 *                     output[i].append(leaf_distances[n][m])             # <<<<<<<<<<<<<<
 *         return output, allleaves
 * 
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_output, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_leaf_distances, __pyx_v_n); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_14 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_v_m); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_t_14); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2498, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __pyx_L28:;

      /* "ete4/coretype/tree.pyx":2494
 *         for i, n in enumerate(allleaves):
 *             output.append([])
 *             for m in allleaves:             # <<<<<<<<<<<<<<
 *                 if m == n:
 *                     output[i].append(0) # distance to ourself = 0
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":2492
 *         output = [] # the two dimensional array that we will return
 * 
 *         for i, n in enumerate(allleaves):             # <<<<<<<<<<<<<<
 *             output.append([])
 *             for m in allleaves:
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2499
 *                 else:
 *                     output[i].append(leaf_distances[n][m])
 *         return output, allleaves             # <<<<<<<<<<<<<<
 * 
 *     def add_face(self, face, column, position="branch-right", collapsed_only=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_output);
  __Pyx_INCREF(__pyx_v_allleaves);
  __Pyx_GIVEREF(__pyx_v_allleaves);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_allleaves);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2399
 *             _resolve(n)
 * 
 *     def cophenetic_matrix(self):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 3.1.1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.cophenetic_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_leaves);
  __Pyx_XDECREF(__pyx_v_paths);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_movingnode);
  __Pyx_XDECREF(__pyx_v_leaf_distances);
  __Pyx_XDECREF(__pyx_v_leaf1);
  __Pyx_XDECREF(__pyx_v_leaf2);
  __Pyx_XDECREF(__pyx_v_distance);
  __Pyx_XDECREF(__pyx_v_allleaves);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_x);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_x);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2501
 *         return output, allleaves
 * 
 *     def add_face(self, face, column, position="branch-right", collapsed_only=False):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_220add_face(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_219add_face[] = "\n        .. versionadded: 2.1\n\n        Add a fixed face to the node.  This type of faces will be\n        always attached to nodes, independently of the layout\n        function.\n\n        :argument face: a Face or inherited instance\n        :argument column: An integer number starting from 0\n        :argument \"branch-right\" position: Posible values are:\n          \"branch-right\", \"branch-top\", \"branch-bottom\", \"float\",\n          \"aligned\"\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_220add_face(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_face = 0;
  PyObject *__pyx_v_column = 0;
  PyObject *__pyx_v_position = 0;
  PyObject *__pyx_v_collapsed_only = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_face (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_face,&__pyx_n_s_column,&__pyx_n_s_position,&__pyx_n_s_collapsed_only,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_kp_s_branch_right);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_face", 0, 2, 4, 1); __PYX_ERR(0, 2501, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_position);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_collapsed_only);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_face") < 0)) __PYX_ERR(0, 2501, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_face = values[0];
    __pyx_v_column = values[1];
    __pyx_v_position = values[2];
    __pyx_v_collapsed_only = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_face", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2501, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_face", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_219add_face(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), __pyx_v_face, __pyx_v_column, __pyx_v_position, __pyx_v_collapsed_only);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_219add_face(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_face, PyObject *__pyx_v_column, PyObject *__pyx_v_position, PyObject *__pyx_v_collapsed_only) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_face", 0);

  /* "ete4/coretype/tree.pyx":2516
 *         """
 * 
 *         if position not in FACE_POSITIONS:             # <<<<<<<<<<<<<<
 *             raise ValueError("face position not in %s" %FACE_POSITIONS)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FACE_POSITIONS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_position, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "ete4/coretype/tree.pyx":2517
 * 
 *         if position not in FACE_POSITIONS:
 *             raise ValueError("face position not in %s" %FACE_POSITIONS)             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(face, Face) or isinstance(face, smartFace):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FACE_POSITIONS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_face_position_not_in_s, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2517, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2516
 *         """
 * 
 *         if position not in FACE_POSITIONS:             # <<<<<<<<<<<<<<
 *             raise ValueError("face position not in %s" %FACE_POSITIONS)
 * 
 */
  }

  /* "ete4/coretype/tree.pyx":2519
 *             raise ValueError("face position not in %s" %FACE_POSITIONS)
 * 
 *         if isinstance(face, Face) or isinstance(face, smartFace):             # <<<<<<<<<<<<<<
 *             if collapsed_only:
 *                 getattr(self._collapsed_faces, position).add_face(face, column=column)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Face); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_face, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 2519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_smartFace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_face, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 2519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (likely(__pyx_t_3)) {

    /* "ete4/coretype/tree.pyx":2520
 * 
 *         if isinstance(face, Face) or isinstance(face, smartFace):
 *             if collapsed_only:             # <<<<<<<<<<<<<<
 *                 getattr(self._collapsed_faces, position).add_face(face, column=column)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_collapsed_only); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2520, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "ete4/coretype/tree.pyx":2521
 *         if isinstance(face, Face) or isinstance(face, smartFace):
 *             if collapsed_only:
 *                 getattr(self._collapsed_faces, position).add_face(face, column=column)             # <<<<<<<<<<<<<<
 *             else:
 *                 getattr(self._faces, position).add_face(face, column=column)
 */
      __pyx_t_1 = __pyx_v_self->_collapsed_faces;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_position); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_add_face); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_face);
      __Pyx_GIVEREF(__pyx_v_face);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_face);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_column, __pyx_v_column) < 0) __PYX_ERR(0, 2521, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":2520
 * 
 *         if isinstance(face, Face) or isinstance(face, smartFace):
 *             if collapsed_only:             # <<<<<<<<<<<<<<
 *                 getattr(self._collapsed_faces, position).add_face(face, column=column)
 *             else:
 */
      goto __pyx_L7;
    }

    /* "ete4/coretype/tree.pyx":2523
 *                 getattr(self._collapsed_faces, position).add_face(face, column=column)
 *             else:
 *                 getattr(self._faces, position).add_face(face, column=column)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("not a Face instance")
 */
    /*else*/ {
      __pyx_t_7 = __pyx_v_self->_faces;
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_GetAttr(__pyx_t_7, __pyx_v_position); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_add_face); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_face);
      __Pyx_GIVEREF(__pyx_v_face);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_face);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_column, __pyx_v_column) < 0) __PYX_ERR(0, 2523, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2523, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "ete4/coretype/tree.pyx":2519
 *             raise ValueError("face position not in %s" %FACE_POSITIONS)
 * 
 *         if isinstance(face, Face) or isinstance(face, smartFace):             # <<<<<<<<<<<<<<
 *             if collapsed_only:
 *                 getattr(self._collapsed_faces, position).add_face(face, column=column)
 */
    goto __pyx_L4;
  }

  /* "ete4/coretype/tree.pyx":2525
 *                 getattr(self._faces, position).add_face(face, column=column)
 *         else:
 *             raise ValueError("not a Face instance")             # <<<<<<<<<<<<<<
 * 
 *     def set_style(self, node_style):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2525, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "ete4/coretype/tree.pyx":2501
 *         return output, allleaves
 * 
 *     def add_face(self, face, column, position="branch-right", collapsed_only=False):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.add_face", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2527
 *             raise ValueError("not a Face instance")
 * 
 *     def set_style(self, node_style):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_222set_style(PyObject *__pyx_v_self, PyObject *__pyx_v_node_style); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_221set_style[] = "\n        .. versionadded: 2.1\n\n        Set 'node_style' as the fixed style for the current node.\n        ";
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_222set_style(PyObject *__pyx_v_self, PyObject *__pyx_v_node_style) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_style (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_221set_style(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_node_style));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_221set_style(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_node_style) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_style", 0);
  __Pyx_INCREF(__pyx_v_node_style);

  /* "ete4/coretype/tree.pyx":2533
 *         Set 'node_style' as the fixed style for the current node.
 *         """
 *         if TREEVIEW:             # <<<<<<<<<<<<<<
 *             if node_style is None:
 *                 node_style = NodeStyle()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TREEVIEW); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "ete4/coretype/tree.pyx":2534
 *         """
 *         if TREEVIEW:
 *             if node_style is None:             # <<<<<<<<<<<<<<
 *                 node_style = NodeStyle()
 *             if type(node_style) is NodeStyle:
 */
    __pyx_t_2 = (__pyx_v_node_style == Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "ete4/coretype/tree.pyx":2535
 *         if TREEVIEW:
 *             if node_style is None:
 *                 node_style = NodeStyle()             # <<<<<<<<<<<<<<
 *             if type(node_style) is NodeStyle:
 *                 self._img_style = node_style
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_NodeStyle); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_node_style, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":2534
 *         """
 *         if TREEVIEW:
 *             if node_style is None:             # <<<<<<<<<<<<<<
 *                 node_style = NodeStyle()
 *             if type(node_style) is NodeStyle:
 */
    }

    /* "ete4/coretype/tree.pyx":2536
 *             if node_style is None:
 *                 node_style = NodeStyle()
 *             if type(node_style) is NodeStyle:             # <<<<<<<<<<<<<<
 *                 self._img_style = node_style
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeStyle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (((PyObject *)Py_TYPE(__pyx_v_node_style)) == __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "ete4/coretype/tree.pyx":2537
 *                 node_style = NodeStyle()
 *             if type(node_style) is NodeStyle:
 *                 self._img_style = node_style             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Treeview module is disabled")
 */
      __Pyx_INCREF(__pyx_v_node_style);
      __Pyx_GIVEREF(__pyx_v_node_style);
      __Pyx_GOTREF(__pyx_v_self->_img_style);
      __Pyx_DECREF(__pyx_v_self->_img_style);
      __pyx_v_self->_img_style = __pyx_v_node_style;

      /* "ete4/coretype/tree.pyx":2536
 *             if node_style is None:
 *                 node_style = NodeStyle()
 *             if type(node_style) is NodeStyle:             # <<<<<<<<<<<<<<
 *                 self._img_style = node_style
 *         else:
 */
    }

    /* "ete4/coretype/tree.pyx":2533
 *         Set 'node_style' as the fixed style for the current node.
 *         """
 *         if TREEVIEW:             # <<<<<<<<<<<<<<
 *             if node_style is None:
 *                 node_style = NodeStyle()
 */
    goto __pyx_L3;
  }

  /* "ete4/coretype/tree.pyx":2539
 *                 self._img_style = node_style
 *         else:
 *             raise ValueError("Treeview module is disabled")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2539, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "ete4/coretype/tree.pyx":2527
 *             raise ValueError("not a Face instance")
 * 
 *     def set_style(self, node_style):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.set_style", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_style);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2542
 * 
 *     @staticmethod
 *     def from_parent_child_table(parent_child_table):             # <<<<<<<<<<<<<<
 *         """Converts a parent-child table into an ETE Tree instance.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_224from_parent_child_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_223from_parent_child_table[] = "Converts a parent-child table into an ETE Tree instance.\n\n        :argument parent_child_table: a list of tuples containing parent-child\n           relationships. For example: [(\"A\", \"B\", 0.1), (\"A\", \"C\", 0.2), (\"C\",\n           \"D\", 1), (\"C\", \"E\", 1.5)]. Where each tuple represents: [parent, child,\n           child-parent-dist]\n\n        :returns: A new Tree instance\n\n        :example:\n\n        >>> tree = Tree.from_parent_child_table([(\"A\", \"B\", 0.1), (\"A\", \"C\", 0.2), (\"C\", \"D\", 1), (\"C\", \"E\", 1.5)])\n        >>> print tree\n\n        ";
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_224from_parent_child_table = {"from_parent_child_table", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_224from_parent_child_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_223from_parent_child_table};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_224from_parent_child_table(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parent_child_table = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_parent_child_table (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent_child_table,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parent_child_table)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_parent_child_table") < 0)) __PYX_ERR(0, 2542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_parent_child_table = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_parent_child_table", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_parent_child_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_223from_parent_child_table(__pyx_v_parent_child_table);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2560
 * 
 * 
 *         def get_node(nodename, dist=None):             # <<<<<<<<<<<<<<
 *             if nodename not in nodes_by_name:
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_1get_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_1get_node = {"get_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_1get_node, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_1get_node(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nodename = 0;
  PyObject *__pyx_v_dist = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodename,&__pyx_n_s_dist,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dist);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_node") < 0)) __PYX_ERR(0, 2560, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nodename = values[0];
    __pyx_v_dist = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_node", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2560, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_parent_child_table.get_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_get_node(__pyx_self, __pyx_v_nodename, __pyx_v_dist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_get_node(PyObject *__pyx_self, PyObject *__pyx_v_nodename, PyObject *__pyx_v_dist) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *__pyx_outer_scope;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_node", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ete4/coretype/tree.pyx":2561
 * 
 *         def get_node(nodename, dist=None):
 *             if nodename not in nodes_by_name:             # <<<<<<<<<<<<<<
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 *             node = nodes_by_name[nodename]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_nodes_by_name)) { __Pyx_RaiseClosureNameError("nodes_by_name"); __PYX_ERR(0, 2561, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_nodes_by_name == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2561, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_nodename, __pyx_cur_scope->__pyx_v_nodes_by_name, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "ete4/coretype/tree.pyx":2562
 *         def get_node(nodename, dist=None):
 *             if nodename not in nodes_by_name:
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)             # <<<<<<<<<<<<<<
 *             node = nodes_by_name[nodename]
 *             if dist is not None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Tree); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_name, __pyx_v_nodename) < 0) __PYX_ERR(0, 2562, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dist, __pyx_v_dist) < 0) __PYX_ERR(0, 2562, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_nodes_by_name)) { __Pyx_RaiseClosureNameError("nodes_by_name"); __PYX_ERR(0, 2562, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_nodes_by_name == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2562, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_nodes_by_name, __pyx_v_nodename, __pyx_t_5) < 0)) __PYX_ERR(0, 2562, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "ete4/coretype/tree.pyx":2561
 * 
 *         def get_node(nodename, dist=None):
 *             if nodename not in nodes_by_name:             # <<<<<<<<<<<<<<
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 *             node = nodes_by_name[nodename]
 */
  }

  /* "ete4/coretype/tree.pyx":2563
 *             if nodename not in nodes_by_name:
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 *             node = nodes_by_name[nodename]             # <<<<<<<<<<<<<<
 *             if dist is not None:
 *                 node.dist = dist
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_nodes_by_name)) { __Pyx_RaiseClosureNameError("nodes_by_name"); __PYX_ERR(0, 2563, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_nodes_by_name == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2563, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_nodes_by_name, __pyx_v_nodename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_node = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "ete4/coretype/tree.pyx":2564
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 *             node = nodes_by_name[nodename]
 *             if dist is not None:             # <<<<<<<<<<<<<<
 *                 node.dist = dist
 *             node.name = nodename
 */
  __pyx_t_2 = (__pyx_v_dist != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "ete4/coretype/tree.pyx":2565
 *             node = nodes_by_name[nodename]
 *             if dist is not None:
 *                 node.dist = dist             # <<<<<<<<<<<<<<
 *             node.name = nodename
 *             return nodes_by_name[nodename]
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_dist, __pyx_v_dist) < 0) __PYX_ERR(0, 2565, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2564
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 *             node = nodes_by_name[nodename]
 *             if dist is not None:             # <<<<<<<<<<<<<<
 *                 node.dist = dist
 *             node.name = nodename
 */
  }

  /* "ete4/coretype/tree.pyx":2566
 *             if dist is not None:
 *                 node.dist = dist
 *             node.name = nodename             # <<<<<<<<<<<<<<
 *             return nodes_by_name[nodename]
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_node, __pyx_n_s_name, __pyx_v_nodename) < 0) __PYX_ERR(0, 2566, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2567
 *                 node.dist = dist
 *             node.name = nodename
 *             return nodes_by_name[nodename]             # <<<<<<<<<<<<<<
 * 
 *         nodes_by_name = {}
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_nodes_by_name)) { __Pyx_RaiseClosureNameError("nodes_by_name"); __PYX_ERR(0, 2567, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_nodes_by_name == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2567, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_nodes_by_name, __pyx_v_nodename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2560
 * 
 * 
 *         def get_node(nodename, dist=None):             # <<<<<<<<<<<<<<
 *             if nodename not in nodes_by_name:
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_parent_child_table.get_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2542
 * 
 *     @staticmethod
 *     def from_parent_child_table(parent_child_table):             # <<<<<<<<<<<<<<
 *         """Converts a parent-child table into an ETE Tree instance.
 * 
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_223from_parent_child_table(PyObject *__pyx_v_parent_child_table) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *__pyx_cur_scope;
  PyObject *__pyx_v_get_node = 0;
  PyObject *__pyx_v_columns = NULL;
  PyObject *__pyx_v_parent_name = NULL;
  PyObject *__pyx_v_child_name = NULL;
  PyObject *__pyx_v_distance = NULL;
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_v_parent = NULL;
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_parent_child_table", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2542, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "ete4/coretype/tree.pyx":2560
 * 
 * 
 *         def get_node(nodename, dist=None):             # <<<<<<<<<<<<<<
 *             if nodename not in nodes_by_name:
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_23from_parent_child_table_1get_node, 0, __pyx_n_s_from_parent_child_table_locals_g, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__41);
  __pyx_v_get_node = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2569
 *             return nodes_by_name[nodename]
 * 
 *         nodes_by_name = {}             # <<<<<<<<<<<<<<
 *         for columns in parent_child_table:
 *             if len(columns) == 3:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_nodes_by_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2570
 * 
 *         nodes_by_name = {}
 *         for columns in parent_child_table:             # <<<<<<<<<<<<<<
 *             if len(columns) == 3:
 *                 parent_name, child_name, distance = columns
 */
  if (likely(PyList_CheckExact(__pyx_v_parent_child_table)) || PyTuple_CheckExact(__pyx_v_parent_child_table)) {
    __pyx_t_1 = __pyx_v_parent_child_table; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parent_child_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2570, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2570, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 2570, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2570, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_columns, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2571
 *         nodes_by_name = {}
 *         for columns in parent_child_table:
 *             if len(columns) == 3:             # <<<<<<<<<<<<<<
 *                 parent_name, child_name, distance = columns
 *                 dist = float(distance)
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_columns); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2571, __pyx_L1_error)
    __pyx_t_6 = ((__pyx_t_5 == 3) != 0);
    if (__pyx_t_6) {

      /* "ete4/coretype/tree.pyx":2572
 *         for columns in parent_child_table:
 *             if len(columns) == 3:
 *                 parent_name, child_name, distance = columns             # <<<<<<<<<<<<<<
 *                 dist = float(distance)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_columns))) || (PyList_CheckExact(__pyx_v_columns))) {
        PyObject* sequence = __pyx_v_columns;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 2572, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_v_columns); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 2; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 3) < 0) __PYX_ERR(0, 2572, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 2572, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_parent_name, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_child_name, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_distance, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":2573
 *             if len(columns) == 3:
 *                 parent_name, child_name, distance = columns
 *                 dist = float(distance)             # <<<<<<<<<<<<<<
 *             else:
 *                 parent_name, child_name = columns
 */
      __pyx_t_8 = __Pyx_PyNumber_Float(__pyx_v_distance); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_dist, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "ete4/coretype/tree.pyx":2571
 *         nodes_by_name = {}
 *         for columns in parent_child_table:
 *             if len(columns) == 3:             # <<<<<<<<<<<<<<
 *                 parent_name, child_name, distance = columns
 *                 dist = float(distance)
 */
      goto __pyx_L5;
    }

    /* "ete4/coretype/tree.pyx":2575
 *                 dist = float(distance)
 *             else:
 *                 parent_name, child_name = columns             # <<<<<<<<<<<<<<
 *                 dist = None
 *             parent = get_node(parent_name)
 */
    /*else*/ {
      if ((likely(PyTuple_CheckExact(__pyx_v_columns))) || (PyList_CheckExact(__pyx_v_columns))) {
        PyObject* sequence = __pyx_v_columns;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 2575, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_v_columns); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_8 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_8)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_4), 2) < 0) __PYX_ERR(0, 2575, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 2575, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_parent_name, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_child_name, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "ete4/coretype/tree.pyx":2576
 *             else:
 *                 parent_name, child_name = columns
 *                 dist = None             # <<<<<<<<<<<<<<
 *             parent = get_node(parent_name)
 *             parent.add_child(get_node(child_name, dist=dist))
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_dist, Py_None);
    }
    __pyx_L5:;

    /* "ete4/coretype/tree.pyx":2577
 *                 parent_name, child_name = columns
 *                 dist = None
 *             parent = get_node(parent_name)             # <<<<<<<<<<<<<<
 *             parent.add_child(get_node(child_name, dist=dist))
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_v_get_node, __pyx_v_parent_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_parent, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":2578
 *                 dist = None
 *             parent = get_node(parent_name)
 *             parent.add_child(get_node(child_name, dist=dist))             # <<<<<<<<<<<<<<
 * 
 *         root = parent.get_tree_root()
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_add_child); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_child_name);
    __Pyx_GIVEREF(__pyx_v_child_name);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_child_name);
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dist, __pyx_v_dist) < 0) __PYX_ERR(0, 2578, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_v_get_node, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "ete4/coretype/tree.pyx":2570
 * 
 *         nodes_by_name = {}
 *         for columns in parent_child_table:             # <<<<<<<<<<<<<<
 *             if len(columns) == 3:
 *                 parent_name, child_name, distance = columns
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2580
 *             parent.add_child(get_node(child_name, dist=dist))
 * 
 *         root = parent.get_tree_root()             # <<<<<<<<<<<<<<
 *         return root
 * 
 */
  if (unlikely(!__pyx_v_parent)) { __Pyx_RaiseUnboundLocalError("parent"); __PYX_ERR(0, 2580, __pyx_L1_error) }
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_parent, __pyx_n_s_get_tree_root); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_root = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2581
 * 
 *         root = parent.get_tree_root()
 *         return root             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_root);
  __pyx_r = __pyx_v_root;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2542
 * 
 *     @staticmethod
 *     def from_parent_child_table(parent_child_table):             # <<<<<<<<<<<<<<
 *         """Converts a parent-child table into an ETE Tree instance.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_parent_child_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_get_node);
  __Pyx_XDECREF(__pyx_v_columns);
  __Pyx_XDECREF(__pyx_v_parent_name);
  __Pyx_XDECREF(__pyx_v_child_name);
  __Pyx_XDECREF(__pyx_v_distance);
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2584
 * 
 *     @staticmethod
 *     def from_skbio(skbio_tree, map_attributes=None):             # <<<<<<<<<<<<<<
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_226from_skbio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4ete4_8coretype_4tree_8TreeNode_225from_skbio[] = "Converts a scikit-bio TreeNode object into ETE Tree object.\n\n        :argument skbio_tree: a scikit bio TreeNode instance\n\n        :argument None map_attributes: A list of attribute nanes in the\n           scikit-bio tree that should be mapped into the ETE tree\n           instance. (name, id and branch length are always mapped)\n\n        :returns: A new Tree instance\n\n        :example:\n\n        >>> tree = Tree.from_skibio(skbioTree, map_attributes=[\"value\"])\n\n        ";
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_226from_skbio = {"from_skbio", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_226from_skbio, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_225from_skbio};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_226from_skbio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_skbio_tree = 0;
  PyObject *__pyx_v_map_attributes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_skbio (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_skbio_tree,&__pyx_n_s_map_attributes,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_skbio_tree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_map_attributes);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_skbio") < 0)) __PYX_ERR(0, 2584, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_skbio_tree = values[0];
    __pyx_v_map_attributes = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_skbio", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2584, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_skbio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_225from_skbio(__pyx_v_skbio_tree, __pyx_v_map_attributes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2602
 *         from skbio import TreeNode as skbioTreeNode
 * 
 *         def get_ete_node(skbio_node):             # <<<<<<<<<<<<<<
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10from_skbio_1get_ete_node(PyObject *__pyx_self, PyObject *__pyx_v_skbio_node); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_8TreeNode_10from_skbio_1get_ete_node = {"get_ete_node", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10from_skbio_1get_ete_node, METH_O, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10from_skbio_1get_ete_node(PyObject *__pyx_self, PyObject *__pyx_v_skbio_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ete_node (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10from_skbio_get_ete_node(__pyx_self, ((PyObject *)__pyx_v_skbio_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10from_skbio_get_ete_node(PyObject *__pyx_self, PyObject *__pyx_v_skbio_node) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *__pyx_cur_scope;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *__pyx_outer_scope;
  PyObject *__pyx_v_ete_node = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ete_node", 0);
  __pyx_outer_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "ete4/coretype/tree.pyx":2603
 * 
 *         def get_ete_node(skbio_node):
 *             ete_node = all_nodes.get(skbio_node, Tree())             # <<<<<<<<<<<<<<
 *             if skbio_node.props.get('length') is not None:
 *                 ete_node.dist = float(skbio_node.props.get('length'))
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_all_nodes)) { __Pyx_RaiseClosureNameError("all_nodes"); __PYX_ERR(0, 2603, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_all_nodes == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 2603, __pyx_L1_error)
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_all_nodes, __pyx_v_skbio_node, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ete_node = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2604
 *         def get_ete_node(skbio_node):
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:             # <<<<<<<<<<<<<<
 *                 ete_node.dist = float(skbio_node.props.get('length'))
 *             ete_node.name = skbio_node.name
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_skbio_node, __pyx_n_s_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_n_s_length) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_length);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":2605
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:
 *                 ete_node.dist = float(skbio_node.props.get('length'))             # <<<<<<<<<<<<<<
 *             ete_node.name = skbio_node.name
 *             ete_node.add_props(id=skbio_node.props.get('id'))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_skbio_node, __pyx_n_s_props); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_n_s_length) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_s_length);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_ete_node, __pyx_n_s_dist, __pyx_t_1) < 0) __PYX_ERR(0, 2605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2604
 *         def get_ete_node(skbio_node):
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:             # <<<<<<<<<<<<<<
 *                 ete_node.dist = float(skbio_node.props.get('length'))
 *             ete_node.name = skbio_node.name
 */
  }

  /* "ete4/coretype/tree.pyx":2606
 *             if skbio_node.props.get('length') is not None:
 *                 ete_node.dist = float(skbio_node.props.get('length'))
 *             ete_node.name = skbio_node.name             # <<<<<<<<<<<<<<
 *             ete_node.add_props(id=skbio_node.props.get('id'))
 *             if map_attributes:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_skbio_node, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_ete_node, __pyx_n_s_name, __pyx_t_1) < 0) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":2607
 *                 ete_node.dist = float(skbio_node.props.get('length'))
 *             ete_node.name = skbio_node.name
 *             ete_node.add_props(id=skbio_node.props.get('id'))             # <<<<<<<<<<<<<<
 *             if map_attributes:
 *                 for a in map_attributes:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_node, __pyx_n_s_add_props); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_skbio_node, __pyx_n_s_props); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_n_s_id) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_s_id);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_id, __pyx_t_3) < 0) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "ete4/coretype/tree.pyx":2608
 *             ete_node.name = skbio_node.name
 *             ete_node.add_props(id=skbio_node.props.get('id'))
 *             if map_attributes:             # <<<<<<<<<<<<<<
 *                 for a in map_attributes:
 *                     ete_node.add_prop(a, skbio_node.props.get(a))
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_map_attributes)) { __Pyx_RaiseClosureNameError("map_attributes"); __PYX_ERR(0, 2608, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_map_attributes); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2608, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "ete4/coretype/tree.pyx":2609
 *             ete_node.add_props(id=skbio_node.props.get('id'))
 *             if map_attributes:
 *                 for a in map_attributes:             # <<<<<<<<<<<<<<
 *                     ete_node.add_prop(a, skbio_node.props.get(a))
 *             return ete_node
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_map_attributes)) { __Pyx_RaiseClosureNameError("map_attributes"); __PYX_ERR(0, 2609, __pyx_L1_error) }
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_map_attributes)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_map_attributes)) {
      __pyx_t_3 = __pyx_cur_scope->__pyx_v_map_attributes; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_map_attributes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2609, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2609, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2609, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2609, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2609, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2609, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ete4/coretype/tree.pyx":2610
 *             if map_attributes:
 *                 for a in map_attributes:
 *                     ete_node.add_prop(a, skbio_node.props.get(a))             # <<<<<<<<<<<<<<
 *             return ete_node
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_node, __pyx_n_s_add_prop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_skbio_node, __pyx_n_s_props); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_6, __pyx_v_a) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_a);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_a, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2610, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_a, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2610, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_INCREF(__pyx_v_a);
        __Pyx_GIVEREF(__pyx_v_a);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_11, __pyx_v_a);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_11, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ete4/coretype/tree.pyx":2609
 *             ete_node.add_props(id=skbio_node.props.get('id'))
 *             if map_attributes:
 *                 for a in map_attributes:             # <<<<<<<<<<<<<<
 *                     ete_node.add_prop(a, skbio_node.props.get(a))
 *             return ete_node
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "ete4/coretype/tree.pyx":2608
 *             ete_node.name = skbio_node.name
 *             ete_node.add_props(id=skbio_node.props.get('id'))
 *             if map_attributes:             # <<<<<<<<<<<<<<
 *                 for a in map_attributes:
 *                     ete_node.add_prop(a, skbio_node.props.get(a))
 */
  }

  /* "ete4/coretype/tree.pyx":2611
 *                 for a in map_attributes:
 *                     ete_node.add_prop(a, skbio_node.props.get(a))
 *             return ete_node             # <<<<<<<<<<<<<<
 * 
 *         all_nodes = {}
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ete_node);
  __pyx_r = __pyx_v_ete_node;
  goto __pyx_L0;

  /* "ete4/coretype/tree.pyx":2602
 *         from skbio import TreeNode as skbioTreeNode
 * 
 *         def get_ete_node(skbio_node):             # <<<<<<<<<<<<<<
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_skbio.get_ete_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ete_node);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2584
 * 
 *     @staticmethod
 *     def from_skbio(skbio_tree, map_attributes=None):             # <<<<<<<<<<<<<<
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 * 
 */

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_225from_skbio(PyObject *__pyx_v_skbio_tree, PyObject *__pyx_v_map_attributes) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *__pyx_cur_scope;
  PyObject *__pyx_v_skbioTreeNode = NULL;
  PyObject *__pyx_v_get_ete_node = 0;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_ete_node = NULL;
  PyObject *__pyx_v_ch = NULL;
  PyObject *__pyx_v_ete_ch = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_skbio", 0);
  __pyx_cur_scope = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *)__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio(__pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2584, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_map_attributes = __pyx_v_map_attributes;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_map_attributes);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_map_attributes);

  /* "ete4/coretype/tree.pyx":2600
 * 
 *         """
 *         from skbio import TreeNode as skbioTreeNode             # <<<<<<<<<<<<<<
 * 
 *         def get_ete_node(skbio_node):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_TreeNode);
  __Pyx_GIVEREF(__pyx_n_s_TreeNode);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TreeNode);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_skbio, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TreeNode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_skbioTreeNode = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2602
 *         from skbio import TreeNode as skbioTreeNode
 * 
 *         def get_ete_node(skbio_node):             # <<<<<<<<<<<<<<
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_10from_skbio_1get_ete_node, 0, __pyx_n_s_from_skbio_locals_get_ete_node, ((PyObject*)__pyx_cur_scope), __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_get_ete_node = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2613
 *             return ete_node
 * 
 *         all_nodes = {}             # <<<<<<<<<<<<<<
 *         if isinstance(skbio_tree, skbioTreeNode):
 *             for node in skbio_tree.preorder(include_self=True):
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_all_nodes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2614
 * 
 *         all_nodes = {}
 *         if isinstance(skbio_tree, skbioTreeNode):             # <<<<<<<<<<<<<<
 *             for node in skbio_tree.preorder(include_self=True):
 *                 all_nodes[node] = get_ete_node(node)
 */
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_skbio_tree, __pyx_v_skbioTreeNode); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 2614, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "ete4/coretype/tree.pyx":2615
 *         all_nodes = {}
 *         if isinstance(skbio_tree, skbioTreeNode):
 *             for node in skbio_tree.preorder(include_self=True):             # <<<<<<<<<<<<<<
 *                 all_nodes[node] = get_ete_node(node)
 *                 ete_node = all_nodes[node]
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_skbio_tree, __pyx_n_s_preorder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_include_self, Py_True) < 0) __PYX_ERR(0, 2615, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2615, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2615, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2615, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2615, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2615, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2615, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":2616
 *         if isinstance(skbio_tree, skbioTreeNode):
 *             for node in skbio_tree.preorder(include_self=True):
 *                 all_nodes[node] = get_ete_node(node)             # <<<<<<<<<<<<<<
 *                 ete_node = all_nodes[node]
 *                 for ch in node.children:
 */
      __pyx_t_5 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10from_skbio_get_ete_node(__pyx_v_get_ete_node, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_all_nodes, __pyx_v_node, __pyx_t_5) < 0)) __PYX_ERR(0, 2616, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":2617
 *             for node in skbio_tree.preorder(include_self=True):
 *                 all_nodes[node] = get_ete_node(node)
 *                 ete_node = all_nodes[node]             # <<<<<<<<<<<<<<
 *                 for ch in node.children:
 *                     ete_ch = get_ete_node(ch)
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_all_nodes, __pyx_v_node); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_ete_node, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "ete4/coretype/tree.pyx":2618
 *                 all_nodes[node] = get_ete_node(node)
 *                 ete_node = all_nodes[node]
 *                 for ch in node.children:             # <<<<<<<<<<<<<<
 *                     ete_ch = get_ete_node(ch)
 *                     ete_node.add_child(ete_ch)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2618, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2618, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2618, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 2618, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2618, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_ch, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "ete4/coretype/tree.pyx":2619
 *                 ete_node = all_nodes[node]
 *                 for ch in node.children:
 *                     ete_ch = get_ete_node(ch)             # <<<<<<<<<<<<<<
 *                     ete_node.add_child(ete_ch)
 *                     all_nodes[ch] = ete_ch
 */
        __pyx_t_5 = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10from_skbio_get_ete_node(__pyx_v_get_ete_node, __pyx_v_ch); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2619, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_ete_ch, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "ete4/coretype/tree.pyx":2620
 *                 for ch in node.children:
 *                     ete_ch = get_ete_node(ch)
 *                     ete_node.add_child(ete_ch)             # <<<<<<<<<<<<<<
 *                     all_nodes[ch] = ete_ch
 *             return ete_ch.get_tree_root()
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_node, __pyx_n_s_add_child); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_5 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_v_ete_ch) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_ete_ch);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "ete4/coretype/tree.pyx":2621
 *                     ete_ch = get_ete_node(ch)
 *                     ete_node.add_child(ete_ch)
 *                     all_nodes[ch] = ete_ch             # <<<<<<<<<<<<<<
 *             return ete_ch.get_tree_root()
 * 
 */
        if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_all_nodes, __pyx_v_ch, __pyx_v_ete_ch) < 0)) __PYX_ERR(0, 2621, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":2618
 *                 all_nodes[node] = get_ete_node(node)
 *                 ete_node = all_nodes[node]
 *                 for ch in node.children:             # <<<<<<<<<<<<<<
 *                     ete_ch = get_ete_node(ch)
 *                     ete_node.add_child(ete_ch)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ete4/coretype/tree.pyx":2615
 *         all_nodes = {}
 *         if isinstance(skbio_tree, skbioTreeNode):
 *             for node in skbio_tree.preorder(include_self=True):             # <<<<<<<<<<<<<<
 *                 all_nodes[node] = get_ete_node(node)
 *                 ete_node = all_nodes[node]
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2622
 *                     ete_node.add_child(ete_ch)
 *                     all_nodes[ch] = ete_ch
 *             return ete_ch.get_tree_root()             # <<<<<<<<<<<<<<
 * 
 *     def phonehome(self):
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(!__pyx_v_ete_ch)) { __Pyx_RaiseUnboundLocalError("ete_ch"); __PYX_ERR(0, 2622, __pyx_L1_error) }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ete_ch, __pyx_n_s_get_tree_root); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":2614
 * 
 *         all_nodes = {}
 *         if isinstance(skbio_tree, skbioTreeNode):             # <<<<<<<<<<<<<<
 *             for node in skbio_tree.preorder(include_self=True):
 *                 all_nodes[node] = get_ete_node(node)
 */
  }

  /* "ete4/coretype/tree.pyx":2584
 * 
 *     @staticmethod
 *     def from_skbio(skbio_tree, map_attributes=None):             # <<<<<<<<<<<<<<
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.from_skbio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_skbioTreeNode);
  __Pyx_XDECREF(__pyx_v_get_ete_node);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_ete_node);
  __Pyx_XDECREF(__pyx_v_ch);
  __Pyx_XDECREF(__pyx_v_ete_ch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2624
 *             return ete_ch.get_tree_root()
 * 
 *     def phonehome(self):             # <<<<<<<<<<<<<<
 *         from .. import _ph
 *         _ph.call()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_228phonehome(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_228phonehome(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("phonehome (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_227phonehome(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_227phonehome(CYTHON_UNUSED struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v__ph = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("phonehome", 0);

  /* "ete4/coretype/tree.pyx":2625
 * 
 *     def phonehome(self):
 *         from .. import _ph             # <<<<<<<<<<<<<<
 *         _ph.call()
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ph);
  __Pyx_GIVEREF(__pyx_n_s_ph);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ph);
  __pyx_t_2 = __Pyx_Import(__pyx_kp_s_, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v__ph = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2626
 *     def phonehome(self):
 *         from .. import _ph
 *         _ph.call()             # <<<<<<<<<<<<<<
 * 
 * def _translate_nodes(root, *nodes):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v__ph, __pyx_n_s_call); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2624
 *             return ete_ch.get_tree_root()
 * 
 *     def phonehome(self):             # <<<<<<<<<<<<<<
 *         from .. import _ph
 *         _ph.call()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.phonehome", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__ph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":82
 * 
 * cdef class TreeNode(object):
 *     cdef public dict _properties             # <<<<<<<<<<<<<<
 *     cdef public set features
 *     cdef public list _children
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_properties);
  __pyx_r = __pyx_v_self->_properties;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_properties);
  __Pyx_DECREF(__pyx_v_self->_properties);
  __pyx_v_self->_properties = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._properties.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_11_properties_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_properties);
  __Pyx_DECREF(__pyx_v_self->_properties);
  __pyx_v_self->_properties = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":83
 * cdef class TreeNode(object):
 *     cdef public dict _properties
 *     cdef public set features             # <<<<<<<<<<<<<<
 *     cdef public list _children
 *     cdef public object _up
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->features);
  __pyx_r = __pyx_v_self->features;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PySet_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->features);
  __Pyx_DECREF(__pyx_v_self->features);
  __pyx_v_self->features = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.features.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_8features_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->features);
  __Pyx_DECREF(__pyx_v_self->features);
  __pyx_v_self->features = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":84
 *     cdef public dict _properties
 *     cdef public set features
 *     cdef public list _children             # <<<<<<<<<<<<<<
 *     cdef public object _up
 *     cdef public object _img_style
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_children);
  __pyx_r = __pyx_v_self->_children;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_children);
  __Pyx_DECREF(__pyx_v_self->_children);
  __pyx_v_self->_children = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._children.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_9_children_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_children);
  __Pyx_DECREF(__pyx_v_self->_children);
  __pyx_v_self->_children = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":85
 *     cdef public set features
 *     cdef public list _children
 *     cdef public object _up             # <<<<<<<<<<<<<<
 *     cdef public object _img_style
 *     cdef public object _faces
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_up);
  __pyx_r = __pyx_v_self->_up;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_up);
  __Pyx_DECREF(__pyx_v_self->_up);
  __pyx_v_self->_up = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_3_up_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_up);
  __Pyx_DECREF(__pyx_v_self->_up);
  __pyx_v_self->_up = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":86
 *     cdef public list _children
 *     cdef public object _up
 *     cdef public object _img_style             # <<<<<<<<<<<<<<
 *     cdef public object _faces
 *     cdef public object _collapsed_faces
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_img_style);
  __pyx_r = __pyx_v_self->_img_style;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_img_style);
  __Pyx_DECREF(__pyx_v_self->_img_style);
  __pyx_v_self->_img_style = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_img_style_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_img_style);
  __Pyx_DECREF(__pyx_v_self->_img_style);
  __pyx_v_self->_img_style = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":87
 *     cdef public object _up
 *     cdef public object _img_style
 *     cdef public object _faces             # <<<<<<<<<<<<<<
 *     cdef public object _collapsed_faces
 *     cdef public int _initialized
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_faces);
  __pyx_r = __pyx_v_self->_faces;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_faces);
  __Pyx_DECREF(__pyx_v_self->_faces);
  __pyx_v_self->_faces = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_6_faces_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_faces);
  __Pyx_DECREF(__pyx_v_self->_faces);
  __pyx_v_self->_faces = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":88
 *     cdef public object _img_style
 *     cdef public object _faces
 *     cdef public object _collapsed_faces             # <<<<<<<<<<<<<<
 *     cdef public int _initialized
 *     cdef public int _collapsed
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_collapsed_faces);
  __pyx_r = __pyx_v_self->_collapsed_faces;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_collapsed_faces);
  __Pyx_DECREF(__pyx_v_self->_collapsed_faces);
  __pyx_v_self->_collapsed_faces = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_4__del__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_4__del__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_collapsed_faces);
  __Pyx_DECREF(__pyx_v_self->_collapsed_faces);
  __pyx_v_self->_collapsed_faces = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":89
 *     cdef public object _faces
 *     cdef public object _collapsed_faces
 *     cdef public int _initialized             # <<<<<<<<<<<<<<
 *     cdef public int _collapsed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_12_initialized_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_12_initialized_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_initialized___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_initialized___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._initialized.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_12_initialized_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_12_initialized_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_initialized_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_12_initialized_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_v_self->_initialized = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._initialized.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":90
 *     cdef public object _collapsed_faces
 *     cdef public int _initialized
 *     cdef public int _collapsed             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_collapsed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_collapsed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_collapsed___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_collapsed___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_collapsed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._collapsed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_collapsed_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_collapsed_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_collapsed_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_10_collapsed_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_self->_collapsed = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode._collapsed.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":94
 * 
 * 
 *     cdef public (double, double) size             # <<<<<<<<<<<<<<
 *     cdef public double d1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_4size___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_4size___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert__to_py___pyx_ctuple_double__and_double(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_4size_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_4size_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_ctuple_double__and_double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert__from_py___pyx_ctuple_double__and_double(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_v_self->size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":95
 * 
 *     cdef public (double, double) size
 *     cdef public double d1             # <<<<<<<<<<<<<<
 * 
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_2d1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_2d1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_2d1___get__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_2d1___get__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->d1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.d1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_2d1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4ete4_8coretype_4tree_8TreeNode_2d1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_2d1_2__set__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4ete4_8coretype_4tree_8TreeNode_2d1_2__set__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
  __pyx_v_self->d1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.d1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_230__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_230__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_229__reduce_cython__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_229__reduce_cython__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._children, self._collapsed, self._collapsed_faces, self._faces, self._img_style, self._initialized, self._properties, self._up, self.d1, self.features, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_collapsed); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_initialized); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->d1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert__to_py___pyx_ctuple_double__and_double(__pyx_v_self->size); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(11); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->_children);
  __Pyx_GIVEREF(__pyx_v_self->_children);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->_children);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->_collapsed_faces);
  __Pyx_GIVEREF(__pyx_v_self->_collapsed_faces);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_self->_collapsed_faces);
  __Pyx_INCREF(__pyx_v_self->_faces);
  __Pyx_GIVEREF(__pyx_v_self->_faces);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_self->_faces);
  __Pyx_INCREF(__pyx_v_self->_img_style);
  __Pyx_GIVEREF(__pyx_v_self->_img_style);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_self->_img_style);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_properties);
  __Pyx_GIVEREF(__pyx_v_self->_properties);
  PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_v_self->_properties);
  __Pyx_INCREF(__pyx_v_self->_up);
  __Pyx_GIVEREF(__pyx_v_self->_up);
  PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_v_self->_up);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 8, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->features);
  __Pyx_GIVEREF(__pyx_v_self->features);
  PyTuple_SET_ITEM(__pyx_t_5, 9, __pyx_v_self->features);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 10, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._children, self._collapsed, self._collapsed_faces, self._faces, self._img_style, self._initialized, self._properties, self._up, self.d1, self.features, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self._children, self._collapsed, self._collapsed_faces, self._faces, self._img_style, self._initialized, self._properties, self._up, self.d1, self.features, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._children is not None or self._collapsed_faces is not None or self._faces is not None or self._img_style is not None or self._properties is not None or self._up is not None or self.features is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._children, self._collapsed, self._collapsed_faces, self._faces, self._img_style, self._initialized, self._properties, self._up, self.d1, self.features, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._children is not None or self._collapsed_faces is not None or self._faces is not None or self._img_style is not None or self._properties is not None or self._up is not None or self.features is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, None), state
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->_children != ((PyObject*)Py_None));
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->_collapsed_faces != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->_faces != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->_img_style != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->_properties != ((PyObject*)Py_None));
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->_up != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->features != ((PyObject*)Py_None));
    __pyx_t_8 = (__pyx_t_6 != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_7;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._children is not None or self._collapsed_faces is not None or self._faces is not None or self._img_style is not None or self._properties is not None or self._up is not None or self.features is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, None), state
 *     else:
 */
  __pyx_t_7 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":13
 *         use_setstate = self._children is not None or self._collapsed_faces is not None or self._faces is not None or self._img_style is not None or self._properties is not None or self._up is not None or self.features is not None
 *     if use_setstate:
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_TreeNode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_126217679);
    __Pyx_GIVEREF(__pyx_int_126217679);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_126217679);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._children is not None or self._collapsed_faces is not None or self._faces is not None or self._img_style is not None or self._properties is not None or self._up is not None or self.features is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, None), state
 *     else:
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TreeNode__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_TreeNode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_126217679);
    __Pyx_GIVEREF(__pyx_int_126217679);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_126217679);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TreeNode__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_232__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4ete4_8coretype_4tree_8TreeNode_232__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_8TreeNode_231__setstate_cython__(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_8TreeNode_231__setstate_cython__(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TreeNode__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4ete4_8coretype_4tree___pyx_unpickle_TreeNode__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TreeNode, (type(self), 0x785edcf, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TreeNode__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ete4.coretype.tree.TreeNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ete4/coretype/tree.pyx":2628
 *         _ph.call()
 * 
 * def _translate_nodes(root, *nodes):             # <<<<<<<<<<<<<<
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_1_translate_nodes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_1_translate_nodes = {"_translate_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_1_translate_nodes, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_1_translate_nodes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root = 0;
  PyObject *__pyx_v_nodes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_translate_nodes (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_nodes = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_nodes)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_nodes);
  } else {
    __pyx_v_nodes = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_root)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "_translate_nodes") < 0)) __PYX_ERR(0, 2628, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_root = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_translate_nodes", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2628, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_nodes); __pyx_v_nodes = 0;
  __Pyx_AddTraceback("ete4.coretype.tree._translate_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree__translate_nodes(__pyx_self, __pyx_v_root, __pyx_v_nodes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree__translate_nodes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_nodes) {
  PyObject *__pyx_v_name2node = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_notfound = NULL;
  PyObject *__pyx_v_valid_nodes = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_translate_nodes", 0);

  /* "ete4/coretype/tree.pyx":2629
 * 
 * def _translate_nodes(root, *nodes):
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])             # <<<<<<<<<<<<<<
 *     if name2node:
 *         for n in root.traverse():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2629, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_n)) == ((PyObject *)(&PyString_Type)));
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {
      __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_n);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_4, 1, Py_None);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 2629, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_name2node = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2630
 * def _translate_nodes(root, *nodes):
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:             # <<<<<<<<<<<<<<
 *         for n in root.traverse():
 *             if n.name in name2node:
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_name2node); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2630, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "ete4/coretype/tree.pyx":2631
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:
 *         for n in root.traverse():             # <<<<<<<<<<<<<<
 *             if n.name in name2node:
 *                 if name2node[n.name] is not None:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_root, __pyx_n_s_traverse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2631, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2631, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2631, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2631, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2631, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2631, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "ete4/coretype/tree.pyx":2632
 *     if name2node:
 *         for n in root.traverse():
 *             if n.name in name2node:             # <<<<<<<<<<<<<<
 *                 if name2node[n.name] is not None:
 *                     raise TreeError("Ambiguous node name: "+str(n.name))
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = (__Pyx_PyDict_ContainsTF(__pyx_t_2, __pyx_v_name2node, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2632, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "ete4/coretype/tree.pyx":2633
 *         for n in root.traverse():
 *             if n.name in name2node:
 *                 if name2node[n.name] is not None:             # <<<<<<<<<<<<<<
 *                     raise TreeError("Ambiguous node name: "+str(n.name))
 *                 else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_name2node, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = (__pyx_t_4 != Py_None);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_6 = (__pyx_t_5 != 0);
        if (unlikely(__pyx_t_6)) {

          /* "ete4/coretype/tree.pyx":2634
 *             if n.name in name2node:
 *                 if name2node[n.name] is not None:
 *                     raise TreeError("Ambiguous node name: "+str(n.name))             # <<<<<<<<<<<<<<
 *                 else:
 *                     name2node[n.name] = n
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Ambiguous_node_name, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_9, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __PYX_ERR(0, 2634, __pyx_L1_error)

          /* "ete4/coretype/tree.pyx":2633
 *         for n in root.traverse():
 *             if n.name in name2node:
 *                 if name2node[n.name] is not None:             # <<<<<<<<<<<<<<
 *                     raise TreeError("Ambiguous node name: "+str(n.name))
 *                 else:
 */
        }

        /* "ete4/coretype/tree.pyx":2636
 *                     raise TreeError("Ambiguous node name: "+str(n.name))
 *                 else:
 *                     name2node[n.name] = n             # <<<<<<<<<<<<<<
 * 
 *     if None in list(name2node.values()):
 */
        /*else*/ {
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2636, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(PyDict_SetItem(__pyx_v_name2node, __pyx_t_4, __pyx_v_n) < 0)) __PYX_ERR(0, 2636, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }

        /* "ete4/coretype/tree.pyx":2632
 *     if name2node:
 *         for n in root.traverse():
 *             if n.name in name2node:             # <<<<<<<<<<<<<<
 *                 if name2node[n.name] is not None:
 *                     raise TreeError("Ambiguous node name: "+str(n.name))
 */
      }

      /* "ete4/coretype/tree.pyx":2631
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:
 *         for n in root.traverse():             # <<<<<<<<<<<<<<
 *             if n.name in name2node:
 *                 if name2node[n.name] is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ete4/coretype/tree.pyx":2630
 * def _translate_nodes(root, *nodes):
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:             # <<<<<<<<<<<<<<
 *         for n in root.traverse():
 *             if n.name in name2node:
 */
  }

  /* "ete4/coretype/tree.pyx":2638
 *                     name2node[n.name] = n
 * 
 *     if None in list(name2node.values()):             # <<<<<<<<<<<<<<
 *         notfound = [key for key, value in six.iteritems(name2node) if value is None]
 *         raise ValueError("Node names not found: "+str(notfound))
 */
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_v_name2node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(Py_None, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "ete4/coretype/tree.pyx":2639
 * 
 *     if None in list(name2node.values()):
 *         notfound = [key for key, value in six.iteritems(name2node) if value is None]             # <<<<<<<<<<<<<<
 *         raise ValueError("Node names not found: "+str(notfound))
 * 
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_six); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_2, __pyx_v_name2node) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_name2node);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_8 = __pyx_t_1; __Pyx_INCREF(__pyx_t_8); __pyx_t_3 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2639, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2639, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2639, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2639, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2639, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_8);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2639, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 2639, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L14_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L14_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 2639, __pyx_L1_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L15_unpacking_done;
        __pyx_L14_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 2639, __pyx_L1_error)
        __pyx_L15_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_5 = (__pyx_v_value == Py_None);
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_v_key))) __PYX_ERR(0, 2639, __pyx_L1_error)
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_notfound = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "ete4/coretype/tree.pyx":2640
 *     if None in list(name2node.values()):
 *         notfound = [key for key, value in six.iteritems(name2node) if value is None]
 *         raise ValueError("Node names not found: "+str(notfound))             # <<<<<<<<<<<<<<
 * 
 *     valid_nodes = []
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_notfound); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Node_names_not_found, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 2640, __pyx_L1_error)

    /* "ete4/coretype/tree.pyx":2638
 *                     name2node[n.name] = n
 * 
 *     if None in list(name2node.values()):             # <<<<<<<<<<<<<<
 *         notfound = [key for key, value in six.iteritems(name2node) if value is None]
 *         raise ValueError("Node names not found: "+str(notfound))
 */
  }

  /* "ete4/coretype/tree.pyx":2642
 *         raise ValueError("Node names not found: "+str(notfound))
 * 
 *     valid_nodes = []             # <<<<<<<<<<<<<<
 *     for n in nodes:
 *         if type(n) is not str:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_valid_nodes = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":2643
 * 
 *     valid_nodes = []
 *     for n in nodes:             # <<<<<<<<<<<<<<
 *         if type(n) is not str:
 *             if type(n) is not root.__class__ :
 */
  __pyx_t_4 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_4); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_8); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2643, __pyx_L1_error)
    #else
    __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "ete4/coretype/tree.pyx":2644
 *     valid_nodes = []
 *     for n in nodes:
 *         if type(n) is not str:             # <<<<<<<<<<<<<<
 *             if type(n) is not root.__class__ :
 *                 raise TreeError("Invalid target node: "+str(n))
 */
    __pyx_t_6 = (((PyObject *)Py_TYPE(__pyx_v_n)) != ((PyObject *)(&PyString_Type)));
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (__pyx_t_5) {

      /* "ete4/coretype/tree.pyx":2645
 *     for n in nodes:
 *         if type(n) is not str:
 *             if type(n) is not root.__class__ :             # <<<<<<<<<<<<<<
 *                 raise TreeError("Invalid target node: "+str(n))
 *             else:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_root, __pyx_n_s_class); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = (((PyObject *)Py_TYPE(__pyx_v_n)) != __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (unlikely(__pyx_t_6)) {

        /* "ete4/coretype/tree.pyx":2646
 *         if type(n) is not str:
 *             if type(n) is not root.__class__ :
 *                 raise TreeError("Invalid target node: "+str(n))             # <<<<<<<<<<<<<<
 *             else:
 *                 valid_nodes.append(n)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TreeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_n); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Invalid_target_node, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 2646, __pyx_L1_error)

        /* "ete4/coretype/tree.pyx":2645
 *     for n in nodes:
 *         if type(n) is not str:
 *             if type(n) is not root.__class__ :             # <<<<<<<<<<<<<<
 *                 raise TreeError("Invalid target node: "+str(n))
 *             else:
 */
      }

      /* "ete4/coretype/tree.pyx":2648
 *                 raise TreeError("Invalid target node: "+str(n))
 *             else:
 *                 valid_nodes.append(n)             # <<<<<<<<<<<<<<
 * 
 *     valid_nodes.extend(list(name2node.values()))
 */
      /*else*/ {
        __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_valid_nodes, __pyx_v_n); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2648, __pyx_L1_error)
      }

      /* "ete4/coretype/tree.pyx":2644
 *     valid_nodes = []
 *     for n in nodes:
 *         if type(n) is not str:             # <<<<<<<<<<<<<<
 *             if type(n) is not root.__class__ :
 *                 raise TreeError("Invalid target node: "+str(n))
 */
    }

    /* "ete4/coretype/tree.pyx":2643
 * 
 *     valid_nodes = []
 *     for n in nodes:             # <<<<<<<<<<<<<<
 *         if type(n) is not str:
 *             if type(n) is not root.__class__ :
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "ete4/coretype/tree.pyx":2650
 *                 valid_nodes.append(n)
 * 
 *     valid_nodes.extend(list(name2node.values()))             # <<<<<<<<<<<<<<
 *     if len(valid_nodes) == 1:
 *         return valid_nodes[0]
 */
  __pyx_t_4 = __Pyx_PyDict_Values(__pyx_v_name2node); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __Pyx_PyList_Extend(__pyx_v_valid_nodes, __pyx_t_8); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":2651
 * 
 *     valid_nodes.extend(list(name2node.values()))
 *     if len(valid_nodes) == 1:             # <<<<<<<<<<<<<<
 *         return valid_nodes[0]
 *     else:
 */
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_valid_nodes); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2651, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_3 == 1) != 0);
  if (__pyx_t_6) {

    /* "ete4/coretype/tree.pyx":2652
 *     valid_nodes.extend(list(name2node.values()))
 *     if len(valid_nodes) == 1:
 *         return valid_nodes[0]             # <<<<<<<<<<<<<<
 *     else:
 *         return valid_nodes
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_valid_nodes, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "ete4/coretype/tree.pyx":2651
 * 
 *     valid_nodes.extend(list(name2node.values()))
 *     if len(valid_nodes) == 1:             # <<<<<<<<<<<<<<
 *         return valid_nodes[0]
 *     else:
 */
  }

  /* "ete4/coretype/tree.pyx":2654
 *         return valid_nodes[0]
 *     else:
 *         return valid_nodes             # <<<<<<<<<<<<<<
 * 
 * # Alias
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_valid_nodes);
    __pyx_r = __pyx_v_valid_nodes;
    goto __pyx_L0;
  }

  /* "ete4/coretype/tree.pyx":2628
 *         _ph.call()
 * 
 * def _translate_nodes(root, *nodes):             # <<<<<<<<<<<<<<
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("ete4.coretype.tree._translate_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name2node);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_notfound);
  __Pyx_XDECREF(__pyx_v_valid_nodes);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_TreeNode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4ete4_8coretype_4tree_3__pyx_unpickle_TreeNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4ete4_8coretype_4tree_3__pyx_unpickle_TreeNode = {"__pyx_unpickle_TreeNode", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_3__pyx_unpickle_TreeNode, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4ete4_8coretype_4tree_3__pyx_unpickle_TreeNode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_TreeNode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TreeNode", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TreeNode", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_TreeNode") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TreeNode", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ete4.coretype.tree.__pyx_unpickle_TreeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4ete4_8coretype_4tree_2__pyx_unpickle_TreeNode(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4ete4_8coretype_4tree_2__pyx_unpickle_TreeNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TreeNode", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x785edcf:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x785edcf) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x785edcf:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)
 *     __pyx_result = TreeNode.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x785edcf:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = TreeNode.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x78, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x785edcf:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)
 *     __pyx_result = TreeNode.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)
 *     __pyx_result = TreeNode.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = TreeNode.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4ete4_8coretype_4tree___pyx_unpickle_TreeNode__set_state(((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x785edcf = (_children, _collapsed, _collapsed_faces, _faces, _img_style, _initialized, _properties, _up, d1, features, size))" % __pyx_checksum)
 *     __pyx_result = TreeNode.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_TreeNode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ete4.coretype.tree.__pyx_unpickle_TreeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4ete4_8coretype_4tree___pyx_unpickle_TreeNode__set_state(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  __pyx_ctuple_double__and_double __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TreeNode__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_children);
  __Pyx_DECREF(__pyx_v___pyx_result->_children);
  __pyx_v___pyx_result->_children = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_collapsed = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_collapsed_faces);
  __Pyx_DECREF(__pyx_v___pyx_result->_collapsed_faces);
  __pyx_v___pyx_result->_collapsed_faces = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_faces);
  __Pyx_DECREF(__pyx_v___pyx_result->_faces);
  __pyx_v___pyx_result->_faces = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_img_style);
  __Pyx_DECREF(__pyx_v___pyx_result->_img_style);
  __pyx_v___pyx_result->_img_style = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_initialized = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_properties);
  __Pyx_DECREF(__pyx_v___pyx_result->_properties);
  __pyx_v___pyx_result->_properties = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_up);
  __Pyx_DECREF(__pyx_v___pyx_result->_up);
  __pyx_v___pyx_result->_up = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->d1 = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PySet_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->features);
  __Pyx_DECREF(__pyx_v___pyx_result->features);
  __pyx_v___pyx_result->features = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_convert__from_py___pyx_ctuple_double__and_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 11) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_TreeNode__set_state(<TreeNode> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TreeNode__set_state(TreeNode __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._children = __pyx_state[0]; __pyx_result._collapsed = __pyx_state[1]; __pyx_result._collapsed_faces = __pyx_state[2]; __pyx_result._faces = __pyx_state[3]; __pyx_result._img_style = __pyx_state[4]; __pyx_result._initialized = __pyx_state[5]; __pyx_result._properties = __pyx_state[6]; __pyx_result._up = __pyx_state[7]; __pyx_result.d1 = __pyx_state[8]; __pyx_result.features = __pyx_state[9]; __pyx_result.size = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("ete4.coretype.tree.__pyx_unpickle_TreeNode__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree_TreeNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)o);
  p->_properties = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->features = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_children = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_up = Py_None; Py_INCREF(Py_None);
  p->_img_style = Py_None; Py_INCREF(Py_None);
  p->_faces = Py_None; Py_INCREF(Py_None);
  p->_collapsed_faces = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree_TreeNode(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *p = (struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_properties);
  Py_CLEAR(p->features);
  Py_CLEAR(p->_children);
  Py_CLEAR(p->_up);
  Py_CLEAR(p->_img_style);
  Py_CLEAR(p->_faces);
  Py_CLEAR(p->_collapsed_faces);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree_TreeNode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *p = (struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)o;
  if (p->_properties) {
    e = (*v)(p->_properties, a); if (e) return e;
  }
  if (p->features) {
    e = (*v)(p->features, a); if (e) return e;
  }
  if (p->_children) {
    e = (*v)(p->_children, a); if (e) return e;
  }
  if (p->_up) {
    e = (*v)(p->_up, a); if (e) return e;
  }
  if (p->_img_style) {
    e = (*v)(p->_img_style, a); if (e) return e;
  }
  if (p->_faces) {
    e = (*v)(p->_faces, a); if (e) return e;
  }
  if (p->_collapsed_faces) {
    e = (*v)(p->_collapsed_faces, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree_TreeNode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *p = (struct __pyx_obj_4ete4_8coretype_4tree_TreeNode *)o;
  tmp = ((PyObject*)p->_properties);
  p->_properties = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->features);
  p->features = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_children);
  p->_children = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_up);
  p->_up = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_img_style);
  p->_img_style = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_faces);
  p->_faces = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_collapsed_faces);
  p->_collapsed_faces = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__properties(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__properties(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_properties_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode_features(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode_features(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_8features_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__children(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_children_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__up(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_up_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__img_style(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__img_style(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_img_style_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__faces(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__faces(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_6_faces_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__collapsed_faces(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__collapsed_faces(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_3__set__(o, v);
  }
  else {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_16_collapsed_faces_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__initialized(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_12_initialized_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__initialized(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_12_initialized_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode__collapsed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_collapsed_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__collapsed(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_10_collapsed_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_4size_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4ete4_8coretype_4tree_8TreeNode_d1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_2d1_1__get__(o);
}

static int __pyx_setprop_4ete4_8coretype_4tree_8TreeNode_d1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4ete4_8coretype_4tree_8TreeNode_2d1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4ete4_8coretype_4tree_TreeNode[] = {
  {"_get_name", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_1_get_name, METH_NOARGS, 0},
  {"_set_name", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_3_set_name, METH_O, 0},
  {"_get_dist", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_5_get_dist, METH_NOARGS, 0},
  {"_set_dist", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_7_set_dist, METH_O, 0},
  {"_get_support", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_9_get_support, METH_NOARGS, 0},
  {"_set_support", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_11_set_support, METH_O, 0},
  {"_get_props", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_13_get_props, METH_NOARGS, 0},
  {"_set_props", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_15_set_props, METH_O, 0},
  {"_get_up", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_17_get_up, METH_NOARGS, 0},
  {"_set_up", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_19_set_up, METH_O, 0},
  {"_get_children", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_21_get_children, METH_NOARGS, 0},
  {"_set_children", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_23_set_children, METH_O, 0},
  {"_get_style", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_25_get_style, METH_NOARGS, 0},
  {"_set_style", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_27_set_style, METH_O, 0},
  {"_get_initialized", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_29_get_initialized, METH_NOARGS, 0},
  {"_set_initialized", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_31_set_initialized, METH_O, 0},
  {"_get_collapsed", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_33_get_collapsed, METH_NOARGS, 0},
  {"_set_collapsed", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_35_set_collapsed, METH_O, 0},
  {"_set_face_areas", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_37_set_face_areas, METH_O, 0},
  {"_get_face_areas", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_39_get_face_areas, METH_NOARGS, 0},
  {"_set__collapsed_face_areas", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_41_set__collapsed_face_areas, METH_O, 0},
  {"_get_collapsed_face_areas", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_43_get_collapsed_face_areas, METH_NOARGS, 0},
  {"add_prop", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_65add_prop, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_64add_prop},
  {"add_props", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_67add_props, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_66add_props},
  {"del_prop", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_69del_prop, METH_O, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_68del_prop},
  {"add_feature", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_71add_feature, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_70add_feature},
  {"add_features", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_73add_features, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_72add_features},
  {"del_feature", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_75del_feature, METH_O, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_74del_feature},
  {"add_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_77add_child, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_76add_child},
  {"add_children", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_79add_children, METH_VARARGS|METH_KEYWORDS, 0},
  {"pop_child", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_81pop_child, METH_VARARGS|METH_KEYWORDS, 0},
  {"remove_child", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_83remove_child, METH_O, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_82remove_child},
  {"remove_children", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_85remove_children, METH_NOARGS, 0},
  {"add_sister", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_87add_sister, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_86add_sister},
  {"remove_sister", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_89remove_sister, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_88remove_sister},
  {"delete", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_91delete, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_90delete},
  {"detach", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_93detach, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_92detach},
  {"prune", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_95prune, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_94prune},
  {"swap_children", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_97swap_children, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_96swap_children},
  {"get_children", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_99get_children, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_98get_children},
  {"get_sisters", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_101get_sisters, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_100get_sisters},
  {"iter_leaves", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_103iter_leaves, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_102iter_leaves},
  {"get_leaves", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_106get_leaves, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_105get_leaves},
  {"iter_leaf_names", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_108iter_leaf_names, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_107iter_leaf_names},
  {"get_leaf_names", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_111get_leaf_names, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_110get_leaf_names},
  {"iter_descendants", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_113iter_descendants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_112iter_descendants},
  {"get_descendants", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_116get_descendants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_115get_descendants},
  {"traverse", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_118traverse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_117traverse},
  {"iter_prepostorder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_120iter_prepostorder, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_119iter_prepostorder},
  {"_iter_descendants_postorder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_123_iter_descendants_postorder, METH_VARARGS|METH_KEYWORDS, 0},
  {"_iter_descendants_levelorder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_126_iter_descendants_levelorder, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_125_iter_descendants_levelorder},
  {"_iter_descendants_preorder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_129_iter_descendants_preorder, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_128_iter_descendants_preorder},
  {"iter_ancestors", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_132iter_ancestors, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_131iter_ancestors},
  {"get_ancestors", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_135get_ancestors, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_134get_ancestors},
  {"describe", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_137describe, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_136describe},
  {"write", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_139write, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_138write},
  {"get_tree_root", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_141get_tree_root, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_140get_tree_root},
  {"get_common_ancestor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_143get_common_ancestor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_142get_common_ancestor},
  {"iter_search_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_145iter_search_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_144iter_search_nodes},
  {"search_nodes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_148search_nodes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_147search_nodes},
  {"get_leaves_by_name", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_150get_leaves_by_name, METH_O, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_149get_leaves_by_name},
  {"is_leaf", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_152is_leaf, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_151is_leaf},
  {"is_root", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_154is_root, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_153is_root},
  {"get_distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_156get_distance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_155get_distance},
  {"get_farthest_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_158get_farthest_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_157get_farthest_node},
  {"_get_farthest_and_closest_leaves", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_160_get_farthest_and_closest_leaves, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_farthest_leaf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_162get_farthest_leaf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_161get_farthest_leaf},
  {"get_closest_leaf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_164get_closest_leaf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_163get_closest_leaf},
  {"get_midpoint_outgroup", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_166get_midpoint_outgroup, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_165get_midpoint_outgroup},
  {"populate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_168populate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_167populate},
  {"set_outgroup", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_170set_outgroup, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_169set_outgroup},
  {"unroot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_172unroot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_171unroot},
  {"show", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_174show, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_173show},
  {"render", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_176render, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_175render},
  {"explore", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_178explore, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_177explore},
  {"copy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_180copy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_179copy},
  {"_asciiArt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_182_asciiArt, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_181_asciiArt},
  {"get_ascii", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_184get_ascii, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_183get_ascii},
  {"ladderize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_186ladderize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_185ladderize},
  {"sort_descendants", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_188sort_descendants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_187sort_descendants},
  {"get_cached_content", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_190get_cached_content, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_189get_cached_content},
  {"robinson_foulds", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_192robinson_foulds, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_191robinson_foulds},
  {"compare", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_194compare, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_193compare},
  {"_diff", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_196_diff, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_195_diff},
  {"iter_edges", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_198iter_edges, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_197iter_edges},
  {"get_edges", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_201get_edges, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_200get_edges},
  {"standardize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_203standardize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_202standardize},
  {"get_topology_id", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_205get_topology_id, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_204get_topology_id},
  {"convert_to_ultrametric", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_207convert_to_ultrametric, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_206convert_to_ultrametric},
  {"check_monophyly", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_209check_monophyly, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_208check_monophyly},
  {"get_monophyletic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_211get_monophyletic, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_210get_monophyletic},
  {"expand_polytomies", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_214expand_polytomies, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_213expand_polytomies},
  {"resolve_polytomy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_216resolve_polytomy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_215resolve_polytomy},
  {"cophenetic_matrix", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_218cophenetic_matrix, METH_NOARGS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_217cophenetic_matrix},
  {"add_face", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_220add_face, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_219add_face},
  {"set_style", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_222set_style, METH_O, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_221set_style},
  {"from_parent_child_table", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_224from_parent_child_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_223from_parent_child_table},
  {"from_skbio", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_226from_skbio, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4ete4_8coretype_4tree_8TreeNode_225from_skbio},
  {"phonehome", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_228phonehome, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_230__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4ete4_8coretype_4tree_8TreeNode_232__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4ete4_8coretype_4tree_TreeNode[] = {
  {(char *)"_properties", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__properties, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__properties, (char *)0, 0},
  {(char *)"features", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode_features, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode_features, (char *)0, 0},
  {(char *)"_children", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__children, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__children, (char *)0, 0},
  {(char *)"_up", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__up, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__up, (char *)0, 0},
  {(char *)"_img_style", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__img_style, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__img_style, (char *)0, 0},
  {(char *)"_faces", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__faces, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__faces, (char *)0, 0},
  {(char *)"_collapsed_faces", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__collapsed_faces, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__collapsed_faces, (char *)0, 0},
  {(char *)"_initialized", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__initialized, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__initialized, (char *)0, 0},
  {(char *)"_collapsed", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode__collapsed, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode__collapsed, (char *)0, 0},
  {(char *)"size", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode_size, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode_size, (char *)0, 0},
  {(char *)"d1", __pyx_getprop_4ete4_8coretype_4tree_8TreeNode_d1, __pyx_setprop_4ete4_8coretype_4tree_8TreeNode_d1, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_TreeNode = {
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_55__add__, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_47__nonzero__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_53__and__, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_TreeNode = {
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_61__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_59__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_TreeNode = {
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_61__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_4ete4_8coretype_4tree_TreeNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.TreeNode", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree_TreeNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree_TreeNode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_51__repr__, /*tp_repr*/
  &__pyx_tp_as_number_TreeNode, /*tp_as_number*/
  &__pyx_tp_as_sequence_TreeNode, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_TreeNode, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_57__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree_TreeNode, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree_TreeNode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_63__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4ete4_8coretype_4tree_TreeNode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4ete4_8coretype_4tree_TreeNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4ete4_8coretype_4tree_8TreeNode_45__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree_TreeNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct__prune[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct__prune = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct__prune(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct__prune > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct__prune[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct__prune];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct__prune(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_n2depth);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct__prune < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct__prune[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct__prune++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct__prune(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *)o;
  if (p->__pyx_v_n2depth) {
    e = (*v)(p->__pyx_v_n2depth, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct__prune(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune *)o;
  tmp = ((PyObject*)p->__pyx_v_n2depth);
  p->__pyx_v_n2depth = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct__prune", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct__prune), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct__prune, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct__prune, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct__prune, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct__prune, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves *)o;
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_1_iter_leaves", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names *)o;
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_2_iter_leaf_names", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_strategy);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants *)o;
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_strategy) {
    e = (*v)(p->__pyx_v_strategy, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_3_iter_descendants", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__leaf);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_to_visit);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder *)o;
  if (p->__pyx_v__leaf) {
    e = (*v)(p->__pyx_v__leaf, a); if (e) return e;
  }
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_to_visit) {
    e = (*v)(p->__pyx_v_to_visit, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_4_iter_prepostorder", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v__leaf);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_to_visit);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder *)o;
  if (p->__pyx_v__leaf) {
    e = (*v)(p->__pyx_v__leaf, a); if (e) return e;
  }
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_to_visit) {
    e = (*v)(p->__pyx_v_to_visit, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_5__iter_descendants_postorder", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tovisit);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder *)o;
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tovisit) {
    e = (*v)(p->__pyx_v_tovisit, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_6__iter_descendants_levelorder", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_leaf_fn);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_to_visit);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder *)o;
  if (p->__pyx_v_is_leaf_fn) {
    e = (*v)(p->__pyx_v_is_leaf_fn, a); if (e) return e;
  }
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_to_visit) {
    e = (*v)(p->__pyx_v_to_visit, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_7__iter_descendants_preorder", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_node);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors *)o;
  if (p->__pyx_v_node) {
    e = (*v)(p->__pyx_v_node, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_8_iter_ancestors", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_conditions);
  Py_CLEAR(p->__pyx_v_conditions_passed);
  Py_CLEAR(p->__pyx_v_key);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_value);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes *)o;
  if (p->__pyx_v_conditions) {
    e = (*v)(p->__pyx_v_conditions, a); if (e) return e;
  }
  if (p->__pyx_v_conditions_passed) {
    e = (*v)(p->__pyx_v_conditions_passed, a); if (e) return e;
  }
  if (p->__pyx_v_key) {
    e = (*v)(p->__pyx_v_key, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_value) {
    e = (*v)(p->__pyx_v_value, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_9_iter_search_nodes", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_n2s);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *)o;
  if (p->__pyx_v_n2s) {
    e = (*v)(p->__pyx_v_n2s, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize *)o;
  tmp = ((PyObject*)p->__pyx_v_n2s);
  p->__pyx_v_n2s = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_10_ladderize", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_node2content);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *)o;
  if (p->__pyx_v_node2content) {
    e = (*v)(p->__pyx_v_node2content, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants *)o;
  tmp = ((PyObject*)p->__pyx_v_node2content);
  p->__pyx_v_node2content = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_11_sort_descendants", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_store_attr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)o;
  if (p->__pyx_v_store_attr) {
    e = (*v)(p->__pyx_v_store_attr, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)o;
  tmp = ((PyObject*)p->__pyx_v_store_attr);
  p->__pyx_v_store_attr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_12_get_cached_content", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v__n);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__n) {
    e = (*v)(p->__pyx_v__n, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v__n);
  p->__pyx_v__n = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_13_get_value", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_attr);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_attr) {
    e = (*v)(p->__pyx_v_attr, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_15_compare[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_15_compare = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_15_compare(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_15_compare > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_15_compare[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_15_compare];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_15_compare(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_expand_polytomies);
  Py_CLEAR(p->__pyx_v_min_support_ref);
  Py_CLEAR(p->__pyx_v_min_support_source);
  Py_CLEAR(p->__pyx_v_ref_tree_attr);
  Py_CLEAR(p->__pyx_v_source_tree_attr);
  Py_CLEAR(p->__pyx_v_unrooted);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_15_compare < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_15_compare[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_15_compare++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_15_compare(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *)o;
  if (p->__pyx_v_expand_polytomies) {
    e = (*v)(p->__pyx_v_expand_polytomies, a); if (e) return e;
  }
  if (p->__pyx_v_min_support_ref) {
    e = (*v)(p->__pyx_v_min_support_ref, a); if (e) return e;
  }
  if (p->__pyx_v_min_support_source) {
    e = (*v)(p->__pyx_v_min_support_source, a); if (e) return e;
  }
  if (p->__pyx_v_ref_tree_attr) {
    e = (*v)(p->__pyx_v_ref_tree_attr, a); if (e) return e;
  }
  if (p->__pyx_v_source_tree_attr) {
    e = (*v)(p->__pyx_v_source_tree_attr, a); if (e) return e;
  }
  if (p->__pyx_v_unrooted) {
    e = (*v)(p->__pyx_v_unrooted, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_15_compare(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare *)o;
  tmp = ((PyObject*)p->__pyx_v_expand_polytomies);
  p->__pyx_v_expand_polytomies = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_min_support_ref);
  p->__pyx_v_min_support_ref = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_min_support_source);
  p->__pyx_v_min_support_source = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ref_tree_attr);
  p->__pyx_v_ref_tree_attr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_source_tree_attr);
  p->__pyx_v_source_tree_attr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_unrooted);
  p->__pyx_v_unrooted = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_15_compare", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_15_compare), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_15_compare, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_15_compare, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_15_compare, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_15_compare, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_all_leaves);
  Py_CLEAR(p->__pyx_v_cached_content);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_side1);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges *)o;
  if (p->__pyx_v_all_leaves) {
    e = (*v)(p->__pyx_v_all_leaves, a); if (e) return e;
  }
  if (p->__pyx_v_cached_content) {
    e = (*v)(p->__pyx_v_cached_content, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_side1) {
    e = (*v)(p->__pyx_v_side1, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_16_iter_edges", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_monophyletic);
  Py_CLEAR(p->__pyx_v_match);
  Py_CLEAR(p->__pyx_v_n2values);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_target_attr);
  Py_CLEAR(p->__pyx_v_values);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic *)o;
  if (p->__pyx_v_is_monophyletic) {
    e = (*v)(p->__pyx_v_is_monophyletic, a); if (e) return e;
  }
  if (p->__pyx_v_match) {
    e = (*v)(p->__pyx_v_match, a); if (e) return e;
  }
  if (p->__pyx_v_n2values) {
    e = (*v)(p->__pyx_v_n2values, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_target_attr) {
    e = (*v)(p->__pyx_v_target_attr, a); if (e) return e;
  }
  if (p->__pyx_v_values) {
    e = (*v)(p->__pyx_v_values, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_17_get_monophyletic", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_TipTuple);
  Py_CLEAR(p->__pyx_v_add_leaf);
  Py_CLEAR(p->__pyx_v_enum_unordered);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *)o;
  if (p->__pyx_v_TipTuple) {
    e = (*v)(p->__pyx_v_TipTuple, a); if (e) return e;
  }
  if (p->__pyx_v_add_leaf) {
    e = (*v)(p->__pyx_v_add_leaf, a); if (e) return e;
  }
  if (p->__pyx_v_enum_unordered) {
    e = (*v)(p->__pyx_v_enum_unordered, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies *)o;
  tmp = ((PyObject*)p->__pyx_v_TipTuple);
  p->__pyx_v_TipTuple = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_add_leaf);
  p->__pyx_v_add_leaf = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_enum_unordered);
  p->__pyx_v_enum_unordered = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_18_expand_polytomies", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_label);
  Py_CLEAR(p->__pyx_v_left);
  Py_CLEAR(p->__pyx_v_right);
  Py_CLEAR(p->__pyx_v_tree);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_label) {
    e = (*v)(p->__pyx_v_label, a); if (e) return e;
  }
  if (p->__pyx_v_left) {
    e = (*v)(p->__pyx_v_left, a); if (e) return e;
  }
  if (p->__pyx_v_right) {
    e = (*v)(p->__pyx_v_right, a); if (e) return e;
  }
  if (p->__pyx_v_tree) {
    e = (*v)(p->__pyx_v_tree, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_19_add_leaf", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_labels);
  Py_CLEAR(p->__pyx_v_new_tree);
  Py_CLEAR(p->__pyx_v_tree);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_labels) {
    e = (*v)(p->__pyx_v_labels, a); if (e) return e;
  }
  if (p->__pyx_v_new_tree) {
    e = (*v)(p->__pyx_v_new_tree, a); if (e) return e;
  }
  if (p->__pyx_v_tree) {
    e = (*v)(p->__pyx_v_tree, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_20_enum_unordered", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_default_dist);
  Py_CLEAR(p->__pyx_v_default_support);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *)o;
  if (p->__pyx_v_default_dist) {
    e = (*v)(p->__pyx_v_default_dist, a); if (e) return e;
  }
  if (p->__pyx_v_default_support) {
    e = (*v)(p->__pyx_v_default_support, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy *)o;
  tmp = ((PyObject*)p->__pyx_v_default_dist);
  p->__pyx_v_default_dist = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_default_support);
  p->__pyx_v_default_support = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_21_resolve_polytomy", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_uniquenodes);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *)o;
  if (p->__pyx_v_uniquenodes) {
    e = (*v)(p->__pyx_v_uniquenodes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix *)o;
  tmp = ((PyObject*)p->__pyx_v_uniquenodes);
  p->__pyx_v_uniquenodes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_22_cophenetic_matrix", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_23_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_nodes_by_name);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *)o;
  if (p->__pyx_v_nodes_by_name) {
    e = (*v)(p->__pyx_v_nodes_by_name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table *)o;
  tmp = ((PyObject*)p->__pyx_v_nodes_by_name);
  p->__pyx_v_nodes_by_name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_24_from_parent_child_table", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio[8];
static int __pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio = 0;

static PyObject *__pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio)))) {
    o = (PyObject*)__pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio[--__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio];
    memset(o, 0, sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio(PyObject *o) {
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_all_nodes);
  Py_CLEAR(p->__pyx_v_map_attributes);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio)))) {
    __pyx_freelist_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio[__pyx_freecount_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio++] = ((struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *)o;
  if (p->__pyx_v_all_nodes) {
    e = (*v)(p->__pyx_v_all_nodes, a); if (e) return e;
  }
  if (p->__pyx_v_map_attributes) {
    e = (*v)(p->__pyx_v_map_attributes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *p = (struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio *)o;
  tmp = ((PyObject*)p->__pyx_v_all_nodes);
  p->__pyx_v_all_nodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_map_attributes);
  p->__pyx_v_map_attributes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio = {
  PyVarObject_HEAD_INIT(0, 0)
  "ete4.coretype.tree.__pyx_scope_struct_25_from_skbio", /*tp_name*/
  sizeof(struct __pyx_obj_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio, /*tp_traverse*/
  __pyx_tp_clear_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_tree(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_tree},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "tree",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_A_parent_node_is_required_to_add, __pyx_k_A_parent_node_is_required_to_add, sizeof(__pyx_k_A_parent_node_is_required_to_add), 0, 0, 1, 0},
  {&__pyx_kp_s_A_problem_occurred_during_a_Tre, __pyx_k_A_problem_occurred_during_a_Tre, sizeof(__pyx_k_A_problem_occurred_during_a_Tre), 0, 0, 1, 0},
  {&__pyx_kp_s_Ambiguous_node_name, __pyx_k_Ambiguous_node_name, sizeof(__pyx_k_Ambiguous_node_name), 0, 0, 1, 0},
  {&__pyx_kp_s_Both_trees_contain_polytomies_Tr, __pyx_k_Both_trees_contain_polytomies_Tr, sizeof(__pyx_k_Both_trees_contain_polytomies_Tr), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_unroot_a_tree_with_only_t, __pyx_k_Cannot_unroot_a_tree_with_only_t, sizeof(__pyx_k_Cannot_unroot_a_tree_with_only_t), 0, 0, 1, 0},
  {&__pyx_kp_u_Children_should_to_be_iterable, __pyx_k_Children_should_to_be_iterable, sizeof(__pyx_k_Children_should_to_be_iterable), 0, 1, 0, 0},
  {&__pyx_kp_u_Converts_a_parent_child_table_in, __pyx_k_Converts_a_parent_child_table_in, sizeof(__pyx_k_Converts_a_parent_child_table_in), 0, 1, 0, 0},
  {&__pyx_kp_u_Converts_a_scikit_bio_TreeNode_o, __pyx_k_Converts_a_scikit_bio_TreeNode_o, sizeof(__pyx_k_Converts_a_scikit_bio_TreeNode_o), 0, 1, 0, 0},
  {&__pyx_n_s_DEFAULT_COMPACT, __pyx_k_DEFAULT_COMPACT, sizeof(__pyx_k_DEFAULT_COMPACT), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_DIST, __pyx_k_DEFAULT_DIST, sizeof(__pyx_k_DEFAULT_DIST), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_NAME, __pyx_k_DEFAULT_NAME, sizeof(__pyx_k_DEFAULT_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_SHOWINTERNAL, __pyx_k_DEFAULT_SHOWINTERNAL, sizeof(__pyx_k_DEFAULT_SHOWINTERNAL), 0, 0, 1, 1},
  {&__pyx_n_s_DEFAULT_SUPPORT, __pyx_k_DEFAULT_SUPPORT, sizeof(__pyx_k_DEFAULT_SUPPORT), 0, 0, 1, 1},
  {&__pyx_kp_s_Duplicated_items_found_in_refere, __pyx_k_Duplicated_items_found_in_refere, sizeof(__pyx_k_Duplicated_items_found_in_refere), 0, 0, 1, 0},
  {&__pyx_kp_s_Duplicated_items_found_in_source, __pyx_k_Duplicated_items_found_in_source, sizeof(__pyx_k_Duplicated_items_found_in_source), 0, 0, 1, 0},
  {&__pyx_n_s_ETE, __pyx_k_ETE, sizeof(__pyx_k_ETE), 0, 0, 1, 1},
  {&__pyx_n_s_FACE_POSITIONS, __pyx_k_FACE_POSITIONS, sizeof(__pyx_k_FACE_POSITIONS), 0, 0, 1, 1},
  {&__pyx_n_s_Face, __pyx_k_Face, sizeof(__pyx_k_Face), 0, 0, 1, 1},
  {&__pyx_n_s_FaceAreas, __pyx_k_FaceAreas, sizeof(__pyx_k_FaceAreas), 0, 0, 1, 1},
  {&__pyx_n_s_FaceContainer, __pyx_k_FaceContainer, sizeof(__pyx_k_FaceContainer), 0, 0, 1, 1},
  {&__pyx_kp_s_Found_polytomy_larger_than_curre, __pyx_k_Found_polytomy_larger_than_curre, sizeof(__pyx_k_Found_polytomy_larger_than_curre), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x78, __pyx_k_Incompatible_checksums_s_vs_0x78, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x78), 0, 0, 1, 0},
  {&__pyx_kp_u_Incorrect_child_type, __pyx_k_Incorrect_child_type, sizeof(__pyx_k_Incorrect_child_type), 0, 1, 0, 0},
  {&__pyx_kp_u_Incorrect_children_type, __pyx_k_Incorrect_children_type, sizeof(__pyx_k_Incorrect_children_type), 0, 1, 0, 0},
  {&__pyx_kp_s_Invalid_copy_method, __pyx_k_Invalid_copy_method, sizeof(__pyx_k_Invalid_copy_method), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_node_type, __pyx_k_Invalid_node_type, sizeof(__pyx_k_Invalid_node_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_target_node, __pyx_k_Invalid_target_node, sizeof(__pyx_k_Invalid_target_node), 0, 0, 1, 0},
  {&__pyx_kp_s_Max_distance_f, __pyx_k_Max_distance_f, sizeof(__pyx_k_Max_distance_f), 0, 0, 1, 0},
  {&__pyx_kp_s_Most_distant_node_s, __pyx_k_Most_distant_node_s, sizeof(__pyx_k_Most_distant_node_s), 0, 0, 1, 0},
  {&__pyx_n_s_NA, __pyx_k_NA, sizeof(__pyx_k_NA), 0, 0, 1, 1},
  {&__pyx_n_s_No, __pyx_k_No, sizeof(__pyx_k_No), 0, 0, 1, 1},
  {&__pyx_kp_s_No_children, __pyx_k_No_children, sizeof(__pyx_k_No_children), 0, 0, 1, 0},
  {&__pyx_n_s_NodeStyle, __pyx_k_NodeStyle, sizeof(__pyx_k_NodeStyle), 0, 0, 1, 1},
  {&__pyx_kp_s_Node_names_not_found, __pyx_k_Node_names_not_found, sizeof(__pyx_k_Node_names_not_found), 0, 0, 1, 0},
  {&__pyx_kp_s_Node_not_found, __pyx_k_Node_not_found, sizeof(__pyx_k_Node_not_found), 0, 0, 1, 0},
  {&__pyx_kp_s_Nodes_are_not_connected, __pyx_k_Nodes_are_not_connected, sizeof(__pyx_k_Nodes_are_not_connected), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_leaf_nodes_d, __pyx_k_Number_of_leaf_nodes_d, sizeof(__pyx_k_Number_of_leaf_nodes_d), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Rooted_s, __pyx_k_Rooted_s, sizeof(__pyx_k_Rooted_s), 0, 0, 1, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TREEVIEW, __pyx_k_TREEVIEW, sizeof(__pyx_k_TREEVIEW), 0, 0, 1, 1},
  {&__pyx_kp_s_The_monophyly_of_the_provided_va, __pyx_k_The_monophyly_of_the_provided_va, sizeof(__pyx_k_The_monophyly_of_the_provided_va), 0, 0, 1, 0},
  {&__pyx_kp_s_The_value_of_the_mode_parameter, __pyx_k_The_value_of_the_mode_parameter, sizeof(__pyx_k_The_value_of_the_mode_parameter), 0, 0, 1, 0},
  {&__pyx_n_s_TipTuple, __pyx_k_TipTuple, sizeof(__pyx_k_TipTuple), 0, 0, 1, 1},
  {&__pyx_kp_s_Total_number_of_nodes_d, __pyx_k_Total_number_of_nodes_d, sizeof(__pyx_k_Total_number_of_nodes_d), 0, 0, 1, 0},
  {&__pyx_n_s_Tree, __pyx_k_Tree, sizeof(__pyx_k_Tree), 0, 0, 1, 1},
  {&__pyx_n_s_TreeError, __pyx_k_TreeError, sizeof(__pyx_k_TreeError), 0, 0, 1, 1},
  {&__pyx_n_s_TreeError___init, __pyx_k_TreeError___init, sizeof(__pyx_k_TreeError___init), 0, 0, 1, 1},
  {&__pyx_n_s_TreeError___str, __pyx_k_TreeError___str, sizeof(__pyx_k_TreeError___str), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode, __pyx_k_TreeNode, sizeof(__pyx_k_TreeNode), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode__iter_descendants_level, __pyx_k_TreeNode__iter_descendants_level, sizeof(__pyx_k_TreeNode__iter_descendants_level), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode__iter_descendants_posto, __pyx_k_TreeNode__iter_descendants_posto, sizeof(__pyx_k_TreeNode__iter_descendants_posto), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode__iter_descendants_preor, __pyx_k_TreeNode__iter_descendants_preor, sizeof(__pyx_k_TreeNode__iter_descendants_preor), 0, 0, 1, 1},
  {&__pyx_kp_u_TreeNode_from_parent_child_table, __pyx_k_TreeNode_from_parent_child_table, sizeof(__pyx_k_TreeNode_from_parent_child_table), 0, 1, 0, 0},
  {&__pyx_kp_u_TreeNode_from_skbio_line_2584, __pyx_k_TreeNode_from_skbio_line_2584, sizeof(__pyx_k_TreeNode_from_skbio_line_2584), 0, 1, 0, 0},
  {&__pyx_n_s_TreeNode_get_monophyletic, __pyx_k_TreeNode_get_monophyletic, sizeof(__pyx_k_TreeNode_get_monophyletic), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_ancestors, __pyx_k_TreeNode_iter_ancestors, sizeof(__pyx_k_TreeNode_iter_ancestors), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_descendants, __pyx_k_TreeNode_iter_descendants, sizeof(__pyx_k_TreeNode_iter_descendants), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_edges, __pyx_k_TreeNode_iter_edges, sizeof(__pyx_k_TreeNode_iter_edges), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_leaf_names, __pyx_k_TreeNode_iter_leaf_names, sizeof(__pyx_k_TreeNode_iter_leaf_names), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_leaves, __pyx_k_TreeNode_iter_leaves, sizeof(__pyx_k_TreeNode_iter_leaves), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_prepostorder, __pyx_k_TreeNode_iter_prepostorder, sizeof(__pyx_k_TreeNode_iter_prepostorder), 0, 0, 1, 1},
  {&__pyx_n_s_TreeNode_iter_search_nodes, __pyx_k_TreeNode_iter_search_nodes, sizeof(__pyx_k_TreeNode_iter_search_nodes), 0, 0, 1, 1},
  {&__pyx_kp_s_Tree_node_s_s, __pyx_k_Tree_node_s_s, sizeof(__pyx_k_Tree_node_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Treeview_module_is_disabled, __pyx_k_Treeview_module_is_disabled, sizeof(__pyx_k_Treeview_module_is_disabled), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unrooted_tree_found_You_may_want, __pyx_k_Unrooted_tree_found_You_may_want, sizeof(__pyx_k_Unrooted_tree_found_You_may_want), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_WARNING_add_feature_is_DEPRECAT, __pyx_k_WARNING_add_feature_is_DEPRECAT, sizeof(__pyx_k_WARNING_add_feature_is_DEPRECAT), 0, 0, 1, 0},
  {&__pyx_kp_s_WARNING_add_features_is_DEPRECA, __pyx_k_WARNING_add_features_is_DEPRECA, sizeof(__pyx_k_WARNING_add_features_is_DEPRECA), 0, 0, 1, 0},
  {&__pyx_kp_s_WARNING_del_prop_is_DEPRECATED, __pyx_k_WARNING_del_prop_is_DEPRECATED, sizeof(__pyx_k_WARNING_del_prop_is_DEPRECATED), 0, 0, 1, 0},
  {&__pyx_n_s_Yes, __pyx_k_Yes, sizeof(__pyx_k_Yes), 0, 0, 1, 1},
  {&__pyx_kp_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 0},
  {&__pyx_kp_s__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_abcdefghijklmnopqrstuvwxyz, __pyx_k_abcdefghijklmnopqrstuvwxyz, sizeof(__pyx_k_abcdefghijklmnopqrstuvwxyz), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_child, __pyx_k_add_child, sizeof(__pyx_k_add_child), 0, 0, 1, 1},
  {&__pyx_n_s_add_children, __pyx_k_add_children, sizeof(__pyx_k_add_children), 0, 0, 1, 1},
  {&__pyx_n_s_add_face, __pyx_k_add_face, sizeof(__pyx_k_add_face), 0, 0, 1, 1},
  {&__pyx_n_s_add_leaf, __pyx_k_add_leaf, sizeof(__pyx_k_add_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_add_prop, __pyx_k_add_prop, sizeof(__pyx_k_add_prop), 0, 0, 1, 1},
  {&__pyx_n_s_add_props, __pyx_k_add_props, sizeof(__pyx_k_add_props), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_nodes, __pyx_k_all_nodes, sizeof(__pyx_k_all_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asciiArt, __pyx_k_asciiArt, sizeof(__pyx_k_asciiArt), 0, 0, 1, 1},
  {&__pyx_n_s_attr, __pyx_k_attr, sizeof(__pyx_k_attr), 0, 0, 1, 1},
  {&__pyx_n_s_attr1, __pyx_k_attr1, sizeof(__pyx_k_attr1), 0, 0, 1, 1},
  {&__pyx_n_s_attr2, __pyx_k_attr2, sizeof(__pyx_k_attr2), 0, 0, 1, 1},
  {&__pyx_n_s_attr_t1, __pyx_k_attr_t1, sizeof(__pyx_k_attr_t1), 0, 0, 1, 1},
  {&__pyx_n_s_attr_t2, __pyx_k_attr_t2, sizeof(__pyx_k_attr_t2), 0, 0, 1, 1},
  {&__pyx_n_s_attributes, __pyx_k_attributes, sizeof(__pyx_k_attributes), 0, 0, 1, 1},
  {&__pyx_n_s_autodetect_duplications, __pyx_k_autodetect_duplications, sizeof(__pyx_k_autodetect_duplications), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_kp_s_bad_node_up_type, __pyx_k_bad_node_up_type, sizeof(__pyx_k_bad_node_up_type), 0, 0, 1, 0},
  {&__pyx_n_s_balanced, __pyx_k_balanced, sizeof(__pyx_k_balanced), 0, 0, 1, 1},
  {&__pyx_n_s_branch_properties, __pyx_k_branch_properties, sizeof(__pyx_k_branch_properties), 0, 0, 1, 1},
  {&__pyx_n_s_branch_range, __pyx_k_branch_range, sizeof(__pyx_k_branch_range), 0, 0, 1, 1},
  {&__pyx_kp_s_branch_right, __pyx_k_branch_right, sizeof(__pyx_k_branch_right), 0, 0, 1, 0},
  {&__pyx_n_s_cPickle, __pyx_k_cPickle, sizeof(__pyx_k_cPickle), 0, 0, 1, 1},
  {&__pyx_n_s_cached_content, __pyx_k_cached_content, sizeof(__pyx_k_cached_content), 0, 0, 1, 1},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_ch, __pyx_k_ch, sizeof(__pyx_k_ch), 0, 0, 1, 1},
  {&__pyx_n_s_char1, __pyx_k_char1, sizeof(__pyx_k_char1), 0, 0, 1, 1},
  {&__pyx_n_s_child, __pyx_k_child, sizeof(__pyx_k_child), 0, 0, 1, 1},
  {&__pyx_n_s_child_idx, __pyx_k_child_idx, sizeof(__pyx_k_child_idx), 0, 0, 1, 1},
  {&__pyx_n_s_child_name, __pyx_k_child_name, sizeof(__pyx_k_child_name), 0, 0, 1, 1},
  {&__pyx_kp_s_child_not_found, __pyx_k_child_not_found, sizeof(__pyx_k_child_not_found), 0, 0, 1, 0},
  {&__pyx_n_s_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmp_nodes, __pyx_k_cmp_nodes, sizeof(__pyx_k_cmp_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_cmp_to_key, __pyx_k_cmp_to_key, sizeof(__pyx_k_cmp_to_key), 0, 0, 1, 1},
  {&__pyx_n_s_collapsed_faces, __pyx_k_collapsed_faces, sizeof(__pyx_k_collapsed_faces), 0, 0, 1, 1},
  {&__pyx_n_s_collapsed_faces_2, __pyx_k_collapsed_faces_2, sizeof(__pyx_k_collapsed_faces_2), 0, 0, 1, 1},
  {&__pyx_n_s_collapsed_only, __pyx_k_collapsed_only, sizeof(__pyx_k_collapsed_only), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_column, __pyx_k_column, sizeof(__pyx_k_column), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_combinations, __pyx_k_combinations, sizeof(__pyx_k_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_combinations_with_replacement, __pyx_k_combinations_with_replacement, sizeof(__pyx_k_combinations_with_replacement), 0, 0, 1, 1},
  {&__pyx_n_s_common, __pyx_k_common, sizeof(__pyx_k_common), 0, 0, 1, 1},
  {&__pyx_n_s_common_edges, __pyx_k_common_edges, sizeof(__pyx_k_common_edges), 0, 0, 1, 1},
  {&__pyx_n_s_compact, __pyx_k_compact, sizeof(__pyx_k_compact), 0, 0, 1, 1},
  {&__pyx_n_s_compare, __pyx_k_compare, sizeof(__pyx_k_compare), 0, 0, 1, 1},
  {&__pyx_n_s_compare_locals__compare, __pyx_k_compare_locals__compare, sizeof(__pyx_k_compare_locals__compare), 0, 0, 1, 1},
  {&__pyx_n_s_compare_locals__safe_div, __pyx_k_compare_locals__safe_div, sizeof(__pyx_k_compare_locals__safe_div), 0, 0, 1, 1},
  {&__pyx_n_s_container_type, __pyx_k_container_type, sizeof(__pyx_k_container_type), 0, 0, 1, 1},
  {&__pyx_n_s_cophenetic_matrix_locals_genexpr, __pyx_k_cophenetic_matrix_locals_genexpr, sizeof(__pyx_k_cophenetic_matrix_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_correct_by_polytomy_size, __pyx_k_correct_by_polytomy_size, sizeof(__pyx_k_correct_by_polytomy_size), 0, 0, 1, 1},
  {&__pyx_n_s_cpickle, __pyx_k_cpickle, sizeof(__pyx_k_cpickle), 0, 0, 1, 1},
  {&__pyx_n_s_deepcopy, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s_default_dist, __pyx_k_default_dist, sizeof(__pyx_k_default_dist), 0, 0, 1, 1},
  {&__pyx_n_s_default_support, __pyx_k_default_support, sizeof(__pyx_k_default_support), 0, 0, 1, 1},
  {&__pyx_n_s_del_prop, __pyx_k_del_prop, sizeof(__pyx_k_del_prop), 0, 0, 1, 1},
  {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
  {&__pyx_n_s_delete_orphan, __pyx_k_delete_orphan, sizeof(__pyx_k_delete_orphan), 0, 0, 1, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_detach, __pyx_k_detach, sizeof(__pyx_k_detach), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_diffs, __pyx_k_diffs, sizeof(__pyx_k_diffs), 0, 0, 1, 1},
  {&__pyx_n_s_diffs_tab, __pyx_k_diffs_tab, sizeof(__pyx_k_diffs_tab), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_dist, __pyx_k_dist, sizeof(__pyx_k_dist), 0, 0, 1, 1},
  {&__pyx_n_s_dist_formatter, __pyx_k_dist_formatter, sizeof(__pyx_k_dist_formatter), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dpi, __pyx_k_dpi, sizeof(__pyx_k_dpi), 0, 0, 1, 1},
  {&__pyx_n_s_drawer, __pyx_k_drawer, sizeof(__pyx_k_drawer), 0, 0, 1, 1},
  {&__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},
  {&__pyx_n_s_effective_tree_size, __pyx_k_effective_tree_size, sizeof(__pyx_k_effective_tree_size), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enum_unordered, __pyx_k_enum_unordered, sizeof(__pyx_k_enum_unordered), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_ete4_coretype_tree, __pyx_k_ete4_coretype_tree, sizeof(__pyx_k_ete4_coretype_tree), 0, 0, 1, 1},
  {&__pyx_kp_s_ete4_coretype_tree_pyx, __pyx_k_ete4_coretype_tree_pyx, sizeof(__pyx_k_ete4_coretype_tree_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_ete4_parser_newick, __pyx_k_ete4_parser_newick, sizeof(__pyx_k_ete4_parser_newick), 0, 0, 1, 1},
  {&__pyx_n_s_ete4_smartview, __pyx_k_ete4_smartview, sizeof(__pyx_k_ete4_smartview), 0, 0, 1, 1},
  {&__pyx_n_s_ete4_smartview_ete_gardening, __pyx_k_ete4_smartview_ete_gardening, sizeof(__pyx_k_ete4_smartview_ete_gardening), 0, 0, 1, 1},
  {&__pyx_n_s_ete4_smartview_gui_server, __pyx_k_ete4_smartview_gui_server, sizeof(__pyx_k_ete4_smartview_gui_server), 0, 0, 1, 1},
  {&__pyx_n_s_ete_ch, __pyx_k_ete_ch, sizeof(__pyx_k_ete_ch), 0, 0, 1, 1},
  {&__pyx_n_s_ete_diff, __pyx_k_ete_diff, sizeof(__pyx_k_ete_diff), 0, 0, 1, 1},
  {&__pyx_n_s_ete_node, __pyx_k_ete_node, sizeof(__pyx_k_ete_node), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_expand_polytomies, __pyx_k_expand_polytomies, sizeof(__pyx_k_expand_polytomies), 0, 0, 1, 1},
  {&__pyx_kp_s_expand_polytomies_and_correct_by, __pyx_k_expand_polytomies_and_correct_by, sizeof(__pyx_k_expand_polytomies_and_correct_by), 0, 0, 1, 0},
  {&__pyx_kp_s_expand_polytomies_and_unrooted_t, __pyx_k_expand_polytomies_and_unrooted_t, sizeof(__pyx_k_expand_polytomies_and_unrooted_t), 0, 0, 1, 0},
  {&__pyx_n_s_expand_polytomies_locals_TipTupl, __pyx_k_expand_polytomies_locals_TipTupl, sizeof(__pyx_k_expand_polytomies_locals_TipTupl), 0, 0, 1, 1},
  {&__pyx_n_s_expand_polytomies_locals_add_lea, __pyx_k_expand_polytomies_locals_add_lea, sizeof(__pyx_k_expand_polytomies_locals_add_lea), 0, 0, 1, 1},
  {&__pyx_n_s_expand_polytomies_locals_enum_un, __pyx_k_expand_polytomies_locals_enum_un, sizeof(__pyx_k_expand_polytomies_locals_enum_un), 0, 0, 1, 1},
  {&__pyx_n_s_extend, __pyx_k_extend, sizeof(__pyx_k_extend), 0, 0, 1, 1},
  {&__pyx_n_s_extendleft, __pyx_k_extendleft, sizeof(__pyx_k_extendleft), 0, 0, 1, 1},
  {&__pyx_n_s_face, __pyx_k_face, sizeof(__pyx_k_face), 0, 0, 1, 1},
  {&__pyx_kp_s_face_position_not_in_s, __pyx_k_face_position_not_in_s, sizeof(__pyx_k_face_position_not_in_s), 0, 0, 1, 0},
  {&__pyx_n_s_faces, __pyx_k_faces, sizeof(__pyx_k_faces), 0, 0, 1, 1},
  {&__pyx_n_s_faces_2, __pyx_k_faces_2, sizeof(__pyx_k_faces_2), 0, 0, 1, 1},
  {&__pyx_n_s_fget, __pyx_k_fget, sizeof(__pyx_k_fget), 0, 0, 1, 1},
  {&__pyx_n_s_file_name, __pyx_k_file_name, sizeof(__pyx_k_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_format_root_node, __pyx_k_format_root_node, sizeof(__pyx_k_format_root_node), 0, 0, 1, 1},
  {&__pyx_n_s_from_parent_child_table, __pyx_k_from_parent_child_table, sizeof(__pyx_k_from_parent_child_table), 0, 0, 1, 1},
  {&__pyx_n_s_from_parent_child_table_locals_g, __pyx_k_from_parent_child_table_locals_g, sizeof(__pyx_k_from_parent_child_table_locals_g), 0, 0, 1, 1},
  {&__pyx_n_s_from_skbio, __pyx_k_from_skbio, sizeof(__pyx_k_from_skbio), 0, 0, 1, 1},
  {&__pyx_n_s_from_skbio_locals_get_ete_node, __pyx_k_from_skbio_locals_get_ete_node, sizeof(__pyx_k_from_skbio_locals_get_ete_node), 0, 0, 1, 1},
  {&__pyx_n_s_fset, __pyx_k_fset, sizeof(__pyx_k_fset), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_ascii, __pyx_k_get_ascii, sizeof(__pyx_k_get_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_get_cached_content, __pyx_k_get_cached_content, sizeof(__pyx_k_get_cached_content), 0, 0, 1, 1},
  {&__pyx_n_s_get_cached_content_locals_get_va, __pyx_k_get_cached_content_locals_get_va, sizeof(__pyx_k_get_cached_content_locals_get_va), 0, 0, 1, 1},
  {&__pyx_n_s_get_cached_content_locals_get_va_2, __pyx_k_get_cached_content_locals_get_va_2, sizeof(__pyx_k_get_cached_content_locals_get_va_2), 0, 0, 1, 1},
  {&__pyx_n_s_get_children, __pyx_k_get_children, sizeof(__pyx_k_get_children), 0, 0, 1, 1},
  {&__pyx_n_s_get_children_2, __pyx_k_get_children_2, sizeof(__pyx_k_get_children_2), 0, 0, 1, 1},
  {&__pyx_n_s_get_collapsed, __pyx_k_get_collapsed, sizeof(__pyx_k_get_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_get_collapsed_face_areas, __pyx_k_get_collapsed_face_areas, sizeof(__pyx_k_get_collapsed_face_areas), 0, 0, 1, 1},
  {&__pyx_n_s_get_common_ancestor, __pyx_k_get_common_ancestor, sizeof(__pyx_k_get_common_ancestor), 0, 0, 1, 1},
  {&__pyx_n_s_get_descendants, __pyx_k_get_descendants, sizeof(__pyx_k_get_descendants), 0, 0, 1, 1},
  {&__pyx_n_s_get_dist, __pyx_k_get_dist, sizeof(__pyx_k_get_dist), 0, 0, 1, 1},
  {&__pyx_n_s_get_distance, __pyx_k_get_distance, sizeof(__pyx_k_get_distance), 0, 0, 1, 1},
  {&__pyx_n_s_get_edges, __pyx_k_get_edges, sizeof(__pyx_k_get_edges), 0, 0, 1, 1},
  {&__pyx_n_s_get_ete_node, __pyx_k_get_ete_node, sizeof(__pyx_k_get_ete_node), 0, 0, 1, 1},
  {&__pyx_n_s_get_face_areas, __pyx_k_get_face_areas, sizeof(__pyx_k_get_face_areas), 0, 0, 1, 1},
  {&__pyx_n_s_get_farthest_and_closest_leaves, __pyx_k_get_farthest_and_closest_leaves, sizeof(__pyx_k_get_farthest_and_closest_leaves), 0, 0, 1, 1},
  {&__pyx_n_s_get_farthest_leaf, __pyx_k_get_farthest_leaf, sizeof(__pyx_k_get_farthest_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_get_farthest_node, __pyx_k_get_farthest_node, sizeof(__pyx_k_get_farthest_node), 0, 0, 1, 1},
  {&__pyx_n_s_get_img, __pyx_k_get_img, sizeof(__pyx_k_get_img), 0, 0, 1, 1},
  {&__pyx_n_s_get_initialized, __pyx_k_get_initialized, sizeof(__pyx_k_get_initialized), 0, 0, 1, 1},
  {&__pyx_n_s_get_leaves, __pyx_k_get_leaves, sizeof(__pyx_k_get_leaves), 0, 0, 1, 1},
  {&__pyx_n_s_get_monophyletic, __pyx_k_get_monophyletic, sizeof(__pyx_k_get_monophyletic), 0, 0, 1, 1},
  {&__pyx_n_s_get_monophyletic_locals_lambda, __pyx_k_get_monophyletic_locals_lambda, sizeof(__pyx_k_get_monophyletic_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_get_name, __pyx_k_get_name, sizeof(__pyx_k_get_name), 0, 0, 1, 1},
  {&__pyx_n_s_get_node, __pyx_k_get_node, sizeof(__pyx_k_get_node), 0, 0, 1, 1},
  {&__pyx_n_s_get_path, __pyx_k_get_path, sizeof(__pyx_k_get_path), 0, 0, 1, 1},
  {&__pyx_n_s_get_props, __pyx_k_get_props, sizeof(__pyx_k_get_props), 0, 0, 1, 1},
  {&__pyx_n_s_get_sisters, __pyx_k_get_sisters, sizeof(__pyx_k_get_sisters), 0, 0, 1, 1},
  {&__pyx_n_s_get_speciation_trees, __pyx_k_get_speciation_trees, sizeof(__pyx_k_get_speciation_trees), 0, 0, 1, 1},
  {&__pyx_n_s_get_style, __pyx_k_get_style, sizeof(__pyx_k_get_style), 0, 0, 1, 1},
  {&__pyx_n_s_get_support, __pyx_k_get_support, sizeof(__pyx_k_get_support), 0, 0, 1, 1},
  {&__pyx_n_s_get_tree_root, __pyx_k_get_tree_root, sizeof(__pyx_k_get_tree_root), 0, 0, 1, 1},
  {&__pyx_n_s_get_up, __pyx_k_get_up, sizeof(__pyx_k_get_up), 0, 0, 1, 1},
  {&__pyx_n_s_get_value, __pyx_k_get_value, sizeof(__pyx_k_get_value), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_has_duplications, __pyx_k_has_duplications, sizeof(__pyx_k_has_duplications), 0, 0, 1, 1},
  {&__pyx_n_s_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 0, 1, 1},
  {&__pyx_n_s_hashlib, __pyx_k_hashlib, sizeof(__pyx_k_hashlib), 0, 0, 1, 1},
  {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
  {&__pyx_n_s_hexdigest, __pyx_k_hexdigest, sizeof(__pyx_k_hexdigest), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_ignore_missing, __pyx_k_ignore_missing, sizeof(__pyx_k_ignore_missing), 0, 0, 1, 1},
  {&__pyx_n_s_img_style, __pyx_k_img_style, sizeof(__pyx_k_img_style), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_include_self, __pyx_k_include_self, sizeof(__pyx_k_include_self), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_is_collapsed, __pyx_k_is_collapsed, sizeof(__pyx_k_is_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_is_initialized, __pyx_k_is_initialized, sizeof(__pyx_k_is_initialized), 0, 0, 1, 1},
  {&__pyx_n_s_is_leaf, __pyx_k_is_leaf, sizeof(__pyx_k_is_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_is_leaf_fn, __pyx_k_is_leaf_fn, sizeof(__pyx_k_is_leaf_fn), 0, 0, 1, 1},
  {&__pyx_n_s_is_root, __pyx_k_is_root, sizeof(__pyx_k_is_root), 0, 0, 1, 1},
  {&__pyx_n_s_issubset, __pyx_k_issubset, sizeof(__pyx_k_issubset), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_iter_ancestors, __pyx_k_iter_ancestors, sizeof(__pyx_k_iter_ancestors), 0, 0, 1, 1},
  {&__pyx_n_s_iter_descendants, __pyx_k_iter_descendants, sizeof(__pyx_k_iter_descendants), 0, 0, 1, 1},
  {&__pyx_n_s_iter_descendants_levelorder, __pyx_k_iter_descendants_levelorder, sizeof(__pyx_k_iter_descendants_levelorder), 0, 0, 1, 1},
  {&__pyx_n_s_iter_descendants_postorder, __pyx_k_iter_descendants_postorder, sizeof(__pyx_k_iter_descendants_postorder), 0, 0, 1, 1},
  {&__pyx_n_s_iter_descendants_preorder, __pyx_k_iter_descendants_preorder, sizeof(__pyx_k_iter_descendants_preorder), 0, 0, 1, 1},
  {&__pyx_n_s_iter_edges, __pyx_k_iter_edges, sizeof(__pyx_k_iter_edges), 0, 0, 1, 1},
  {&__pyx_n_s_iter_leaf_names, __pyx_k_iter_leaf_names, sizeof(__pyx_k_iter_leaf_names), 0, 0, 1, 1},
  {&__pyx_n_s_iter_leaves, __pyx_k_iter_leaves, sizeof(__pyx_k_iter_leaves), 0, 0, 1, 1},
  {&__pyx_n_s_iter_prepostorder, __pyx_k_iter_prepostorder, sizeof(__pyx_k_iter_prepostorder), 0, 0, 1, 1},
  {&__pyx_n_s_iter_search_nodes, __pyx_k_iter_search_nodes, sizeof(__pyx_k_iter_search_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_keep, __pyx_k_keep, sizeof(__pyx_k_keep), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_labels, __pyx_k_labels, sizeof(__pyx_k_labels), 0, 0, 1, 1},
  {&__pyx_n_s_ladderize, __pyx_k_ladderize, sizeof(__pyx_k_ladderize), 0, 0, 1, 1},
  {&__pyx_n_s_ladderize_locals_lambda, __pyx_k_ladderize_locals_lambda, sizeof(__pyx_k_ladderize_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_layout, __pyx_k_layout, sizeof(__pyx_k_layout), 0, 0, 1, 1},
  {&__pyx_n_s_layouts, __pyx_k_layouts, sizeof(__pyx_k_layouts), 0, 0, 1, 1},
  {&__pyx_n_s_leaves_only, __pyx_k_leaves_only, sizeof(__pyx_k_leaves_only), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_legacy, __pyx_k_legacy, sizeof(__pyx_k_legacy), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_levelorder, __pyx_k_levelorder, sizeof(__pyx_k_levelorder), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_map_attr, __pyx_k_map_attr, sizeof(__pyx_k_map_attr), 0, 0, 1, 1},
  {&__pyx_n_s_map_attributes, __pyx_k_map_attributes, sizeof(__pyx_k_map_attributes), 0, 0, 1, 1},
  {&__pyx_n_s_map_properties, __pyx_k_map_properties, sizeof(__pyx_k_map_properties), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_rf, __pyx_k_max_rf, sizeof(__pyx_k_max_rf), 0, 0, 1, 1},
  {&__pyx_n_s_max_treeko_splits_to_be_artifact, __pyx_k_max_treeko_splits_to_be_artifact, sizeof(__pyx_k_max_treeko_splits_to_be_artifact), 0, 0, 1, 1},
  {&__pyx_n_s_maxrf, __pyx_k_maxrf, sizeof(__pyx_k_maxrf), 0, 0, 1, 1},
  {&__pyx_n_s_md5, __pyx_k_md5, sizeof(__pyx_k_md5), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_min_support_ref, __pyx_k_min_support_ref, sizeof(__pyx_k_min_support_ref), 0, 0, 1, 1},
  {&__pyx_n_s_min_support_source, __pyx_k_min_support_source, sizeof(__pyx_k_min_support_source), 0, 0, 1, 1},
  {&__pyx_n_s_min_support_t1, __pyx_k_min_support_t1, sizeof(__pyx_k_min_support_t1), 0, 0, 1, 1},
  {&__pyx_n_s_min_support_t2, __pyx_k_min_support_t2, sizeof(__pyx_k_min_support_t2), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_monophyletic, __pyx_k_monophyletic, sizeof(__pyx_k_monophyletic), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_2, __pyx_k_n_2, sizeof(__pyx_k_n_2), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name2node, __pyx_k_name2node, sizeof(__pyx_k_name2node), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_name_formatter, __pyx_k_name_formatter, sizeof(__pyx_k_name_formatter), 0, 0, 1, 1},
  {&__pyx_n_s_names_library, __pyx_k_names_library, sizeof(__pyx_k_names_library), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_tree, __pyx_k_new_tree, sizeof(__pyx_k_new_tree), 0, 0, 1, 1},
  {&__pyx_n_s_newick, __pyx_k_newick, sizeof(__pyx_k_newick), 0, 0, 1, 1},
  {&__pyx_kp_s_newick_extended, __pyx_k_newick_extended, sizeof(__pyx_k_newick_extended), 0, 0, 1, 0},
  {&__pyx_n_s_newick_only, __pyx_k_newick_only, sizeof(__pyx_k_newick_only), 0, 0, 1, 1},
  {&__pyx_n_s_next_node, __pyx_k_next_node, sizeof(__pyx_k_next_node), 0, 0, 1, 1},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_kp_s_node_dist_must_be_a_float_number, __pyx_k_node_dist_must_be_a_float_number, sizeof(__pyx_k_node_dist_must_be_a_float_number), 0, 0, 1, 0},
  {&__pyx_kp_s_node_properties_must_be_a_dict, __pyx_k_node_properties_must_be_a_dict, sizeof(__pyx_k_node_properties_must_be_a_dict), 0, 0, 1, 0},
  {&__pyx_kp_s_node_support_must_be_a_float_num, __pyx_k_node_support_must_be_a_float_num, sizeof(__pyx_k_node_support_must_be_a_float_num), 0, 0, 1, 0},
  {&__pyx_n_s_nodename, __pyx_k_nodename, sizeof(__pyx_k_nodename), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_nodes_by_name, __pyx_k_nodes_by_name, sizeof(__pyx_k_nodes_by_name), 0, 0, 1, 1},
  {&__pyx_n_s_norm_rf, __pyx_k_norm_rf, sizeof(__pyx_k_norm_rf), 0, 0, 1, 1},
  {&__pyx_kp_s_not_a_Face_instance, __pyx_k_not_a_Face_instance, sizeof(__pyx_k_not_a_Face_instance), 0, 0, 1, 0},
  {&__pyx_n_s_notfound, __pyx_k_notfound, sizeof(__pyx_k_notfound), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_outfile, __pyx_k_outfile, sizeof(__pyx_k_outfile), 0, 0, 1, 1},
  {&__pyx_n_s_outgroup, __pyx_k_outgroup, sizeof(__pyx_k_outgroup), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_paraphyletic, __pyx_k_paraphyletic, sizeof(__pyx_k_paraphyletic), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_parent_child_table, __pyx_k_parent_child_table, sizeof(__pyx_k_parent_child_table), 0, 0, 1, 1},
  {&__pyx_n_s_parent_name, __pyx_k_parent_name, sizeof(__pyx_k_parent_name), 0, 0, 1, 1},
  {&__pyx_n_s_ph, __pyx_k_ph, sizeof(__pyx_k_ph), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_polyphyletic, __pyx_k_polyphyletic, sizeof(__pyx_k_polyphyletic), 0, 0, 1, 1},
  {&__pyx_n_s_polytomy_size_limit, __pyx_k_polytomy_size_limit, sizeof(__pyx_k_polytomy_size_limit), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_popleft, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {&__pyx_n_s_port, __pyx_k_port, sizeof(__pyx_k_port), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_postorder, __pyx_k_postorder, sizeof(__pyx_k_postorder), 0, 0, 1, 1},
  {&__pyx_n_s_pr_name, __pyx_k_pr_name, sizeof(__pyx_k_pr_name), 0, 0, 1, 1},
  {&__pyx_n_s_pr_value, __pyx_k_pr_value, sizeof(__pyx_k_pr_value), 0, 0, 1, 1},
  {&__pyx_n_s_preorder, __pyx_k_preorder, sizeof(__pyx_k_preorder), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_preserve_branch_length, __pyx_k_preserve_branch_length, sizeof(__pyx_k_preserve_branch_length), 0, 0, 1, 1},
  {&__pyx_n_s_prevent_nondicotomic, __pyx_k_prevent_nondicotomic, sizeof(__pyx_k_prevent_nondicotomic), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_n_s_properties, __pyx_k_properties, sizeof(__pyx_k_properties), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_props, __pyx_k_props, sizeof(__pyx_k_props), 0, 0, 1, 1},
  {&__pyx_n_s_prune_locals_cmp_nodes, __pyx_k_prune_locals_cmp_nodes, sizeof(__pyx_k_prune_locals_cmp_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_px, __pyx_k_px, sizeof(__pyx_k_px), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_TreeNode, __pyx_k_pyx_unpickle_TreeNode, sizeof(__pyx_k_pyx_unpickle_TreeNode), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_quoted_names, __pyx_k_quoted_names, sizeof(__pyx_k_quoted_names), 0, 0, 1, 1},
  {&__pyx_n_s_quoted_node_names, __pyx_k_quoted_node_names, sizeof(__pyx_k_quoted_node_names), 0, 0, 1, 1},
  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_random_branches, __pyx_k_random_branches, sizeof(__pyx_k_random_branches), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_newick, __pyx_k_read_newick, sizeof(__pyx_k_read_newick), 0, 0, 1, 1},
  {&__pyx_n_s_recursive, __pyx_k_recursive, sizeof(__pyx_k_recursive), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_ref_disc, __pyx_k_ref_disc, sizeof(__pyx_k_ref_disc), 0, 0, 1, 1},
  {&__pyx_n_s_ref_edges, __pyx_k_ref_edges, sizeof(__pyx_k_ref_edges), 0, 0, 1, 1},
  {&__pyx_n_s_ref_edges_in_source, __pyx_k_ref_edges_in_source, sizeof(__pyx_k_ref_edges_in_source), 0, 0, 1, 1},
  {&__pyx_n_s_ref_p, __pyx_k_ref_p, sizeof(__pyx_k_ref_p), 0, 0, 1, 1},
  {&__pyx_n_s_ref_tree, __pyx_k_ref_tree, sizeof(__pyx_k_ref_tree), 0, 0, 1, 1},
  {&__pyx_n_s_ref_tree_attr, __pyx_k_ref_tree_attr, sizeof(__pyx_k_ref_tree_attr), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_remove_child, __pyx_k_remove_child, sizeof(__pyx_k_remove_child), 0, 0, 1, 1},
  {&__pyx_n_s_remove_children, __pyx_k_remove_children, sizeof(__pyx_k_remove_children), 0, 0, 1, 1},
  {&__pyx_n_s_render_tree, __pyx_k_render_tree, sizeof(__pyx_k_render_tree), 0, 0, 1, 1},
  {&__pyx_n_s_resolve, __pyx_k_resolve, sizeof(__pyx_k_resolve), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_polytomy, __pyx_k_resolve_polytomy, sizeof(__pyx_k_resolve_polytomy), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_polytomy_locals__resolve, __pyx_k_resolve_polytomy_locals__resolve, sizeof(__pyx_k_resolve_polytomy_locals__resolve), 0, 0, 1, 1},
  {&__pyx_kp_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 0},
  {&__pyx_n_s_return_format, __pyx_k_return_format, sizeof(__pyx_k_return_format), 0, 0, 1, 1},
  {&__pyx_n_s_reuse_names, __pyx_k_reuse_names, sizeof(__pyx_k_reuse_names), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_rf, __pyx_k_rf, sizeof(__pyx_k_rf), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_robinson_foulds, __pyx_k_robinson_foulds, sizeof(__pyx_k_robinson_foulds), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_s_root_at, __pyx_k_root_at, sizeof(__pyx_k_root_at), 0, 0, 1, 1},
  {&__pyx_n_s_run_smartview, __pyx_k_run_smartview, sizeof(__pyx_k_run_smartview), 0, 0, 1, 1},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_is_not_a_valid_FaceAreas_inst, __pyx_k_s_is_not_a_valid_FaceAreas_inst, sizeof(__pyx_k_s_is_not_a_valid_FaceAreas_inst), 0, 0, 1, 0},
  {&__pyx_n_s_safe_div, __pyx_k_safe_div, sizeof(__pyx_k_safe_div), 0, 0, 1, 1},
  {&__pyx_n_s_sample, __pyx_k_sample, sizeof(__pyx_k_sample), 0, 0, 1, 1},
  {&__pyx_n_s_search_nodes, __pyx_k_search_nodes, sizeof(__pyx_k_search_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set__collapsed_face_areas, __pyx_k_set__collapsed_face_areas, sizeof(__pyx_k_set__collapsed_face_areas), 0, 0, 1, 1},
  {&__pyx_n_s_set_children, __pyx_k_set_children, sizeof(__pyx_k_set_children), 0, 0, 1, 1},
  {&__pyx_n_s_set_collapsed, __pyx_k_set_collapsed, sizeof(__pyx_k_set_collapsed), 0, 0, 1, 1},
  {&__pyx_n_s_set_dist, __pyx_k_set_dist, sizeof(__pyx_k_set_dist), 0, 0, 1, 1},
  {&__pyx_n_s_set_face_areas, __pyx_k_set_face_areas, sizeof(__pyx_k_set_face_areas), 0, 0, 1, 1},
  {&__pyx_n_s_set_formatters, __pyx_k_set_formatters, sizeof(__pyx_k_set_formatters), 0, 0, 1, 1},
  {&__pyx_n_s_set_initialized, __pyx_k_set_initialized, sizeof(__pyx_k_set_initialized), 0, 0, 1, 1},
  {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
  {&__pyx_n_s_set_props, __pyx_k_set_props, sizeof(__pyx_k_set_props), 0, 0, 1, 1},
  {&__pyx_n_s_set_style, __pyx_k_set_style, sizeof(__pyx_k_set_style), 0, 0, 1, 1},
  {&__pyx_n_s_set_style_2, __pyx_k_set_style_2, sizeof(__pyx_k_set_style_2), 0, 0, 1, 1},
  {&__pyx_n_s_set_support, __pyx_k_set_support, sizeof(__pyx_k_set_support), 0, 0, 1, 1},
  {&__pyx_n_s_set_up, __pyx_k_set_up, sizeof(__pyx_k_set_up), 0, 0, 1, 1},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_show_difftable, __pyx_k_show_difftable, sizeof(__pyx_k_show_difftable), 0, 0, 1, 1},
  {&__pyx_n_s_show_difftable_summary, __pyx_k_show_difftable_summary, sizeof(__pyx_k_show_difftable_summary), 0, 0, 1, 1},
  {&__pyx_n_s_show_difftable_tab, __pyx_k_show_difftable_tab, sizeof(__pyx_k_show_difftable_tab), 0, 0, 1, 1},
  {&__pyx_n_s_show_difftable_topo, __pyx_k_show_difftable_topo, sizeof(__pyx_k_show_difftable_topo), 0, 0, 1, 1},
  {&__pyx_n_s_show_internal, __pyx_k_show_internal, sizeof(__pyx_k_show_internal), 0, 0, 1, 1},
  {&__pyx_n_s_show_tree, __pyx_k_show_tree, sizeof(__pyx_k_show_tree), 0, 0, 1, 1},
  {&__pyx_n_s_sister, __pyx_k_sister, sizeof(__pyx_k_sister), 0, 0, 1, 1},
  {&__pyx_n_s_six, __pyx_k_six, sizeof(__pyx_k_six), 0, 0, 1, 1},
  {&__pyx_n_s_six_moves, __pyx_k_six_moves, sizeof(__pyx_k_six_moves), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_skbio, __pyx_k_skbio, sizeof(__pyx_k_skbio), 0, 0, 1, 1},
  {&__pyx_n_s_skbioTreeNode, __pyx_k_skbioTreeNode, sizeof(__pyx_k_skbioTreeNode), 0, 0, 1, 1},
  {&__pyx_n_s_skbio_node, __pyx_k_skbio_node, sizeof(__pyx_k_skbio_node), 0, 0, 1, 1},
  {&__pyx_n_s_skbio_tree, __pyx_k_skbio_tree, sizeof(__pyx_k_skbio_tree), 0, 0, 1, 1},
  {&__pyx_n_s_skip_large_polytomies, __pyx_k_skip_large_polytomies, sizeof(__pyx_k_skip_large_polytomies), 0, 0, 1, 1},
  {&__pyx_n_s_smartFace, __pyx_k_smartFace, sizeof(__pyx_k_smartFace), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_sort_descendants_locals_lambda, __pyx_k_sort_descendants_locals_lambda, sizeof(__pyx_k_sort_descendants_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_source_edges, __pyx_k_source_edges, sizeof(__pyx_k_source_edges), 0, 0, 1, 1},
  {&__pyx_n_s_source_edges_in_ref, __pyx_k_source_edges_in_ref, sizeof(__pyx_k_source_edges_in_ref), 0, 0, 1, 1},
  {&__pyx_n_s_source_subtrees, __pyx_k_source_subtrees, sizeof(__pyx_k_source_subtrees), 0, 0, 1, 1},
  {&__pyx_n_s_source_tree_attr, __pyx_k_source_tree_attr, sizeof(__pyx_k_source_tree_attr), 0, 0, 1, 1},
  {&__pyx_n_s_sp_naming_function, __pyx_k_sp_naming_function, sizeof(__pyx_k_sp_naming_function), 0, 0, 1, 1},
  {&__pyx_n_s_speciesFunction, __pyx_k_speciesFunction, sizeof(__pyx_k_speciesFunction), 0, 0, 1, 1},
  {&__pyx_n_s_src_disc, __pyx_k_src_disc, sizeof(__pyx_k_src_disc), 0, 0, 1, 1},
  {&__pyx_n_s_src_p, __pyx_k_src_p, sizeof(__pyx_k_src_p), 0, 0, 1, 1},
  {&__pyx_n_s_src_tree, __pyx_k_src_tree, sizeof(__pyx_k_src_tree), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_store, __pyx_k_store, sizeof(__pyx_k_store), 0, 0, 1, 1},
  {&__pyx_n_s_store_attr, __pyx_k_store_attr, sizeof(__pyx_k_store_attr), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_string_types, __pyx_k_string_types, sizeof(__pyx_k_string_types), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_support, __pyx_k_support, sizeof(__pyx_k_support), 0, 0, 1, 1},
  {&__pyx_n_s_support_formatter, __pyx_k_support_formatter, sizeof(__pyx_k_support_formatter), 0, 0, 1, 1},
  {&__pyx_n_s_support_range, __pyx_k_support_range, sizeof(__pyx_k_support_range), 0, 0, 1, 1},
  {&__pyx_n_s_t2, __pyx_k_t2, sizeof(__pyx_k_t2), 0, 0, 1, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_target2, __pyx_k_target2, sizeof(__pyx_k_target2), 0, 0, 1, 1},
  {&__pyx_n_s_target_attr, __pyx_k_target_attr, sizeof(__pyx_k_target_attr), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tools, __pyx_k_tools, sizeof(__pyx_k_tools), 0, 0, 1, 1},
  {&__pyx_n_s_topology, __pyx_k_topology, sizeof(__pyx_k_topology), 0, 0, 1, 1},
  {&__pyx_n_s_topology_only, __pyx_k_topology_only, sizeof(__pyx_k_topology_only), 0, 0, 1, 1},
  {&__pyx_n_s_translate_nodes, __pyx_k_translate_nodes, sizeof(__pyx_k_translate_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_traverse, __pyx_k_traverse, sizeof(__pyx_k_traverse), 0, 0, 1, 1},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_n_s_tree_length, __pyx_k_tree_length, sizeof(__pyx_k_tree_length), 0, 0, 1, 1},
  {&__pyx_n_s_tree_name, __pyx_k_tree_name, sizeof(__pyx_k_tree_name), 0, 0, 1, 1},
  {&__pyx_n_s_tree_style, __pyx_k_tree_style, sizeof(__pyx_k_tree_style), 0, 0, 1, 1},
  {&__pyx_n_s_treediff, __pyx_k_treediff, sizeof(__pyx_k_treediff), 0, 0, 1, 1},
  {&__pyx_n_s_treeko_dist, __pyx_k_treeko_dist, sizeof(__pyx_k_treeko_dist), 0, 0, 1, 1},
  {&__pyx_n_s_treeview, __pyx_k_treeview, sizeof(__pyx_k_treeview), 0, 0, 1, 1},
  {&__pyx_n_s_treeview_faces, __pyx_k_treeview_faces, sizeof(__pyx_k_treeview_faces), 0, 0, 1, 1},
  {&__pyx_n_s_treeview_main, __pyx_k_treeview_main, sizeof(__pyx_k_treeview_main), 0, 0, 1, 1},
  {&__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
  {&__pyx_n_s_units, __pyx_k_units, sizeof(__pyx_k_units), 0, 0, 1, 1},
  {&__pyx_n_s_unrooted, __pyx_k_unrooted, sizeof(__pyx_k_unrooted), 0, 0, 1, 1},
  {&__pyx_n_s_unrooted_trees, __pyx_k_unrooted_trees, sizeof(__pyx_k_unrooted_trees), 0, 0, 1, 1},
  {&__pyx_n_s_up, __pyx_k_up, sizeof(__pyx_k_up), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_use_collateral, __pyx_k_use_collateral, sizeof(__pyx_k_use_collateral), 0, 0, 1, 1},
  {&__pyx_n_s_usecolor, __pyx_k_usecolor, sizeof(__pyx_k_usecolor), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_utils, __pyx_k_utils, sizeof(__pyx_k_utils), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_valid_nodes, __pyx_k_valid_nodes, sizeof(__pyx_k_valid_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_valid_ref_edges, __pyx_k_valid_ref_edges, sizeof(__pyx_k_valid_ref_edges), 0, 0, 1, 1},
  {&__pyx_n_s_valid_src_edges, __pyx_k_valid_src_edges, sizeof(__pyx_k_valid_src_edges), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_win_name, __pyx_k_win_name, sizeof(__pyx_k_win_name), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_write_newick, __pyx_k_write_newick, sizeof(__pyx_k_write_newick), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 2541, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_builtin_hex = __Pyx_GetBuiltinName(__pyx_n_s_hex); if (!__pyx_builtin_hex) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 655, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 805, __pyx_L1_error)
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 810, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 947, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 1609, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 1981, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 2492, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ete4/coretype/tree.pyx":352
 *         Add or update a node's feature.
 *         """
 *         print("\nWARNING! add_feature is DEPRECATED use add_prop instead\n")             # <<<<<<<<<<<<<<
 *         self.add_prop(pr_name, pr_value)
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_WARNING_add_feature_is_DEPRECAT); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "ete4/coretype/tree.pyx":358
 *         """
 *         Add or update several features. """
 *         print("\nWARNING! add_features is DEPRECATED use add_props instead\n")             # <<<<<<<<<<<<<<
 *         self.add_props(**features)
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_WARNING_add_features_is_DEPRECA); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "ete4/coretype/tree.pyx":365
 *         Permanently deletes a node's feature.
 *         """
 *         print("\nWARNING! del_prop is DEPRECATED use del_prop instead\n")             # <<<<<<<<<<<<<<
 *         self.del_prop(pr_name)
 *     # DEPRECATED #
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_WARNING_del_prop_is_DEPRECATED); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "ete4/coretype/tree.pyx":616
 * 
 *         """
 *         def cmp_nodes(x, y):             # <<<<<<<<<<<<<<
 *             # if several nodes are in the same path of two kept nodes,
 *             # only one should be maintained. This prioritize internal
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_cmp_nodes, 616, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 616, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":947
 * 
 *         if outfile is not None:
 *             with open(outfile, "w") as OUT:             # <<<<<<<<<<<<<<
 *                 OUT.write(nw)
 *         else:
 */
  __pyx_tuple__9 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "ete4/coretype/tree.pyx":1268
 * 
 *     def populate(self, size, names_library=None, reuse_names=False,
 *                  random_branches=False, branch_range=(0,1),             # <<<<<<<<<<<<<<
 *                  support_range=(0,1)):
 *         """
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "ete4/coretype/tree.pyx":1368
 *         """
 *         if not (mode == 'legacy' or mode == 'keep'):
 *             raise ValueError("The value of the mode parameter must be 'legacy' or 'keep'")             # <<<<<<<<<<<<<<
 *         if len(self.children)==2:
 *             if not self.children[0].is_leaf():
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_The_value_of_the_mode_parameter); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "ete4/coretype/tree.pyx":1651
 *             _store = {}
 * 
 *         def get_value(_n):             # <<<<<<<<<<<<<<
 *             if store_attr is None:
 *                 _val = [_n]
 */
  __pyx_tuple__21 = PyTuple_Pack(4, __pyx_n_s_n, __pyx_n_s_val, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_get_value, 1651, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 1651, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1780
 *                                       tuple(sorted([getattr(n, attr_t1) for n in t1_leaves-content if hasattr(n, attr_t1) and getattr(n, attr_t1) in common_attrs]))]))
 *                         for content in six.itervalues(t1_content)])
 *                 edges1.discard(((),()))             # <<<<<<<<<<<<<<
 *             else:
 *                 edges1 = set([
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_empty_tuple, __pyx_empty_tuple); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "ete4/coretype/tree.pyx":1871
 *         source_tree = self
 * 
 *         def _safe_div(a, b):             # <<<<<<<<<<<<<<
 *             if a != 0:
 *                 return a / float(b)
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 1871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_safe_div, 1871, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 1871, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":1876
 *             else: return 0.0
 * 
 *         def _compare(src_tree, ref_tree):             # <<<<<<<<<<<<<<
 *             # calculate partitions and rf distances
 *             rf, maxrf, common, ref_p, src_p, ref_disc, src_disc  = ref_tree.robinson_foulds(src_tree,
 */
  __pyx_tuple__26 = PyTuple_Pack(13, __pyx_n_s_src_tree, __pyx_n_s_ref_tree, __pyx_n_s_rf, __pyx_n_s_maxrf, __pyx_n_s_common, __pyx_n_s_ref_p, __pyx_n_s_src_p, __pyx_n_s_ref_disc, __pyx_n_s_src_disc, __pyx_n_s_valid_ref_edges, __pyx_n_s_valid_src_edges, __pyx_n_s_common_edges, __pyx_n_s_p); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_compare, 1876, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 1876, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2034
 *             ete_diff.show_difftable_tab(difftable)
 *         elif output == 'table':
 *             rf, rf_max, _, _, _, _, _ = self.robinson_foulds(t2, attr_t1=attr_t1, attr_t2=attr_t2)[:2]             # <<<<<<<<<<<<<<
 *             ete_diff.show_difftable_summary(difftable, rf, rf_max)
 *         else:
 */
  __pyx_slice__28 = PySlice_New(Py_None, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__28)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__28);
  __Pyx_GIVEREF(__pyx_slice__28);

  /* "ete4/coretype/tree.pyx":2226
 *         if not ignore_missing:
 *             if values - set([getattr(leaf, target_attr) for leaf in targets]):
 *                 raise ValueError('The monophyly of the provided values could never be reached, as not all of them exist in the tree.'             # <<<<<<<<<<<<<<
 *                                  ' Please check your target attribute and values, or set the ignore_missing flag to True')
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_The_monophyly_of_the_provided_va); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "ete4/coretype/tree.pyx":2334
 *             yield labels[0]
 *           else:
 *             for tree in enum_unordered(labels[1:]):             # <<<<<<<<<<<<<<
 *               for new_tree in add_leaf(tree, labels[0]):
 *                 yield new_tree
 */
  __pyx_slice__30 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__30)) __PYX_ERR(0, 2334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__30);
  __Pyx_GIVEREF(__pyx_slice__30);

  /* "ete4/coretype/tree.pyx":2322
 *             pass
 * 
 *         def add_leaf(tree, label):             # <<<<<<<<<<<<<<
 *           yield (label, tree)
 *           if not isinstance(tree, TipTuple) and isinstance(tree, tuple):
 */
  __pyx_tuple__31 = PyTuple_Pack(4, __pyx_n_s_tree, __pyx_n_s_label, __pyx_n_s_left, __pyx_n_s_right); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 2322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_add_leaf, 2322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 2322, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2330
 *               yield (tree[0], right)
 * 
 *         def enum_unordered(labels):             # <<<<<<<<<<<<<<
 *           if len(labels) == 1:
 *             yield labels[0]
 */
  __pyx_tuple__33 = PyTuple_Pack(3, __pyx_n_s_labels, __pyx_n_s_tree, __pyx_n_s_new_tree); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_enum_unordered, 2330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 2330, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2379
 * 
 * 
 *         def _resolve(node):             # <<<<<<<<<<<<<<
 *             if len(node.children) > 2:
 *                 children = list(node.remove_children())
 */
  __pyx_tuple__35 = PyTuple_Pack(6, __pyx_n_s_node, __pyx_n_s_children, __pyx_n_s_next_node, __pyx_n_s_root, __pyx_n_s_i, __pyx_n_s_ch); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 2379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_resolve, 2379, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 2379, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2525
 *                 getattr(self._faces, position).add_face(face, column=column)
 *         else:
 *             raise ValueError("not a Face instance")             # <<<<<<<<<<<<<<
 * 
 *     def set_style(self, node_style):
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_not_a_Face_instance); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 2525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "ete4/coretype/tree.pyx":2539
 *                 self._img_style = node_style
 *         else:
 *             raise ValueError("Treeview module is disabled")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_Treeview_module_is_disabled); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 2539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "ete4/coretype/tree.pyx":2560
 * 
 * 
 *         def get_node(nodename, dist=None):             # <<<<<<<<<<<<<<
 *             if nodename not in nodes_by_name:
 *                 nodes_by_name[nodename] = Tree(name=nodename, dist=dist)
 */
  __pyx_tuple__39 = PyTuple_Pack(3, __pyx_n_s_nodename, __pyx_n_s_dist, __pyx_n_s_node); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_get_node, 2560, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __pyx_tuple__41 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "ete4/coretype/tree.pyx":2602
 *         from skbio import TreeNode as skbioTreeNode
 * 
 *         def get_ete_node(skbio_node):             # <<<<<<<<<<<<<<
 *             ete_node = all_nodes.get(skbio_node, Tree())
 *             if skbio_node.props.get('length') is not None:
 */
  __pyx_tuple__42 = PyTuple_Pack(3, __pyx_n_s_skbio_node, __pyx_n_s_ete_node, __pyx_n_s_a); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_get_ete_node, 2602, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 2602, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":76
 *     A problem occurred during a TreeNode operation
 *     """
 *     def __init__(self, value=''):             # <<<<<<<<<<<<<<
 *         self.value = value
 *     def __str__(self):
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_init, 76, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_tuple__46 = PyTuple_Pack(1, ((PyObject*)__pyx_kp_s_)); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "ete4/coretype/tree.pyx":78
 *     def __init__(self, value=''):
 *         self.value = value
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_str, 78, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 78, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2542
 * 
 *     @staticmethod
 *     def from_parent_child_table(parent_child_table):             # <<<<<<<<<<<<<<
 *         """Converts a parent-child table into an ETE Tree instance.
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(11, __pyx_n_s_parent_child_table, __pyx_n_s_get_node, __pyx_n_s_get_node, __pyx_n_s_nodes_by_name, __pyx_n_s_columns, __pyx_n_s_parent_name, __pyx_n_s_child_name, __pyx_n_s_distance, __pyx_n_s_dist, __pyx_n_s_parent, __pyx_n_s_root); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_from_parent_child_table, 2542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 2542, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2584
 * 
 *     @staticmethod
 *     def from_skbio(skbio_tree, map_attributes=None):             # <<<<<<<<<<<<<<
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(10, __pyx_n_s_skbio_tree, __pyx_n_s_map_attributes, __pyx_n_s_skbioTreeNode, __pyx_n_s_get_ete_node, __pyx_n_s_get_ete_node, __pyx_n_s_all_nodes, __pyx_n_s_node, __pyx_n_s_ete_node, __pyx_n_s_ch, __pyx_n_s_ete_ch); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_from_skbio, 2584, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 2584, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":2628
 *         _ph.call()
 * 
 * def _translate_nodes(root, *nodes):             # <<<<<<<<<<<<<<
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:
 */
  __pyx_tuple__53 = PyTuple_Pack(8, __pyx_n_s_root, __pyx_n_s_nodes, __pyx_n_s_name2node, __pyx_n_s_n_2, __pyx_n_s_notfound, __pyx_n_s_valid_nodes, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ete4_coretype_tree_pyx, __pyx_n_s_translate_nodes, 2628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 2628, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_TreeNode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__55 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_TreeNode, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_setdefault.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  __pyx_umethod_PySet_Type_issubset.type = (PyObject*)&PySet_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5000 = PyInt_FromLong(5000); if (unlikely(!__pyx_int_5000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_126217679 = PyInt_FromLong(126217679L); if (unlikely(!__pyx_int_126217679)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_999999999 = PyInt_FromLong(999999999L); if (unlikely(!__pyx_int_999999999)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree_TreeNode) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree_TreeNode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree_TreeNode.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree_TreeNode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree_TreeNode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode, "__and__"); if (unlikely(!wrapper)) __PYX_ERR(0, 81, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_52__and__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_52__and__.doc = __pyx_doc_4ete4_8coretype_4tree_8TreeNode_52__and__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_52__and__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 81, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_54__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_54__add__.doc = __pyx_doc_4ete4_8coretype_4tree_8TreeNode_54__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_54__add__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 81, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_56__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_56__str__.doc = __pyx_doc_4ete4_8coretype_4tree_8TreeNode_56__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_56__str__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode, "__contains__"); if (unlikely(!wrapper)) __PYX_ERR(0, 81, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_58__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_58__contains__.doc = __pyx_doc_4ete4_8coretype_4tree_8TreeNode_58__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_58__contains__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(0, 81, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_60__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_60__len__.doc = __pyx_doc_4ete4_8coretype_4tree_8TreeNode_60__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_60__len__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 81, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_62__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_62__iter__.doc = __pyx_doc_4ete4_8coretype_4tree_8TreeNode_62__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4ete4_8coretype_4tree_8TreeNode_62__iter__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TreeNode, (PyObject *)&__pyx_type_4ete4_8coretype_4tree_TreeNode) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4ete4_8coretype_4tree_TreeNode) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_ptype_4ete4_8coretype_4tree_TreeNode = &__pyx_type_4ete4_8coretype_4tree_TreeNode;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct__prune = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct__prune;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves) < 0) __PYX_ERR(0, 697, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_1_iter_leaves;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_2_iter_leaf_names;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants) < 0) __PYX_ERR(0, 741, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_3_iter_descendants;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_4_iter_prepostorder;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder) < 0) __PYX_ERR(0, 815, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_5__iter_descendants_postorder;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_6__iter_descendants_levelorder;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_7__iter_descendants_preorder;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors) < 0) __PYX_ERR(0, 863, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_8_iter_ancestors;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes) < 0) __PYX_ERR(0, 1033, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_9_iter_search_nodes;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize) < 0) __PYX_ERR(0, 1557, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_10_ladderize;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants) < 0) __PYX_ERR(0, 1615, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_11_sort_descendants;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_12_get_cached_content;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value) < 0) __PYX_ERR(0, 1651, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_13_get_value;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(0, 1656, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_14_genexpr;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare) < 0) __PYX_ERR(0, 1858, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_15_compare = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_15_compare;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges) < 0) __PYX_ERR(0, 2039, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_16_iter_edges;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic) < 0) __PYX_ERR(0, 2265, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_17_get_monophyletic;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies) < 0) __PYX_ERR(0, 2293, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_18_expand_polytomies;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf) < 0) __PYX_ERR(0, 2322, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_19_add_leaf;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered) < 0) __PYX_ERR(0, 2330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_20_enum_unordered;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy) < 0) __PYX_ERR(0, 2357, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_21_resolve_polytomy;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix) < 0) __PYX_ERR(0, 2399, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_22_cophenetic_matrix;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr) < 0) __PYX_ERR(0, 2485, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_23_genexpr;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table) < 0) __PYX_ERR(0, 2542, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_24_from_parent_child_table;
  if (PyType_Ready(&__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio) < 0) __PYX_ERR(0, 2584, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio.tp_dictoffset && __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio = &__pyx_type_4ete4_8coretype_4tree___pyx_scope_struct_25_from_skbio;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittree(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittree(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_tree(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_tree(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_tree(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'tree' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_tree(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("tree", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ete4__coretype__tree) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ete4.coretype.tree")) {
      if (unlikely(PyDict_SetItemString(modules, "ete4.coretype.tree", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ete4/coretype/tree.pyx":42
 * from __future__ import print_function
 * 
 * import random             # <<<<<<<<<<<<<<
 * import copy
 * import itertools
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":43
 * 
 * import random
 * import copy             # <<<<<<<<<<<<<<
 * import itertools
 * from collections import deque
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":44
 * import random
 * import copy
 * import itertools             # <<<<<<<<<<<<<<
 * from collections import deque
 * from hashlib import md5
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":45
 * import copy
 * import itertools
 * from collections import deque             # <<<<<<<<<<<<<<
 * from hashlib import md5
 * from functools import cmp_to_key
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_deque);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":46
 * import itertools
 * from collections import deque
 * from hashlib import md5             # <<<<<<<<<<<<<<
 * from functools import cmp_to_key
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_md5);
  __Pyx_GIVEREF(__pyx_n_s_md5);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_md5);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hashlib, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_md5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_md5, __pyx_t_2) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":47
 * from collections import deque
 * from hashlib import md5
 * from functools import cmp_to_key             # <<<<<<<<<<<<<<
 * 
 * import six
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_cmp_to_key);
  __Pyx_GIVEREF(__pyx_n_s_cmp_to_key);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_cmp_to_key);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cmp_to_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cmp_to_key, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":49
 * from functools import cmp_to_key
 * 
 * import six             # <<<<<<<<<<<<<<
 * from six.moves import (cPickle, map, range, zip)
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_six, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_six, __pyx_t_2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":50
 * 
 * import six
 * from six.moves import (cPickle, map, range, zip)             # <<<<<<<<<<<<<<
 * 
 * from .. import utils
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_cPickle);
  __Pyx_GIVEREF(__pyx_n_s_cPickle);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_cPickle);
  __Pyx_INCREF(__pyx_n_s_map);
  __Pyx_GIVEREF(__pyx_n_s_map);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_map);
  __Pyx_INCREF(__pyx_n_s_range);
  __Pyx_GIVEREF(__pyx_n_s_range);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_range);
  __Pyx_INCREF(__pyx_n_s_zip);
  __Pyx_GIVEREF(__pyx_n_s_zip);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_zip);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_six_moves, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_cPickle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cPickle, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_map, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_range); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_range, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_zip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ete4/coretype/tree.pyx":52
 * from six.moves import (cPickle, map, range, zip)
 * 
 * from .. import utils             # <<<<<<<<<<<<<<
 * 
 * # the following imports are necessary to set fixed styles and faces
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_utils);
  __Pyx_GIVEREF(__pyx_n_s_utils);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_utils);
  __pyx_t_2 = __Pyx_Import(__pyx_kp_s_, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_utils); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_utils, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":55
 * 
 * # the following imports are necessary to set fixed styles and faces
 * try:             # <<<<<<<<<<<<<<
 *     from ..treeview.main import NodeStyle, _FaceAreas, FaceContainer, FACE_POSITIONS
 *     from ..treeview.faces import Face
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "ete4/coretype/tree.pyx":56
 * # the following imports are necessary to set fixed styles and faces
 * try:
 *     from ..treeview.main import NodeStyle, _FaceAreas, FaceContainer, FACE_POSITIONS             # <<<<<<<<<<<<<<
 *     from ..treeview.faces import Face
 *     from ete4.smartview import Face as smartFace
 */
      __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_NodeStyle);
      __Pyx_GIVEREF(__pyx_n_s_NodeStyle);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NodeStyle);
      __Pyx_INCREF(__pyx_n_s_FaceAreas);
      __Pyx_GIVEREF(__pyx_n_s_FaceAreas);
      PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_FaceAreas);
      __Pyx_INCREF(__pyx_n_s_FaceContainer);
      __Pyx_GIVEREF(__pyx_n_s_FaceContainer);
      PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_FaceContainer);
      __Pyx_INCREF(__pyx_n_s_FACE_POSITIONS);
      __Pyx_GIVEREF(__pyx_n_s_FACE_POSITIONS);
      PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_FACE_POSITIONS);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_treeview_main, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NodeStyle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_NodeStyle, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FaceAreas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_FaceAreas, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FaceContainer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_FaceContainer, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FACE_POSITIONS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_FACE_POSITIONS, __pyx_t_2) < 0) __PYX_ERR(0, 56, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":57
 * try:
 *     from ..treeview.main import NodeStyle, _FaceAreas, FaceContainer, FACE_POSITIONS
 *     from ..treeview.faces import Face             # <<<<<<<<<<<<<<
 *     from ete4.smartview import Face as smartFace
 * except ImportError:
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_Face);
      __Pyx_GIVEREF(__pyx_n_s_Face);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Face);
      __pyx_t_2 = __Pyx_Import(__pyx_n_s_treeview_faces, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Face); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_Face, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "ete4/coretype/tree.pyx":58
 *     from ..treeview.main import NodeStyle, _FaceAreas, FaceContainer, FACE_POSITIONS
 *     from ..treeview.faces import Face
 *     from ete4.smartview import Face as smartFace             # <<<<<<<<<<<<<<
 * except ImportError:
 *     TREEVIEW = False
 */
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_n_s_Face);
      __Pyx_GIVEREF(__pyx_n_s_Face);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Face);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_ete4_smartview, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Face); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_smartFace, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "ete4/coretype/tree.pyx":55
 * 
 * # the following imports are necessary to set fixed styles and faces
 * try:             # <<<<<<<<<<<<<<
 *     from ..treeview.main import NodeStyle, _FaceAreas, FaceContainer, FACE_POSITIONS
 *     from ..treeview.faces import Face
 */
    }

    /* "ete4/coretype/tree.pyx":62
 *     TREEVIEW = False
 * else:
 *     TREEVIEW = True             # <<<<<<<<<<<<<<
 * 
 * __all__ = ["Tree", "TreeNode"]
 */
    /*else:*/ {
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREEVIEW, Py_True) < 0) __PYX_ERR(0, 62, __pyx_L4_except_error)
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "ete4/coretype/tree.pyx":59
 *     from ..treeview.faces import Face
 *     from ete4.smartview import Face as smartFace
 * except ImportError:             # <<<<<<<<<<<<<<
 *     TREEVIEW = False
 * else:
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("ete4.coretype.tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) __PYX_ERR(0, 59, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);

      /* "ete4/coretype/tree.pyx":60
 *     from ete4.smartview import Face as smartFace
 * except ImportError:
 *     TREEVIEW = False             # <<<<<<<<<<<<<<
 * else:
 *     TREEVIEW = True
 */
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_TREEVIEW, Py_False) < 0) __PYX_ERR(0, 60, __pyx_L4_except_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "ete4/coretype/tree.pyx":55
 * 
 * # the following imports are necessary to set fixed styles and faces
 * try:             # <<<<<<<<<<<<<<
 *     from ..treeview.main import NodeStyle, _FaceAreas, FaceContainer, FACE_POSITIONS
 *     from ..treeview.faces import Face
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "ete4/coretype/tree.pyx":64
 *     TREEVIEW = True
 * 
 * __all__ = ["Tree", "TreeNode"]             # <<<<<<<<<<<<<<
 * 
 * DEFAULT_COMPACT = False
 */
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_Tree);
  __Pyx_GIVEREF(__pyx_n_s_Tree);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_Tree);
  __Pyx_INCREF(__pyx_n_s_TreeNode);
  __Pyx_GIVEREF(__pyx_n_s_TreeNode);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_TreeNode);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_7) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":66
 * __all__ = ["Tree", "TreeNode"]
 * 
 * DEFAULT_COMPACT = False             # <<<<<<<<<<<<<<
 * DEFAULT_SHOWINTERNAL = False
 * DEFAULT_DIST = 1.0
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_COMPACT, Py_False) < 0) __PYX_ERR(0, 66, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":67
 * 
 * DEFAULT_COMPACT = False
 * DEFAULT_SHOWINTERNAL = False             # <<<<<<<<<<<<<<
 * DEFAULT_DIST = 1.0
 * DEFAULT_SUPPORT = 1.0
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_SHOWINTERNAL, Py_False) < 0) __PYX_ERR(0, 67, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":68
 * DEFAULT_COMPACT = False
 * DEFAULT_SHOWINTERNAL = False
 * DEFAULT_DIST = 1.0             # <<<<<<<<<<<<<<
 * DEFAULT_SUPPORT = 1.0
 * DEFAULT_NAME = ""
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_DIST, __pyx_float_1_0) < 0) __PYX_ERR(0, 68, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":69
 * DEFAULT_SHOWINTERNAL = False
 * DEFAULT_DIST = 1.0
 * DEFAULT_SUPPORT = 1.0             # <<<<<<<<<<<<<<
 * DEFAULT_NAME = ""
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_SUPPORT, __pyx_float_1_0) < 0) __PYX_ERR(0, 69, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":70
 * DEFAULT_DIST = 1.0
 * DEFAULT_SUPPORT = 1.0
 * DEFAULT_NAME = ""             # <<<<<<<<<<<<<<
 * 
 * class TreeError(Exception):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_NAME, __pyx_kp_s_) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "ete4/coretype/tree.pyx":72
 * DEFAULT_NAME = ""
 * 
 * class TreeError(Exception):             # <<<<<<<<<<<<<<
 *     """
 *     A problem occurred during a TreeNode operation
 */
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_7, __pyx_n_s_TreeError, __pyx_n_s_TreeError, (PyObject *) NULL, __pyx_n_s_ete4_coretype_tree, __pyx_kp_s_A_problem_occurred_during_a_Tre); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "ete4/coretype/tree.pyx":76
 *     A problem occurred during a TreeNode operation
 *     """
 *     def __init__(self, value=''):             # <<<<<<<<<<<<<<
 *         self.value = value
 *     def __str__(self):
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_9TreeError_1__init__, 0, __pyx_n_s_TreeError___init, NULL, __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_8, __pyx_tuple__46);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_8) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":78
 *     def __init__(self, value=''):
 *         self.value = value
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_4ete4_8coretype_4tree_9TreeError_3__str__, 0, __pyx_n_s_TreeError___str, NULL, __pyx_n_s_ete4_coretype_tree, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_str, __pyx_t_8) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "ete4/coretype/tree.pyx":72
 * DEFAULT_NAME = ""
 * 
 * class TreeError(Exception):             # <<<<<<<<<<<<<<
 *     """
 *     A problem occurred during a TreeNode operation
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_TreeError, __pyx_t_7, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TreeError, __pyx_t_8) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":209
 * 
 *     #: Node styling properties
 *     img_style = property(fget=_get_style, fset=_set_style)             # <<<<<<<<<<<<<<
 * 
 *     #: Name for current node
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_style); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fget, __pyx_t_2) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_style); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fset, __pyx_t_2) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_img_style, __pyx_t_2) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":212
 * 
 *     #: Name for current node
 *     name = property(fget=_get_name, fset=_set_name)             # <<<<<<<<<<<<<<
 *     #: Branch length distance to parent node. Default = 0.0
 *     dist = property(fget=_get_dist, fset=_set_dist)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fget, __pyx_t_7) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fset, __pyx_t_7) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_name, __pyx_t_7) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":214
 *     name = property(fget=_get_name, fset=_set_name)
 *     #: Branch length distance to parent node. Default = 0.0
 *     dist = property(fget=_get_dist, fset=_set_dist)             # <<<<<<<<<<<<<<
 *     #: Branch support for current node
 *     support = property(fget=_get_support, fset=_set_support)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_dist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fget, __pyx_t_2) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_dist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fset, __pyx_t_2) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_dist, __pyx_t_2) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":216
 *     dist = property(fget=_get_dist, fset=_set_dist)
 *     #: Branch support for current node
 *     support = property(fget=_get_support, fset=_set_support)             # <<<<<<<<<<<<<<
 *     #: Properties for current node (support included)
 *     props = property(fget=_get_props, fset=_set_props)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_support); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fget, __pyx_t_7) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_support); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fset, __pyx_t_7) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_support, __pyx_t_7) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":218
 *     support = property(fget=_get_support, fset=_set_support)
 *     #: Properties for current node (support included)
 *     props = property(fget=_get_props, fset=_set_props)             # <<<<<<<<<<<<<<
 *     #: Pointer to parent node
 *     up = property(fget=_get_up, fset=_set_up)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_props); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fget, __pyx_t_2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_props); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fset, __pyx_t_2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_props, __pyx_t_2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":220
 *     props = property(fget=_get_props, fset=_set_props)
 *     #: Pointer to parent node
 *     up = property(fget=_get_up, fset=_set_up)             # <<<<<<<<<<<<<<
 *     #: List containing children nodes
 *     children = property(fget=_get_children, fset=_set_children)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_up); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fget, __pyx_t_7) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_up); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fset, __pyx_t_7) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_up, __pyx_t_7) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":222
 *     up = property(fget=_get_up, fset=_set_up)
 *     #: List containing children nodes
 *     children = property(fget=_get_children, fset=_set_children)             # <<<<<<<<<<<<<<
 *     #: Whether layout functions have been run on node
 *     is_initialized = property(fget=_get_initialized, fset=_set_initialized)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_children_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fget, __pyx_t_2) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fset, __pyx_t_2) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_children, __pyx_t_2) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":224
 *     children = property(fget=_get_children, fset=_set_children)
 *     #: Whether layout functions have been run on node
 *     is_initialized = property(fget=_get_initialized, fset=_set_initialized)             # <<<<<<<<<<<<<<
 *     is_collapsed = property(fget=_get_collapsed, fset=_set_collapsed)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_initialized); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fget, __pyx_t_7) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_initialized); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fset, __pyx_t_7) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_is_initialized, __pyx_t_7) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":225
 *     #: Whether layout functions have been run on node
 *     is_initialized = property(fget=_get_initialized, fset=_set_initialized)
 *     is_collapsed = property(fget=_get_collapsed, fset=_set_collapsed)             # <<<<<<<<<<<<<<
 * 
 *     def _set_face_areas(self, value):
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_collapsed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fget, __pyx_t_2) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_collapsed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fset, __pyx_t_2) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_is_collapsed, __pyx_t_2) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":247
 *         return self._collapsed_faces
 * 
 *     faces = property(fget=_get_face_areas, \             # <<<<<<<<<<<<<<
 *                          fset=_set_face_areas)
 *     collapsed_faces = property(fget=_get_collapsed_face_areas, \
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_face_areas); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fget, __pyx_t_7) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":248
 * 
 *     faces = property(fget=_get_face_areas, \
 *                          fset=_set_face_areas)             # <<<<<<<<<<<<<<
 *     collapsed_faces = property(fget=_get_collapsed_face_areas, \
 *                          fset=_set__collapsed_face_areas)
 */
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set_face_areas); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fset, __pyx_t_7) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "ete4/coretype/tree.pyx":247
 *         return self._collapsed_faces
 * 
 *     faces = property(fget=_get_face_areas, \             # <<<<<<<<<<<<<<
 *                          fset=_set_face_areas)
 *     collapsed_faces = property(fget=_get_collapsed_face_areas, \
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_faces_2, __pyx_t_7) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":249
 *     faces = property(fget=_get_face_areas, \
 *                          fset=_set_face_areas)
 *     collapsed_faces = property(fget=_get_collapsed_face_areas, \             # <<<<<<<<<<<<<<
 *                          fset=_set__collapsed_face_areas)
 * 
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_get_collapsed_face_areas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fget, __pyx_t_2) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":250
 *                          fset=_set_face_areas)
 *     collapsed_faces = property(fget=_get_collapsed_face_areas, \
 *                          fset=_set__collapsed_face_areas)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, newick=None, format=0, dist=None, support=None,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_set__collapsed_face_areas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fset, __pyx_t_2) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":249
 *     faces = property(fget=_get_face_areas, \
 *                          fset=_set_face_areas)
 *     collapsed_faces = property(fget=_get_collapsed_face_areas, \             # <<<<<<<<<<<<<<
 *                          fset=_set__collapsed_face_areas)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_collapsed_faces_2, __pyx_t_2) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":401
 *         return child
 * 
 *     def add_children(self, children=[]):             # <<<<<<<<<<<<<<
 *         for child in children:
 *             self.add_child(child)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__5 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":903
 *         print("Max. distance:\t%f" %max_dist)
 * 
 *     def write(self, properties=[], outfile=None, format=0, is_leaf_fn=None,             # <<<<<<<<<<<<<<
 *               format_root_node=False, dist_formatter=None, support_formatter=None,
 *               name_formatter=None, quoted_node_names=False):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__8 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1422
 *                                       units=units, dpi=dpi)
 * 
 *     def explore(self, tree_name=None, tree_style=None, layouts=[], port=5000):             # <<<<<<<<<<<<<<
 *         """
 *         Starts an interactive smartview session to visualize current node
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__12 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1631
 *                 n.children.sort(key=lambda x: str(sorted(node2content[x])))
 * 
 *     def get_cached_content(self, store_attr=None, container_type=set, leaves_only=True, _store=None):             # <<<<<<<<<<<<<<
 *         """
 *         .. versionadded: 2.2
 */
  __Pyx_INCREF(((PyObject *)(&PySet_Type)));
  __pyx_k__20 = ((PyObject *)(&PySet_Type));
  __Pyx_GIVEREF((&PySet_Type));

  /* "ete4/coretype/tree.pyx":2542
 * 
 *     @staticmethod
 *     def from_parent_child_table(parent_child_table):             # <<<<<<<<<<<<<<
 *         """Converts a parent-child table into an ETE Tree instance.
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_224from_parent_child_table, NULL, __pyx_n_s_ete4_coretype_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_from_parent_child_table, __pyx_t_2) < 0) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":2541
 *             raise ValueError("Treeview module is disabled")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_parent_child_table(parent_child_table):
 *         """Converts a parent-child table into an ETE Tree instance.
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_from_parent_child_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_from_parent_child_table, __pyx_t_7) < 0) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":2584
 * 
 *     @staticmethod
 *     def from_skbio(skbio_tree, map_attributes=None):             # <<<<<<<<<<<<<<
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_4ete4_8coretype_4tree_8TreeNode_226from_skbio, NULL, __pyx_n_s_ete4_coretype_tree); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_from_skbio, __pyx_t_7) < 0) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":2583
 *         return root
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_skbio(skbio_tree, map_attributes=None):
 *         """Converts a scikit-bio TreeNode object into ETE Tree object.
 */
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode, __pyx_n_s_from_skbio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode->tp_dict, __pyx_n_s_from_skbio, __pyx_t_2) < 0) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4ete4_8coretype_4tree_TreeNode);

  /* "ete4/coretype/tree.pyx":2628
 *         _ph.call()
 * 
 * def _translate_nodes(root, *nodes):             # <<<<<<<<<<<<<<
 *     name2node = dict([ [n, None] for n in nodes if type(n) is str])
 *     if name2node:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4ete4_8coretype_4tree_1_translate_nodes, NULL, __pyx_n_s_ete4_coretype_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_translate_nodes, __pyx_t_2) < 0) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":2658
 * # Alias
 * #: .. currentmodule:: ete3
 * Tree = TreeNode             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tree, ((PyObject *)__pyx_ptype_4ete4_8coretype_4tree_TreeNode)) < 0) __PYX_ERR(0, 2658, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_TreeNode(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4ete4_8coretype_4tree_3__pyx_unpickle_TreeNode, NULL, __pyx_n_s_ete4_coretype_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_TreeNode, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "ete4/coretype/tree.pyx":1
 * # #START_LICENSE###########################################################             # <<<<<<<<<<<<<<
 * #
 * #
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_TreeNode_from_parent_child_table, __pyx_kp_u_Converts_a_parent_child_table_in) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_TreeNode_from_skbio_line_2584, __pyx_kp_u_Converts_a_scikit_bio_TreeNode_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ete4.coretype.tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ete4.coretype.tree");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* IterNext */
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_Occurred();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    PyErr_Format(PyExc_TypeError,
        "%.200s object is not an iterator", Py_TYPE(iterator)->tp_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS
        next = iternext(iterator);
        if (likely(next))
            return next;
        #if PY_VERSION_HEX >= 0x02070000
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
        #endif
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* pop_index */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(__Pyx_is_valid_index(cix, size))) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       CYTHON_UNUSED int is_safe_type) {
    PyObject* value;
#if PY_VERSION_HEX >= 0x030400A0
    if ((1)) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_setdefault, d, key, default_value);
    }
    return value;
}

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ObjectGetItem */
    #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyFloatBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyFloatBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCallMethod0 */
        static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* CallUnboundCMethod0 */
        static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
        static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* StringJoin */
        #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntCompare */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* py_dict_values */
        static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* GetAttr3 */
        static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* py_set_discard_unhashable */
        static int __Pyx_PySet_DiscardUnhashable(PyObject *set, PyObject *key) {
    PyObject *tmpkey;
    int rv;
    if (likely(!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError)))
        return -1;
    PyErr_Clear();
    tmpkey = __Pyx_PyFrozenSet_New(key);
    if (tmpkey == NULL)
        return -1;
    rv = PySet_Discard(set, tmpkey);
    Py_DECREF(tmpkey);
    return rv;
}

/* py_set_discard */
        static CYTHON_INLINE int __Pyx_PySet_Discard(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    return found;
}

/* set_iter */
        static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* PyIntCompare */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* pyobject_as_double */
        static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* CalculateMetaclass */
        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
        static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* py_dict_keys */
        static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* PyObject_GenericGetAttrNoDict */
        #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
        #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
        static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetNameInClass */
        static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
        #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ToPyCTupleUtility */
        static PyObject* __pyx_convert__to_py___pyx_ctuple_double__and_double(__pyx_ctuple_double__and_double value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(2);
    if (!result) goto bad;
        item = PyFloat_FromDouble(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = PyFloat_FromDouble(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* FromPyCTupleUtility */
        static __pyx_ctuple_double__and_double __pyx_convert__from_py___pyx_ctuple_double__and_double(PyObject * o) {
    __pyx_ctuple_double__and_double result;
    if (!PyTuple_Check(o) || PyTuple_GET_SIZE(o) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected %.16s of size %d, got %.200s", "a tuple", 2, Py_TYPE(o)->tp_name);
        goto bad;
    }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result.f0 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(o, 0));
        if ((result.f0 == (double)-1) && PyErr_Occurred()) goto bad;
        result.f1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(o, 1));
        if ((result.f1 == (double)-1) && PyErr_Occurred()) goto bad;
#else
    {
        PyObject *item;
        item = PySequence_ITEM(o, 0);  if (unlikely(!item)) goto bad;
        result.f0 = __pyx_PyFloat_AsDouble(item);
        Py_DECREF(item);
        if ((result.f0 == (double)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 1);  if (unlikely(!item)) goto bad;
        result.f1 = __pyx_PyFloat_AsDouble(item);
        Py_DECREF(item);
        if ((result.f1 == (double)-1) && PyErr_Occurred()) goto bad;
    }
#endif
    return result;
bad:
    return result;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
        #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
        static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
        #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
        static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
